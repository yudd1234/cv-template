// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultitaskSystemInterface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MultitaskSystemInterface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mutitasksystem {
namespace interface {
class MsgMutiTaskSystemKeepaliveDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MsgMutiTaskSystemKeepalive>
     _instance;
} _MsgMutiTaskSystemKeepalive_default_instance_;
class MsgMutiTaskSystemIFDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MsgMutiTaskSystemIF>
     _instance;
} _MsgMutiTaskSystemIF_default_instance_;

namespace protobuf_MultitaskSystemInterface_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMutiTaskSystemKeepalive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMutiTaskSystemKeepalive, capability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMutiTaskSystemKeepalive, keepalive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMutiTaskSystemKeepalive, dataport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMutiTaskSystemIF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMutiTaskSystemIF, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMutiTaskSystemIF, task_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(MsgMutiTaskSystemKeepalive)},
  { 8, -1, sizeof(MsgMutiTaskSystemIF)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgMutiTaskSystemKeepalive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgMutiTaskSystemIF_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "MultitaskSystemInterface.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MsgMutiTaskSystemKeepalive_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MsgMutiTaskSystemKeepalive_default_instance_);_MsgMutiTaskSystemIF_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MsgMutiTaskSystemIF_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036MultitaskSystemInterface.proto\022\034com.mu"
      "titasksystem.interface\"U\n\032MsgMutiTaskSys"
      "temKeepalive\022\022\n\ncapability\030\n \001(\r\022\021\n\tkeep"
      "alive\030\024 \001(\r\022\020\n\010dataport\030\036 \001(\r\"8\n\023MsgMuti"
      "TaskSystemIF\022\016\n\006msg_id\030\n \001(\r\022\021\n\ttask_dat"
      "a\030\024 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MultitaskSystemInterface.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_MultitaskSystemInterface_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgMutiTaskSystemKeepalive::kCapabilityFieldNumber;
const int MsgMutiTaskSystemKeepalive::kKeepaliveFieldNumber;
const int MsgMutiTaskSystemKeepalive::kDataportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgMutiTaskSystemKeepalive::MsgMutiTaskSystemKeepalive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MultitaskSystemInterface_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
}
MsgMutiTaskSystemKeepalive::MsgMutiTaskSystemKeepalive(const MsgMutiTaskSystemKeepalive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dataport_, &from.dataport_,
    static_cast<size_t>(reinterpret_cast<char*>(&keepalive_) -
    reinterpret_cast<char*>(&dataport_)) + sizeof(keepalive_));
  // @@protoc_insertion_point(copy_constructor:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
}

void MsgMutiTaskSystemKeepalive::SharedCtor() {
  ::memset(&dataport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keepalive_) -
      reinterpret_cast<char*>(&dataport_)) + sizeof(keepalive_));
  _cached_size_ = 0;
}

MsgMutiTaskSystemKeepalive::~MsgMutiTaskSystemKeepalive() {
  // @@protoc_insertion_point(destructor:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  SharedDtor();
}

void MsgMutiTaskSystemKeepalive::SharedDtor() {
}

void MsgMutiTaskSystemKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMutiTaskSystemKeepalive::descriptor() {
  protobuf_MultitaskSystemInterface_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MultitaskSystemInterface_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgMutiTaskSystemKeepalive& MsgMutiTaskSystemKeepalive::default_instance() {
  protobuf_MultitaskSystemInterface_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgMutiTaskSystemKeepalive* MsgMutiTaskSystemKeepalive::New(::google::protobuf::Arena* arena) const {
  MsgMutiTaskSystemKeepalive* n = new MsgMutiTaskSystemKeepalive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgMutiTaskSystemKeepalive::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dataport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keepalive_) -
      reinterpret_cast<char*>(&dataport_)) + sizeof(keepalive_));
  _internal_metadata_.Clear();
}

bool MsgMutiTaskSystemKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 capability = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 keepalive = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keepalive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dataport = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  return false;
#undef DO_
}

void MsgMutiTaskSystemKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 capability = 10;
  if (this->capability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->capability(), output);
  }

  // uint32 keepalive = 20;
  if (this->keepalive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->keepalive(), output);
  }

  // uint32 dataport = 30;
  if (this->dataport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->dataport(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
}

::google::protobuf::uint8* MsgMutiTaskSystemKeepalive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 capability = 10;
  if (this->capability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->capability(), target);
  }

  // uint32 keepalive = 20;
  if (this->keepalive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->keepalive(), target);
  }

  // uint32 dataport = 30;
  if (this->dataport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->dataport(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  return target;
}

size_t MsgMutiTaskSystemKeepalive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dataport = 30;
  if (this->dataport() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dataport());
  }

  // uint32 capability = 10;
  if (this->capability() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capability());
  }

  // uint32 keepalive = 20;
  if (this->keepalive() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->keepalive());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMutiTaskSystemKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgMutiTaskSystemKeepalive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgMutiTaskSystemKeepalive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
    MergeFrom(*source);
  }
}

void MsgMutiTaskSystemKeepalive::MergeFrom(const MsgMutiTaskSystemKeepalive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dataport() != 0) {
    set_dataport(from.dataport());
  }
  if (from.capability() != 0) {
    set_capability(from.capability());
  }
  if (from.keepalive() != 0) {
    set_keepalive(from.keepalive());
  }
}

void MsgMutiTaskSystemKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMutiTaskSystemKeepalive::CopyFrom(const MsgMutiTaskSystemKeepalive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMutiTaskSystemKeepalive::IsInitialized() const {
  return true;
}

void MsgMutiTaskSystemKeepalive::Swap(MsgMutiTaskSystemKeepalive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgMutiTaskSystemKeepalive::InternalSwap(MsgMutiTaskSystemKeepalive* other) {
  using std::swap;
  swap(dataport_, other->dataport_);
  swap(capability_, other->capability_);
  swap(keepalive_, other->keepalive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgMutiTaskSystemKeepalive::GetMetadata() const {
  protobuf_MultitaskSystemInterface_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MultitaskSystemInterface_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgMutiTaskSystemKeepalive

// uint32 capability = 10;
void MsgMutiTaskSystemKeepalive::clear_capability() {
  capability_ = 0u;
}
::google::protobuf::uint32 MsgMutiTaskSystemKeepalive::capability() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.capability)
  return capability_;
}
void MsgMutiTaskSystemKeepalive::set_capability(::google::protobuf::uint32 value) {
  
  capability_ = value;
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.capability)
}

// uint32 keepalive = 20;
void MsgMutiTaskSystemKeepalive::clear_keepalive() {
  keepalive_ = 0u;
}
::google::protobuf::uint32 MsgMutiTaskSystemKeepalive::keepalive() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.keepalive)
  return keepalive_;
}
void MsgMutiTaskSystemKeepalive::set_keepalive(::google::protobuf::uint32 value) {
  
  keepalive_ = value;
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.keepalive)
}

// uint32 dataport = 30;
void MsgMutiTaskSystemKeepalive::clear_dataport() {
  dataport_ = 0u;
}
::google::protobuf::uint32 MsgMutiTaskSystemKeepalive::dataport() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.dataport)
  return dataport_;
}
void MsgMutiTaskSystemKeepalive::set_dataport(::google::protobuf::uint32 value) {
  
  dataport_ = value;
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.dataport)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgMutiTaskSystemIF::kMsgIdFieldNumber;
const int MsgMutiTaskSystemIF::kTaskDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgMutiTaskSystemIF::MsgMutiTaskSystemIF()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MultitaskSystemInterface_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
}
MsgMutiTaskSystemIF::MsgMutiTaskSystemIF(const MsgMutiTaskSystemIF& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.task_data().size() > 0) {
    task_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_data_);
  }
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
}

void MsgMutiTaskSystemIF::SharedCtor() {
  task_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = 0u;
  _cached_size_ = 0;
}

MsgMutiTaskSystemIF::~MsgMutiTaskSystemIF() {
  // @@protoc_insertion_point(destructor:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  SharedDtor();
}

void MsgMutiTaskSystemIF::SharedDtor() {
  task_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgMutiTaskSystemIF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMutiTaskSystemIF::descriptor() {
  protobuf_MultitaskSystemInterface_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MultitaskSystemInterface_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgMutiTaskSystemIF& MsgMutiTaskSystemIF::default_instance() {
  protobuf_MultitaskSystemInterface_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgMutiTaskSystemIF* MsgMutiTaskSystemIF::New(::google::protobuf::Arena* arena) const {
  MsgMutiTaskSystemIF* n = new MsgMutiTaskSystemIF;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgMutiTaskSystemIF::Clear() {
// @@protoc_insertion_point(message_clear_start:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = 0u;
  _internal_metadata_.Clear();
}

bool MsgMutiTaskSystemIF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 msg_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string task_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->task_data().data(), static_cast<int>(this->task_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  return false;
#undef DO_
}

void MsgMutiTaskSystemIF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 10;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->msg_id(), output);
  }

  // string task_data = 20;
  if (this->task_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_data().data(), static_cast<int>(this->task_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->task_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
}

::google::protobuf::uint8* MsgMutiTaskSystemIF::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 10;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->msg_id(), target);
  }

  // string task_data = 20;
  if (this->task_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_data().data(), static_cast<int>(this->task_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->task_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  return target;
}

size_t MsgMutiTaskSystemIF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string task_data = 20;
  if (this->task_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_data());
  }

  // uint32 msg_id = 10;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMutiTaskSystemIF::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgMutiTaskSystemIF* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgMutiTaskSystemIF>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
    MergeFrom(*source);
  }
}

void MsgMutiTaskSystemIF::MergeFrom(const MsgMutiTaskSystemIF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_data().size() > 0) {

    task_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_data_);
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void MsgMutiTaskSystemIF::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMutiTaskSystemIF::CopyFrom(const MsgMutiTaskSystemIF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMutiTaskSystemIF::IsInitialized() const {
  return true;
}

void MsgMutiTaskSystemIF::Swap(MsgMutiTaskSystemIF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgMutiTaskSystemIF::InternalSwap(MsgMutiTaskSystemIF* other) {
  using std::swap;
  task_data_.Swap(&other->task_data_);
  swap(msg_id_, other->msg_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgMutiTaskSystemIF::GetMetadata() const {
  protobuf_MultitaskSystemInterface_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MultitaskSystemInterface_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgMutiTaskSystemIF

// uint32 msg_id = 10;
void MsgMutiTaskSystemIF::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 MsgMutiTaskSystemIF::msg_id() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemIF.msg_id)
  return msg_id_;
}
void MsgMutiTaskSystemIF::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemIF.msg_id)
}

// string task_data = 20;
void MsgMutiTaskSystemIF::clear_task_data() {
  task_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgMutiTaskSystemIF::task_data() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
  return task_data_.GetNoArena();
}
void MsgMutiTaskSystemIF::set_task_data(const ::std::string& value) {
  
  task_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}
#if LANG_CXX11
void MsgMutiTaskSystemIF::set_task_data(::std::string&& value) {
  
  task_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}
#endif
void MsgMutiTaskSystemIF::set_task_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}
void MsgMutiTaskSystemIF::set_task_data(const char* value, size_t size) {
  
  task_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}
::std::string* MsgMutiTaskSystemIF::mutable_task_data() {
  
  // @@protoc_insertion_point(field_mutable:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
  return task_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgMutiTaskSystemIF::release_task_data() {
  // @@protoc_insertion_point(field_release:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
  
  return task_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgMutiTaskSystemIF::set_allocated_task_data(::std::string* task_data) {
  if (task_data != NULL) {
    
  } else {
    
  }
  task_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_data);
  // @@protoc_insertion_point(field_set_allocated:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace interface
}  // namespace mutitasksystem
}  // namespace com

// @@protoc_insertion_point(global_scope)
