// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMeta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RpcMeta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RpcMetaMsg {
class RpcRequestMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RpcRequestMeta>
     _instance;
} _RpcRequestMeta_default_instance_;
class RpcResponseMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RpcResponseMeta>
     _instance;
} _RpcResponseMeta_default_instance_;
class RpcChunkInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RpcChunkInfo>
     _instance;
} _RpcChunkInfo_default_instance_;
class RpcMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RpcMeta>
     _instance;
} _RpcMeta_default_instance_;

namespace protobuf_RpcMeta_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, service_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, method_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, log_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, status_text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcChunkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcChunkInfo, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcChunkInfo, chunk_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, compress_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, correlation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, attachment_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, chuck_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, authentication_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RpcRequestMeta)},
  { 8, -1, sizeof(RpcResponseMeta)},
  { 15, -1, sizeof(RpcChunkInfo)},
  { 22, -1, sizeof(RpcMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcRequestMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcResponseMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcChunkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcMeta_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "RpcMeta.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RpcRequestMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RpcRequestMeta_default_instance_);_RpcResponseMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RpcResponseMeta_default_instance_);_RpcChunkInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RpcChunkInfo_default_instance_);_RpcMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RpcMeta_default_instance_);_RpcMeta_default_instance_._instance.get_mutable()->request_ = const_cast< ::RpcMetaMsg::RpcRequestMeta*>(
      ::RpcMetaMsg::RpcRequestMeta::internal_default_instance());
  _RpcMeta_default_instance_._instance.get_mutable()->response_ = const_cast< ::RpcMetaMsg::RpcResponseMeta*>(
      ::RpcMetaMsg::RpcResponseMeta::internal_default_instance());
  _RpcMeta_default_instance_._instance.get_mutable()->chuck_info_ = const_cast< ::RpcMetaMsg::RpcChunkInfo*>(
      ::RpcMetaMsg::RpcChunkInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rRpcMeta.proto\022\nRpcMetaMsg\"K\n\016RpcReques"
      "tMeta\022\024\n\014service_name\030\001 \001(\t\022\023\n\013method_na"
      "me\030\002 \001(\t\022\016\n\006log_id\030\003 \001(\004\";\n\017RpcResponseM"
      "eta\022\023\n\013status_code\030\001 \001(\r\022\023\n\013status_text\030"
      "\002 \001(\t\"3\n\014RpcChunkInfo\022\021\n\tstream_id\030\001 \001(\004"
      "\022\020\n\010chunk_id\030\002 \001(\004\"\343\002\n\007RpcMeta\022+\n\007reques"
      "t\030\001 \001(\0132\032.RpcMetaMsg.RpcRequestMeta\022-\n\010r"
      "esponse\030\002 \001(\0132\033.RpcMetaMsg.RpcResponseMe"
      "ta\0227\n\rcompress_type\030\003 \001(\0162 .RpcMetaMsg.R"
      "pcMeta.CompressType\022\026\n\016correlation_id\030\004 "
      "\001(\004\022\027\n\017attachment_size\030\005 \001(\r\022,\n\nchuck_in"
      "fo\030\006 \001(\0132\030.RpcMetaMsg.RpcChunkInfo\022\033\n\023au"
      "thentication_data\030\007 \001(\014\"G\n\014CompressType\022"
      "\017\n\013COMPRESS_NO\020\000\022\023\n\017COMPRESS_SNAPPY\020\001\022\021\n"
      "\rCOMPRESS_GZIP\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 584);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RpcMeta.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_RpcMeta_2eproto

const ::google::protobuf::EnumDescriptor* RpcMeta_CompressType_descriptor() {
  protobuf_RpcMeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcMeta_2eproto::file_level_enum_descriptors[0];
}
bool RpcMeta_CompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RpcMeta_CompressType RpcMeta::COMPRESS_NO;
const RpcMeta_CompressType RpcMeta::COMPRESS_SNAPPY;
const RpcMeta_CompressType RpcMeta::COMPRESS_GZIP;
const RpcMeta_CompressType RpcMeta::CompressType_MIN;
const RpcMeta_CompressType RpcMeta::CompressType_MAX;
const int RpcMeta::CompressType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcRequestMeta::kServiceNameFieldNumber;
const int RpcRequestMeta::kMethodNameFieldNumber;
const int RpcRequestMeta::kLogIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcRequestMeta::RpcRequestMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcMeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpcMetaMsg.RpcRequestMeta)
}
RpcRequestMeta::RpcRequestMeta(const RpcRequestMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method_name().size() > 0) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  log_id_ = from.log_id_;
  // @@protoc_insertion_point(copy_constructor:RpcMetaMsg.RpcRequestMeta)
}

void RpcRequestMeta::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RpcRequestMeta::~RpcRequestMeta() {
  // @@protoc_insertion_point(destructor:RpcMetaMsg.RpcRequestMeta)
  SharedDtor();
}

void RpcRequestMeta::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcRequestMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcRequestMeta::descriptor() {
  protobuf_RpcMeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcMeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcRequestMeta& RpcRequestMeta::default_instance() {
  protobuf_RpcMeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcRequestMeta* RpcRequestMeta::New(::google::protobuf::Arena* arena) const {
  RpcRequestMeta* n = new RpcRequestMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcRequestMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:RpcMetaMsg.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RpcRequestMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpcMetaMsg.RpcRequestMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RpcMetaMsg.RpcRequestMeta.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RpcMetaMsg.RpcRequestMeta.method_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 log_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpcMetaMsg.RpcRequestMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpcMetaMsg.RpcRequestMeta)
  return false;
#undef DO_
}

void RpcRequestMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpcMetaMsg.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RpcMetaMsg.RpcRequestMeta.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RpcMetaMsg.RpcRequestMeta.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  // uint64 log_id = 3;
  if (this->log_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->log_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RpcMetaMsg.RpcRequestMeta)
}

::google::protobuf::uint8* RpcRequestMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RpcMetaMsg.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RpcMetaMsg.RpcRequestMeta.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RpcMetaMsg.RpcRequestMeta.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // uint64 log_id = 3;
  if (this->log_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->log_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpcMetaMsg.RpcRequestMeta)
  return target;
}

size_t RpcRequestMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RpcMetaMsg.RpcRequestMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  // uint64 log_id = 3;
  if (this->log_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcRequestMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RpcMetaMsg.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcRequestMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcRequestMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RpcMetaMsg.RpcRequestMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RpcMetaMsg.RpcRequestMeta)
    MergeFrom(*source);
  }
}

void RpcRequestMeta::MergeFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RpcMetaMsg.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.method_name().size() > 0) {

    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.log_id() != 0) {
    set_log_id(from.log_id());
  }
}

void RpcRequestMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RpcMetaMsg.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequestMeta::CopyFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RpcMetaMsg.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestMeta::IsInitialized() const {
  return true;
}

void RpcRequestMeta::Swap(RpcRequestMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcRequestMeta::InternalSwap(RpcRequestMeta* other) {
  using std::swap;
  service_name_.Swap(&other->service_name_);
  method_name_.Swap(&other->method_name_);
  swap(log_id_, other->log_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcRequestMeta::GetMetadata() const {
  protobuf_RpcMeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcMeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcRequestMeta

// string service_name = 1;
void RpcRequestMeta::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RpcRequestMeta::service_name() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcRequestMeta.service_name)
  return service_name_.GetNoArena();
}
void RpcRequestMeta::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcRequestMeta.service_name)
}
#if LANG_CXX11
void RpcRequestMeta::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RpcMetaMsg.RpcRequestMeta.service_name)
}
#endif
void RpcRequestMeta::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RpcMetaMsg.RpcRequestMeta.service_name)
}
void RpcRequestMeta::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RpcMetaMsg.RpcRequestMeta.service_name)
}
::std::string* RpcRequestMeta::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcRequestMeta.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcRequestMeta::release_service_name() {
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcRequestMeta.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcRequestMeta::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcRequestMeta.service_name)
}

// string method_name = 2;
void RpcRequestMeta::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RpcRequestMeta::method_name() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcRequestMeta.method_name)
  return method_name_.GetNoArena();
}
void RpcRequestMeta::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcRequestMeta.method_name)
}
#if LANG_CXX11
void RpcRequestMeta::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RpcMetaMsg.RpcRequestMeta.method_name)
}
#endif
void RpcRequestMeta::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RpcMetaMsg.RpcRequestMeta.method_name)
}
void RpcRequestMeta::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RpcMetaMsg.RpcRequestMeta.method_name)
}
::std::string* RpcRequestMeta::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcRequestMeta.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcRequestMeta::release_method_name() {
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcRequestMeta.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcRequestMeta::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcRequestMeta.method_name)
}

// uint64 log_id = 3;
void RpcRequestMeta::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RpcRequestMeta::log_id() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcRequestMeta.log_id)
  return log_id_;
}
void RpcRequestMeta::set_log_id(::google::protobuf::uint64 value) {
  
  log_id_ = value;
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcRequestMeta.log_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcResponseMeta::kStatusCodeFieldNumber;
const int RpcResponseMeta::kStatusTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcResponseMeta::RpcResponseMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcMeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpcMetaMsg.RpcResponseMeta)
}
RpcResponseMeta::RpcResponseMeta(const RpcResponseMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status_text().size() > 0) {
    status_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_text_);
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:RpcMetaMsg.RpcResponseMeta)
}

void RpcResponseMeta::SharedCtor() {
  status_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0u;
  _cached_size_ = 0;
}

RpcResponseMeta::~RpcResponseMeta() {
  // @@protoc_insertion_point(destructor:RpcMetaMsg.RpcResponseMeta)
  SharedDtor();
}

void RpcResponseMeta::SharedDtor() {
  status_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcResponseMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcResponseMeta::descriptor() {
  protobuf_RpcMeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcMeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcResponseMeta& RpcResponseMeta::default_instance() {
  protobuf_RpcMeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcResponseMeta* RpcResponseMeta::New(::google::protobuf::Arena* arena) const {
  RpcResponseMeta* n = new RpcResponseMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcResponseMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:RpcMetaMsg.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0u;
  _internal_metadata_.Clear();
}

bool RpcResponseMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpcMetaMsg.RpcResponseMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 status_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status_text().data(), static_cast<int>(this->status_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RpcMetaMsg.RpcResponseMeta.status_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpcMetaMsg.RpcResponseMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpcMetaMsg.RpcResponseMeta)
  return false;
#undef DO_
}

void RpcResponseMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpcMetaMsg.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status_code = 1;
  if (this->status_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_code(), output);
  }

  // string status_text = 2;
  if (this->status_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_text().data(), static_cast<int>(this->status_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RpcMetaMsg.RpcResponseMeta.status_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status_text(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RpcMetaMsg.RpcResponseMeta)
}

::google::protobuf::uint8* RpcResponseMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RpcMetaMsg.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status_code = 1;
  if (this->status_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_code(), target);
  }

  // string status_text = 2;
  if (this->status_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_text().data(), static_cast<int>(this->status_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RpcMetaMsg.RpcResponseMeta.status_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status_text(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpcMetaMsg.RpcResponseMeta)
  return target;
}

size_t RpcResponseMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RpcMetaMsg.RpcResponseMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string status_text = 2;
  if (this->status_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status_text());
  }

  // uint32 status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcResponseMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RpcMetaMsg.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcResponseMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcResponseMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RpcMetaMsg.RpcResponseMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RpcMetaMsg.RpcResponseMeta)
    MergeFrom(*source);
  }
}

void RpcResponseMeta::MergeFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RpcMetaMsg.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_text().size() > 0) {

    status_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_text_);
  }
  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void RpcResponseMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RpcMetaMsg.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcResponseMeta::CopyFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RpcMetaMsg.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponseMeta::IsInitialized() const {
  return true;
}

void RpcResponseMeta::Swap(RpcResponseMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcResponseMeta::InternalSwap(RpcResponseMeta* other) {
  using std::swap;
  status_text_.Swap(&other->status_text_);
  swap(status_code_, other->status_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcResponseMeta::GetMetadata() const {
  protobuf_RpcMeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcMeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcResponseMeta

// uint32 status_code = 1;
void RpcResponseMeta::clear_status_code() {
  status_code_ = 0u;
}
::google::protobuf::uint32 RpcResponseMeta::status_code() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcResponseMeta.status_code)
  return status_code_;
}
void RpcResponseMeta::set_status_code(::google::protobuf::uint32 value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcResponseMeta.status_code)
}

// string status_text = 2;
void RpcResponseMeta::clear_status_text() {
  status_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RpcResponseMeta::status_text() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcResponseMeta.status_text)
  return status_text_.GetNoArena();
}
void RpcResponseMeta::set_status_text(const ::std::string& value) {
  
  status_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcResponseMeta.status_text)
}
#if LANG_CXX11
void RpcResponseMeta::set_status_text(::std::string&& value) {
  
  status_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RpcMetaMsg.RpcResponseMeta.status_text)
}
#endif
void RpcResponseMeta::set_status_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RpcMetaMsg.RpcResponseMeta.status_text)
}
void RpcResponseMeta::set_status_text(const char* value, size_t size) {
  
  status_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RpcMetaMsg.RpcResponseMeta.status_text)
}
::std::string* RpcResponseMeta::mutable_status_text() {
  
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcResponseMeta.status_text)
  return status_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcResponseMeta::release_status_text() {
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcResponseMeta.status_text)
  
  return status_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcResponseMeta::set_allocated_status_text(::std::string* status_text) {
  if (status_text != NULL) {
    
  } else {
    
  }
  status_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_text);
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcResponseMeta.status_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcChunkInfo::kStreamIdFieldNumber;
const int RpcChunkInfo::kChunkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcChunkInfo::RpcChunkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcMeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpcMetaMsg.RpcChunkInfo)
}
RpcChunkInfo::RpcChunkInfo(const RpcChunkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunk_id_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(chunk_id_));
  // @@protoc_insertion_point(copy_constructor:RpcMetaMsg.RpcChunkInfo)
}

void RpcChunkInfo::SharedCtor() {
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunk_id_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(chunk_id_));
  _cached_size_ = 0;
}

RpcChunkInfo::~RpcChunkInfo() {
  // @@protoc_insertion_point(destructor:RpcMetaMsg.RpcChunkInfo)
  SharedDtor();
}

void RpcChunkInfo::SharedDtor() {
}

void RpcChunkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcChunkInfo::descriptor() {
  protobuf_RpcMeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcMeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcChunkInfo& RpcChunkInfo::default_instance() {
  protobuf_RpcMeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcChunkInfo* RpcChunkInfo::New(::google::protobuf::Arena* arena) const {
  RpcChunkInfo* n = new RpcChunkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcChunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RpcMetaMsg.RpcChunkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunk_id_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(chunk_id_));
  _internal_metadata_.Clear();
}

bool RpcChunkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpcMetaMsg.RpcChunkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 stream_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 chunk_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpcMetaMsg.RpcChunkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpcMetaMsg.RpcChunkInfo)
  return false;
#undef DO_
}

void RpcChunkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpcMetaMsg.RpcChunkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stream_id = 1;
  if (this->stream_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stream_id(), output);
  }

  // uint64 chunk_id = 2;
  if (this->chunk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chunk_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RpcMetaMsg.RpcChunkInfo)
}

::google::protobuf::uint8* RpcChunkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RpcMetaMsg.RpcChunkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stream_id = 1;
  if (this->stream_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream_id(), target);
  }

  // uint64 chunk_id = 2;
  if (this->chunk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chunk_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpcMetaMsg.RpcChunkInfo)
  return target;
}

size_t RpcChunkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RpcMetaMsg.RpcChunkInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 stream_id = 1;
  if (this->stream_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stream_id());
  }

  // uint64 chunk_id = 2;
  if (this->chunk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chunk_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcChunkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RpcMetaMsg.RpcChunkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcChunkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcChunkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RpcMetaMsg.RpcChunkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RpcMetaMsg.RpcChunkInfo)
    MergeFrom(*source);
  }
}

void RpcChunkInfo::MergeFrom(const RpcChunkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RpcMetaMsg.RpcChunkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stream_id() != 0) {
    set_stream_id(from.stream_id());
  }
  if (from.chunk_id() != 0) {
    set_chunk_id(from.chunk_id());
  }
}

void RpcChunkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RpcMetaMsg.RpcChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcChunkInfo::CopyFrom(const RpcChunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RpcMetaMsg.RpcChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcChunkInfo::IsInitialized() const {
  return true;
}

void RpcChunkInfo::Swap(RpcChunkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcChunkInfo::InternalSwap(RpcChunkInfo* other) {
  using std::swap;
  swap(stream_id_, other->stream_id_);
  swap(chunk_id_, other->chunk_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcChunkInfo::GetMetadata() const {
  protobuf_RpcMeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcMeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcChunkInfo

// uint64 stream_id = 1;
void RpcChunkInfo::clear_stream_id() {
  stream_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RpcChunkInfo::stream_id() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcChunkInfo.stream_id)
  return stream_id_;
}
void RpcChunkInfo::set_stream_id(::google::protobuf::uint64 value) {
  
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcChunkInfo.stream_id)
}

// uint64 chunk_id = 2;
void RpcChunkInfo::clear_chunk_id() {
  chunk_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RpcChunkInfo::chunk_id() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcChunkInfo.chunk_id)
  return chunk_id_;
}
void RpcChunkInfo::set_chunk_id(::google::protobuf::uint64 value) {
  
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcChunkInfo.chunk_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMeta::kRequestFieldNumber;
const int RpcMeta::kResponseFieldNumber;
const int RpcMeta::kCompressTypeFieldNumber;
const int RpcMeta::kCorrelationIdFieldNumber;
const int RpcMeta::kAttachmentSizeFieldNumber;
const int RpcMeta::kChuckInfoFieldNumber;
const int RpcMeta::kAuthenticationDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMeta::RpcMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RpcMeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpcMetaMsg.RpcMeta)
}
RpcMeta::RpcMeta(const RpcMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authentication_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.authentication_data().size() > 0) {
    authentication_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authentication_data_);
  }
  if (from.has_request()) {
    request_ = new ::RpcMetaMsg::RpcRequestMeta(*from.request_);
  } else {
    request_ = NULL;
  }
  if (from.has_response()) {
    response_ = new ::RpcMetaMsg::RpcResponseMeta(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_chuck_info()) {
    chuck_info_ = new ::RpcMetaMsg::RpcChunkInfo(*from.chuck_info_);
  } else {
    chuck_info_ = NULL;
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&attachment_size_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(attachment_size_));
  // @@protoc_insertion_point(copy_constructor:RpcMetaMsg.RpcMeta)
}

void RpcMeta::SharedCtor() {
  authentication_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attachment_size_) -
      reinterpret_cast<char*>(&request_)) + sizeof(attachment_size_));
  _cached_size_ = 0;
}

RpcMeta::~RpcMeta() {
  // @@protoc_insertion_point(destructor:RpcMetaMsg.RpcMeta)
  SharedDtor();
}

void RpcMeta::SharedDtor() {
  authentication_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
  if (this != internal_default_instance()) delete chuck_info_;
}

void RpcMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMeta::descriptor() {
  protobuf_RpcMeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcMeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcMeta& RpcMeta::default_instance() {
  protobuf_RpcMeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcMeta* RpcMeta::New(::google::protobuf::Arena* arena) const {
  RpcMeta* n = new RpcMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:RpcMetaMsg.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authentication_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  if (GetArenaNoVirtual() == NULL && chuck_info_ != NULL) {
    delete chuck_info_;
  }
  chuck_info_ = NULL;
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attachment_size_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(attachment_size_));
  _internal_metadata_.Clear();
}

bool RpcMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpcMetaMsg.RpcMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RpcMetaMsg.RpcRequestMeta request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RpcMetaMsg.RpcResponseMeta response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RpcMetaMsg.RpcMeta.CompressType compress_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compress_type(static_cast< ::RpcMetaMsg::RpcMeta_CompressType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 correlation_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 attachment_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attachment_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RpcMetaMsg.RpcChunkInfo chuck_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chuck_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes authentication_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_authentication_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpcMetaMsg.RpcMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpcMetaMsg.RpcMeta)
  return false;
#undef DO_
}

void RpcMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpcMetaMsg.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RpcMetaMsg.RpcRequestMeta request = 1;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // .RpcMetaMsg.RpcResponseMeta response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // .RpcMetaMsg.RpcMeta.CompressType compress_type = 3;
  if (this->compress_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->compress_type(), output);
  }

  // uint64 correlation_id = 4;
  if (this->correlation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->correlation_id(), output);
  }

  // uint32 attachment_size = 5;
  if (this->attachment_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attachment_size(), output);
  }

  // .RpcMetaMsg.RpcChunkInfo chuck_info = 6;
  if (this->has_chuck_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->chuck_info_, output);
  }

  // bytes authentication_data = 7;
  if (this->authentication_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->authentication_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RpcMetaMsg.RpcMeta)
}

::google::protobuf::uint8* RpcMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RpcMetaMsg.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RpcMetaMsg.RpcRequestMeta request = 1;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->request_, deterministic, target);
  }

  // .RpcMetaMsg.RpcResponseMeta response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, deterministic, target);
  }

  // .RpcMetaMsg.RpcMeta.CompressType compress_type = 3;
  if (this->compress_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->compress_type(), target);
  }

  // uint64 correlation_id = 4;
  if (this->correlation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->correlation_id(), target);
  }

  // uint32 attachment_size = 5;
  if (this->attachment_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attachment_size(), target);
  }

  // .RpcMetaMsg.RpcChunkInfo chuck_info = 6;
  if (this->has_chuck_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->chuck_info_, deterministic, target);
  }

  // bytes authentication_data = 7;
  if (this->authentication_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->authentication_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpcMetaMsg.RpcMeta)
  return target;
}

size_t RpcMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RpcMetaMsg.RpcMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes authentication_data = 7;
  if (this->authentication_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->authentication_data());
  }

  // .RpcMetaMsg.RpcRequestMeta request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  // .RpcMetaMsg.RpcResponseMeta response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .RpcMetaMsg.RpcChunkInfo chuck_info = 6;
  if (this->has_chuck_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chuck_info_);
  }

  // uint64 correlation_id = 4;
  if (this->correlation_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlation_id());
  }

  // .RpcMetaMsg.RpcMeta.CompressType compress_type = 3;
  if (this->compress_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compress_type());
  }

  // uint32 attachment_size = 5;
  if (this->attachment_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attachment_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RpcMetaMsg.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RpcMetaMsg.RpcMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RpcMetaMsg.RpcMeta)
    MergeFrom(*source);
  }
}

void RpcMeta::MergeFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RpcMetaMsg.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.authentication_data().size() > 0) {

    authentication_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authentication_data_);
  }
  if (from.has_request()) {
    mutable_request()->::RpcMetaMsg::RpcRequestMeta::MergeFrom(from.request());
  }
  if (from.has_response()) {
    mutable_response()->::RpcMetaMsg::RpcResponseMeta::MergeFrom(from.response());
  }
  if (from.has_chuck_info()) {
    mutable_chuck_info()->::RpcMetaMsg::RpcChunkInfo::MergeFrom(from.chuck_info());
  }
  if (from.correlation_id() != 0) {
    set_correlation_id(from.correlation_id());
  }
  if (from.compress_type() != 0) {
    set_compress_type(from.compress_type());
  }
  if (from.attachment_size() != 0) {
    set_attachment_size(from.attachment_size());
  }
}

void RpcMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RpcMetaMsg.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RpcMetaMsg.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {
  return true;
}

void RpcMeta::Swap(RpcMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMeta::InternalSwap(RpcMeta* other) {
  using std::swap;
  authentication_data_.Swap(&other->authentication_data_);
  swap(request_, other->request_);
  swap(response_, other->response_);
  swap(chuck_info_, other->chuck_info_);
  swap(correlation_id_, other->correlation_id_);
  swap(compress_type_, other->compress_type_);
  swap(attachment_size_, other->attachment_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcMeta::GetMetadata() const {
  protobuf_RpcMeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RpcMeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcMeta

// .RpcMetaMsg.RpcRequestMeta request = 1;
bool RpcMeta::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
void RpcMeta::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::RpcMetaMsg::RpcRequestMeta& RpcMeta::request() const {
  const ::RpcMetaMsg::RpcRequestMeta* p = request_;
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.request)
  return p != NULL ? *p : *reinterpret_cast<const ::RpcMetaMsg::RpcRequestMeta*>(
      &::RpcMetaMsg::_RpcRequestMeta_default_instance_);
}
::RpcMetaMsg::RpcRequestMeta* RpcMeta::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::RpcMetaMsg::RpcRequestMeta;
  }
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcMeta.request)
  return request_;
}
::RpcMetaMsg::RpcRequestMeta* RpcMeta::release_request() {
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcMeta.request)
  
  ::RpcMetaMsg::RpcRequestMeta* temp = request_;
  request_ = NULL;
  return temp;
}
void RpcMeta::set_allocated_request(::RpcMetaMsg::RpcRequestMeta* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcMeta.request)
}

// .RpcMetaMsg.RpcResponseMeta response = 2;
bool RpcMeta::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void RpcMeta::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::RpcMetaMsg::RpcResponseMeta& RpcMeta::response() const {
  const ::RpcMetaMsg::RpcResponseMeta* p = response_;
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.response)
  return p != NULL ? *p : *reinterpret_cast<const ::RpcMetaMsg::RpcResponseMeta*>(
      &::RpcMetaMsg::_RpcResponseMeta_default_instance_);
}
::RpcMetaMsg::RpcResponseMeta* RpcMeta::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::RpcMetaMsg::RpcResponseMeta;
  }
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcMeta.response)
  return response_;
}
::RpcMetaMsg::RpcResponseMeta* RpcMeta::release_response() {
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcMeta.response)
  
  ::RpcMetaMsg::RpcResponseMeta* temp = response_;
  response_ = NULL;
  return temp;
}
void RpcMeta::set_allocated_response(::RpcMetaMsg::RpcResponseMeta* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcMeta.response)
}

// .RpcMetaMsg.RpcMeta.CompressType compress_type = 3;
void RpcMeta::clear_compress_type() {
  compress_type_ = 0;
}
::RpcMetaMsg::RpcMeta_CompressType RpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.compress_type)
  return static_cast< ::RpcMetaMsg::RpcMeta_CompressType >(compress_type_);
}
void RpcMeta::set_compress_type(::RpcMetaMsg::RpcMeta_CompressType value) {
  
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcMeta.compress_type)
}

// uint64 correlation_id = 4;
void RpcMeta::clear_correlation_id() {
  correlation_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RpcMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.correlation_id)
  return correlation_id_;
}
void RpcMeta::set_correlation_id(::google::protobuf::uint64 value) {
  
  correlation_id_ = value;
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcMeta.correlation_id)
}

// uint32 attachment_size = 5;
void RpcMeta::clear_attachment_size() {
  attachment_size_ = 0u;
}
::google::protobuf::uint32 RpcMeta::attachment_size() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.attachment_size)
  return attachment_size_;
}
void RpcMeta::set_attachment_size(::google::protobuf::uint32 value) {
  
  attachment_size_ = value;
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcMeta.attachment_size)
}

// .RpcMetaMsg.RpcChunkInfo chuck_info = 6;
bool RpcMeta::has_chuck_info() const {
  return this != internal_default_instance() && chuck_info_ != NULL;
}
void RpcMeta::clear_chuck_info() {
  if (GetArenaNoVirtual() == NULL && chuck_info_ != NULL) delete chuck_info_;
  chuck_info_ = NULL;
}
const ::RpcMetaMsg::RpcChunkInfo& RpcMeta::chuck_info() const {
  const ::RpcMetaMsg::RpcChunkInfo* p = chuck_info_;
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.chuck_info)
  return p != NULL ? *p : *reinterpret_cast<const ::RpcMetaMsg::RpcChunkInfo*>(
      &::RpcMetaMsg::_RpcChunkInfo_default_instance_);
}
::RpcMetaMsg::RpcChunkInfo* RpcMeta::mutable_chuck_info() {
  
  if (chuck_info_ == NULL) {
    chuck_info_ = new ::RpcMetaMsg::RpcChunkInfo;
  }
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcMeta.chuck_info)
  return chuck_info_;
}
::RpcMetaMsg::RpcChunkInfo* RpcMeta::release_chuck_info() {
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcMeta.chuck_info)
  
  ::RpcMetaMsg::RpcChunkInfo* temp = chuck_info_;
  chuck_info_ = NULL;
  return temp;
}
void RpcMeta::set_allocated_chuck_info(::RpcMetaMsg::RpcChunkInfo* chuck_info) {
  delete chuck_info_;
  chuck_info_ = chuck_info;
  if (chuck_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcMeta.chuck_info)
}

// bytes authentication_data = 7;
void RpcMeta::clear_authentication_data() {
  authentication_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RpcMeta::authentication_data() const {
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.authentication_data)
  return authentication_data_.GetNoArena();
}
void RpcMeta::set_authentication_data(const ::std::string& value) {
  
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcMeta.authentication_data)
}
#if LANG_CXX11
void RpcMeta::set_authentication_data(::std::string&& value) {
  
  authentication_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RpcMetaMsg.RpcMeta.authentication_data)
}
#endif
void RpcMeta::set_authentication_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RpcMetaMsg.RpcMeta.authentication_data)
}
void RpcMeta::set_authentication_data(const void* value, size_t size) {
  
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RpcMetaMsg.RpcMeta.authentication_data)
}
::std::string* RpcMeta::mutable_authentication_data() {
  
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcMeta.authentication_data)
  return authentication_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcMeta::release_authentication_data() {
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcMeta.authentication_data)
  
  return authentication_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcMeta::set_allocated_authentication_data(::std::string* authentication_data) {
  if (authentication_data != NULL) {
    
  } else {
    
  }
  authentication_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authentication_data);
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcMeta.authentication_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RpcMetaMsg

// @@protoc_insertion_point(global_scope)
