// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EncOptvsCtl.proto

#ifndef PROTOBUF_EncOptvsCtl_2eproto__INCLUDED
#define PROTOBUF_EncOptvsCtl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace com {
namespace cloudscreen {
namespace efsmoudle {
class CTLRequestEncOpt;
class CTLRequestEncOptDefaultTypeInternal;
extern CTLRequestEncOptDefaultTypeInternal _CTLRequestEncOpt_default_instance_;
class MultiPart;
class MultiPartDefaultTypeInternal;
extern MultiPartDefaultTypeInternal _MultiPart_default_instance_;
class ResponseEncPara;
class ResponseEncParaDefaultTypeInternal;
extern ResponseEncParaDefaultTypeInternal _ResponseEncPara_default_instance_;
}  // namespace efsmoudle
}  // namespace cloudscreen
}  // namespace com

namespace com {
namespace cloudscreen {
namespace efsmoudle {

namespace protobuf_EncOptvsCtl_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_EncOptvsCtl_2eproto

// ===================================================================

class MultiPart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.cloudscreen.efsmoudle.MultiPart) */ {
 public:
  MultiPart();
  virtual ~MultiPart();

  MultiPart(const MultiPart& from);

  inline MultiPart& operator=(const MultiPart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultiPart(MultiPart&& from) noexcept
    : MultiPart() {
    *this = ::std::move(from);
  }

  inline MultiPart& operator=(MultiPart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiPart& default_instance();

  static inline const MultiPart* internal_default_instance() {
    return reinterpret_cast<const MultiPart*>(
               &_MultiPart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MultiPart* other);
  friend void swap(MultiPart& a, MultiPart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiPart* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiPart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiPart& from);
  void MergeFrom(const MultiPart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiPart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cs_key = 1;
  void clear_cs_key();
  static const int kCsKeyFieldNumber = 1;
  const ::std::string& cs_key() const;
  void set_cs_key(const ::std::string& value);
  #if LANG_CXX11
  void set_cs_key(::std::string&& value);
  #endif
  void set_cs_key(const char* value);
  void set_cs_key(const char* value, size_t size);
  ::std::string* mutable_cs_key();
  ::std::string* release_cs_key();
  void set_allocated_cs_key(::std::string* cs_key);

  // uint64 enc_method = 3;
  void clear_enc_method();
  static const int kEncMethodFieldNumber = 3;
  ::google::protobuf::uint64 enc_method() const;
  void set_enc_method(::google::protobuf::uint64 value);

  // bool is_file = 2;
  void clear_is_file();
  static const int kIsFileFieldNumber = 2;
  bool is_file() const;
  void set_is_file(bool value);

  // @@protoc_insertion_point(class_scope:com.cloudscreen.efsmoudle.MultiPart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cs_key_;
  ::google::protobuf::uint64 enc_method_;
  bool is_file_;
  mutable int _cached_size_;
  friend struct protobuf_EncOptvsCtl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CTLRequestEncOpt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.cloudscreen.efsmoudle.CTLRequestEncOpt) */ {
 public:
  CTLRequestEncOpt();
  virtual ~CTLRequestEncOpt();

  CTLRequestEncOpt(const CTLRequestEncOpt& from);

  inline CTLRequestEncOpt& operator=(const CTLRequestEncOpt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CTLRequestEncOpt(CTLRequestEncOpt&& from) noexcept
    : CTLRequestEncOpt() {
    *this = ::std::move(from);
  }

  inline CTLRequestEncOpt& operator=(CTLRequestEncOpt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CTLRequestEncOpt& default_instance();

  static inline const CTLRequestEncOpt* internal_default_instance() {
    return reinterpret_cast<const CTLRequestEncOpt*>(
               &_CTLRequestEncOpt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CTLRequestEncOpt* other);
  friend void swap(CTLRequestEncOpt& a, CTLRequestEncOpt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CTLRequestEncOpt* New() const PROTOBUF_FINAL { return New(NULL); }

  CTLRequestEncOpt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CTLRequestEncOpt& from);
  void MergeFrom(const CTLRequestEncOpt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CTLRequestEncOpt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cloudscreen.efsmoudle.MultiPart multipart = 10;
  int multipart_size() const;
  void clear_multipart();
  static const int kMultipartFieldNumber = 10;
  const ::com::cloudscreen::efsmoudle::MultiPart& multipart(int index) const;
  ::com::cloudscreen::efsmoudle::MultiPart* mutable_multipart(int index);
  ::com::cloudscreen::efsmoudle::MultiPart* add_multipart();
  ::google::protobuf::RepeatedPtrField< ::com::cloudscreen::efsmoudle::MultiPart >*
      mutable_multipart();
  const ::google::protobuf::RepeatedPtrField< ::com::cloudscreen::efsmoudle::MultiPart >&
      multipart() const;

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string traffic_id = 4;
  void clear_traffic_id();
  static const int kTrafficIdFieldNumber = 4;
  const ::std::string& traffic_id() const;
  void set_traffic_id(const ::std::string& value);
  #if LANG_CXX11
  void set_traffic_id(::std::string&& value);
  #endif
  void set_traffic_id(const char* value);
  void set_traffic_id(const char* value, size_t size);
  ::std::string* mutable_traffic_id();
  ::std::string* release_traffic_id();
  void set_allocated_traffic_id(::std::string* traffic_id);

  // string enc_enterprise_pwd = 5;
  void clear_enc_enterprise_pwd();
  static const int kEncEnterprisePwdFieldNumber = 5;
  const ::std::string& enc_enterprise_pwd() const;
  void set_enc_enterprise_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_enc_enterprise_pwd(::std::string&& value);
  #endif
  void set_enc_enterprise_pwd(const char* value);
  void set_enc_enterprise_pwd(const char* value, size_t size);
  ::std::string* mutable_enc_enterprise_pwd();
  ::std::string* release_enc_enterprise_pwd();
  void set_allocated_enc_enterprise_pwd(::std::string* enc_enterprise_pwd);

  // string enc_enterprise_cipherkey = 6;
  void clear_enc_enterprise_cipherkey();
  static const int kEncEnterpriseCipherkeyFieldNumber = 6;
  const ::std::string& enc_enterprise_cipherkey() const;
  void set_enc_enterprise_cipherkey(const ::std::string& value);
  #if LANG_CXX11
  void set_enc_enterprise_cipherkey(::std::string&& value);
  #endif
  void set_enc_enterprise_cipherkey(const char* value);
  void set_enc_enterprise_cipherkey(const char* value, size_t size);
  ::std::string* mutable_enc_enterprise_cipherkey();
  ::std::string* release_enc_enterprise_cipherkey();
  void set_allocated_enc_enterprise_cipherkey(::std::string* enc_enterprise_cipherkey);

  // string enc_enterprice_test = 7;
  void clear_enc_enterprice_test();
  static const int kEncEnterpriceTestFieldNumber = 7;
  const ::std::string& enc_enterprice_test() const;
  void set_enc_enterprice_test(const ::std::string& value);
  #if LANG_CXX11
  void set_enc_enterprice_test(::std::string&& value);
  #endif
  void set_enc_enterprice_test(const char* value);
  void set_enc_enterprice_test(const char* value, size_t size);
  ::std::string* mutable_enc_enterprice_test();
  ::std::string* release_enc_enterprice_test();
  void set_allocated_enc_enterprice_test(::std::string* enc_enterprice_test);

  // string csp_product_name = 14;
  void clear_csp_product_name();
  static const int kCspProductNameFieldNumber = 14;
  const ::std::string& csp_product_name() const;
  void set_csp_product_name(const ::std::string& value);
  #if LANG_CXX11
  void set_csp_product_name(::std::string&& value);
  #endif
  void set_csp_product_name(const char* value);
  void set_csp_product_name(const char* value, size_t size);
  ::std::string* mutable_csp_product_name();
  ::std::string* release_csp_product_name();
  void set_allocated_csp_product_name(::std::string* csp_product_name);

  // uint64 activity_id = 2;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 2;
  ::google::protobuf::uint64 activity_id() const;
  void set_activity_id(::google::protobuf::uint64 value);

  // uint32 msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint32 msg_id() const;
  void set_msg_id(::google::protobuf::uint32 value);

  // uint32 enc_or_dec = 8;
  void clear_enc_or_dec();
  static const int kEncOrDecFieldNumber = 8;
  ::google::protobuf::uint32 enc_or_dec() const;
  void set_enc_or_dec(::google::protobuf::uint32 value);

  // uint64 product_id = 11;
  void clear_product_id();
  static const int kProductIdFieldNumber = 11;
  ::google::protobuf::uint64 product_id() const;
  void set_product_id(::google::protobuf::uint64 value);

  // uint64 enterprise_id = 12;
  void clear_enterprise_id();
  static const int kEnterpriseIdFieldNumber = 12;
  ::google::protobuf::uint64 enterprise_id() const;
  void set_enterprise_id(::google::protobuf::uint64 value);

  // uint64 user_id = 13;
  void clear_user_id();
  static const int kUserIdFieldNumber = 13;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::cloudscreen::efsmoudle::MultiPart > multipart_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr traffic_id_;
  ::google::protobuf::internal::ArenaStringPtr enc_enterprise_pwd_;
  ::google::protobuf::internal::ArenaStringPtr enc_enterprise_cipherkey_;
  ::google::protobuf::internal::ArenaStringPtr enc_enterprice_test_;
  ::google::protobuf::internal::ArenaStringPtr csp_product_name_;
  ::google::protobuf::uint64 activity_id_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint32 enc_or_dec_;
  ::google::protobuf::uint64 product_id_;
  ::google::protobuf::uint64 enterprise_id_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_EncOptvsCtl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseEncPara : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.cloudscreen.efsmoudle.ResponseEncPara) */ {
 public:
  ResponseEncPara();
  virtual ~ResponseEncPara();

  ResponseEncPara(const ResponseEncPara& from);

  inline ResponseEncPara& operator=(const ResponseEncPara& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseEncPara(ResponseEncPara&& from) noexcept
    : ResponseEncPara() {
    *this = ::std::move(from);
  }

  inline ResponseEncPara& operator=(ResponseEncPara&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseEncPara& default_instance();

  static inline const ResponseEncPara* internal_default_instance() {
    return reinterpret_cast<const ResponseEncPara*>(
               &_ResponseEncPara_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ResponseEncPara* other);
  friend void swap(ResponseEncPara& a, ResponseEncPara& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseEncPara* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseEncPara* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseEncPara& from);
  void MergeFrom(const ResponseEncPara& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseEncPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 3;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string traffic_id = 4;
  void clear_traffic_id();
  static const int kTrafficIdFieldNumber = 4;
  const ::std::string& traffic_id() const;
  void set_traffic_id(const ::std::string& value);
  #if LANG_CXX11
  void set_traffic_id(::std::string&& value);
  #endif
  void set_traffic_id(const char* value);
  void set_traffic_id(const char* value, size_t size);
  ::std::string* mutable_traffic_id();
  ::std::string* release_traffic_id();
  void set_allocated_traffic_id(::std::string* traffic_id);

  // string http_header = 8;
  void clear_http_header();
  static const int kHttpHeaderFieldNumber = 8;
  const ::std::string& http_header() const;
  void set_http_header(const ::std::string& value);
  #if LANG_CXX11
  void set_http_header(::std::string&& value);
  #endif
  void set_http_header(const char* value);
  void set_http_header(const char* value, size_t size);
  ::std::string* mutable_http_header();
  ::std::string* release_http_header();
  void set_allocated_http_header(::std::string* http_header);

  // uint64 activity_id = 2;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 2;
  ::google::protobuf::uint64 activity_id() const;
  void set_activity_id(::google::protobuf::uint64 value);

  // uint32 msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint32 msg_id() const;
  void set_msg_id(::google::protobuf::uint32 value);

  // uint32 opt_file_num = 5;
  void clear_opt_file_num();
  static const int kOptFileNumFieldNumber = 5;
  ::google::protobuf::uint32 opt_file_num() const;
  void set_opt_file_num(::google::protobuf::uint32 value);

  // uint32 succeed_file_num = 6;
  void clear_succeed_file_num();
  static const int kSucceedFileNumFieldNumber = 6;
  ::google::protobuf::uint32 succeed_file_num() const;
  void set_succeed_file_num(::google::protobuf::uint32 value);

  // uint32 is_succeed = 7;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 7;
  ::google::protobuf::uint32 is_succeed() const;
  void set_is_succeed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cloudscreen.efsmoudle.ResponseEncPara)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr traffic_id_;
  ::google::protobuf::internal::ArenaStringPtr http_header_;
  ::google::protobuf::uint64 activity_id_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint32 opt_file_num_;
  ::google::protobuf::uint32 succeed_file_num_;
  ::google::protobuf::uint32 is_succeed_;
  mutable int _cached_size_;
  friend struct protobuf_EncOptvsCtl_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MultiPart

// string cs_key = 1;
inline void MultiPart::clear_cs_key() {
  cs_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiPart::cs_key() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.MultiPart.cs_key)
  return cs_key_.GetNoArena();
}
inline void MultiPart::set_cs_key(const ::std::string& value) {
  
  cs_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}
#if LANG_CXX11
inline void MultiPart::set_cs_key(::std::string&& value) {
  
  cs_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}
#endif
inline void MultiPart::set_cs_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cs_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}
inline void MultiPart::set_cs_key(const char* value, size_t size) {
  
  cs_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}
inline ::std::string* MultiPart::mutable_cs_key() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.MultiPart.cs_key)
  return cs_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiPart::release_cs_key() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.MultiPart.cs_key)
  
  return cs_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiPart::set_allocated_cs_key(::std::string* cs_key) {
  if (cs_key != NULL) {
    
  } else {
    
  }
  cs_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cs_key);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}

// bool is_file = 2;
inline void MultiPart::clear_is_file() {
  is_file_ = false;
}
inline bool MultiPart::is_file() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.MultiPart.is_file)
  return is_file_;
}
inline void MultiPart::set_is_file(bool value) {
  
  is_file_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.MultiPart.is_file)
}

// uint64 enc_method = 3;
inline void MultiPart::clear_enc_method() {
  enc_method_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MultiPart::enc_method() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.MultiPart.enc_method)
  return enc_method_;
}
inline void MultiPart::set_enc_method(::google::protobuf::uint64 value) {
  
  enc_method_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.MultiPart.enc_method)
}

// -------------------------------------------------------------------

// CTLRequestEncOpt

// uint32 msg_id = 1;
inline void CTLRequestEncOpt::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::google::protobuf::uint32 CTLRequestEncOpt::msg_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.msg_id)
  return msg_id_;
}
inline void CTLRequestEncOpt::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.msg_id)
}

// uint64 activity_id = 2;
inline void CTLRequestEncOpt::clear_activity_id() {
  activity_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CTLRequestEncOpt::activity_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.activity_id)
  return activity_id_;
}
inline void CTLRequestEncOpt::set_activity_id(::google::protobuf::uint64 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.activity_id)
}

// string session_id = 3;
inline void CTLRequestEncOpt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CTLRequestEncOpt::session_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
  return session_id_.GetNoArena();
}
inline void CTLRequestEncOpt::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}
#if LANG_CXX11
inline void CTLRequestEncOpt::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}
#endif
inline void CTLRequestEncOpt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}
inline void CTLRequestEncOpt::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}
inline ::std::string* CTLRequestEncOpt::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CTLRequestEncOpt::release_session_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CTLRequestEncOpt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}

// string traffic_id = 4;
inline void CTLRequestEncOpt::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CTLRequestEncOpt::traffic_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
  return traffic_id_.GetNoArena();
}
inline void CTLRequestEncOpt::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}
#if LANG_CXX11
inline void CTLRequestEncOpt::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}
#endif
inline void CTLRequestEncOpt::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}
inline void CTLRequestEncOpt::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}
inline ::std::string* CTLRequestEncOpt::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CTLRequestEncOpt::release_traffic_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CTLRequestEncOpt::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}

// string enc_enterprise_pwd = 5;
inline void CTLRequestEncOpt::clear_enc_enterprise_pwd() {
  enc_enterprise_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CTLRequestEncOpt::enc_enterprise_pwd() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
  return enc_enterprise_pwd_.GetNoArena();
}
inline void CTLRequestEncOpt::set_enc_enterprise_pwd(const ::std::string& value) {
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}
#if LANG_CXX11
inline void CTLRequestEncOpt::set_enc_enterprise_pwd(::std::string&& value) {
  
  enc_enterprise_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}
#endif
inline void CTLRequestEncOpt::set_enc_enterprise_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}
inline void CTLRequestEncOpt::set_enc_enterprise_pwd(const char* value, size_t size) {
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}
inline ::std::string* CTLRequestEncOpt::mutable_enc_enterprise_pwd() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
  return enc_enterprise_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CTLRequestEncOpt::release_enc_enterprise_pwd() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
  
  return enc_enterprise_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CTLRequestEncOpt::set_allocated_enc_enterprise_pwd(::std::string* enc_enterprise_pwd) {
  if (enc_enterprise_pwd != NULL) {
    
  } else {
    
  }
  enc_enterprise_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprise_pwd);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}

// string enc_enterprise_cipherkey = 6;
inline void CTLRequestEncOpt::clear_enc_enterprise_cipherkey() {
  enc_enterprise_cipherkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CTLRequestEncOpt::enc_enterprise_cipherkey() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
  return enc_enterprise_cipherkey_.GetNoArena();
}
inline void CTLRequestEncOpt::set_enc_enterprise_cipherkey(const ::std::string& value) {
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}
#if LANG_CXX11
inline void CTLRequestEncOpt::set_enc_enterprise_cipherkey(::std::string&& value) {
  
  enc_enterprise_cipherkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}
#endif
inline void CTLRequestEncOpt::set_enc_enterprise_cipherkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}
inline void CTLRequestEncOpt::set_enc_enterprise_cipherkey(const char* value, size_t size) {
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}
inline ::std::string* CTLRequestEncOpt::mutable_enc_enterprise_cipherkey() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
  return enc_enterprise_cipherkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CTLRequestEncOpt::release_enc_enterprise_cipherkey() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
  
  return enc_enterprise_cipherkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CTLRequestEncOpt::set_allocated_enc_enterprise_cipherkey(::std::string* enc_enterprise_cipherkey) {
  if (enc_enterprise_cipherkey != NULL) {
    
  } else {
    
  }
  enc_enterprise_cipherkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprise_cipherkey);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}

// string enc_enterprice_test = 7;
inline void CTLRequestEncOpt::clear_enc_enterprice_test() {
  enc_enterprice_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CTLRequestEncOpt::enc_enterprice_test() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
  return enc_enterprice_test_.GetNoArena();
}
inline void CTLRequestEncOpt::set_enc_enterprice_test(const ::std::string& value) {
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}
#if LANG_CXX11
inline void CTLRequestEncOpt::set_enc_enterprice_test(::std::string&& value) {
  
  enc_enterprice_test_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}
#endif
inline void CTLRequestEncOpt::set_enc_enterprice_test(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}
inline void CTLRequestEncOpt::set_enc_enterprice_test(const char* value, size_t size) {
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}
inline ::std::string* CTLRequestEncOpt::mutable_enc_enterprice_test() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
  return enc_enterprice_test_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CTLRequestEncOpt::release_enc_enterprice_test() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
  
  return enc_enterprice_test_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CTLRequestEncOpt::set_allocated_enc_enterprice_test(::std::string* enc_enterprice_test) {
  if (enc_enterprice_test != NULL) {
    
  } else {
    
  }
  enc_enterprice_test_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprice_test);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}

// uint32 enc_or_dec = 8;
inline void CTLRequestEncOpt::clear_enc_or_dec() {
  enc_or_dec_ = 0u;
}
inline ::google::protobuf::uint32 CTLRequestEncOpt::enc_or_dec() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_or_dec)
  return enc_or_dec_;
}
inline void CTLRequestEncOpt::set_enc_or_dec(::google::protobuf::uint32 value) {
  
  enc_or_dec_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_or_dec)
}

// repeated .com.cloudscreen.efsmoudle.MultiPart multipart = 10;
inline int CTLRequestEncOpt::multipart_size() const {
  return multipart_.size();
}
inline void CTLRequestEncOpt::clear_multipart() {
  multipart_.Clear();
}
inline const ::com::cloudscreen::efsmoudle::MultiPart& CTLRequestEncOpt::multipart(int index) const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return multipart_.Get(index);
}
inline ::com::cloudscreen::efsmoudle::MultiPart* CTLRequestEncOpt::mutable_multipart(int index) {
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return multipart_.Mutable(index);
}
inline ::com::cloudscreen::efsmoudle::MultiPart* CTLRequestEncOpt::add_multipart() {
  // @@protoc_insertion_point(field_add:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return multipart_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::cloudscreen::efsmoudle::MultiPart >*
CTLRequestEncOpt::mutable_multipart() {
  // @@protoc_insertion_point(field_mutable_list:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return &multipart_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cloudscreen::efsmoudle::MultiPart >&
CTLRequestEncOpt::multipart() const {
  // @@protoc_insertion_point(field_list:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return multipart_;
}

// uint64 product_id = 11;
inline void CTLRequestEncOpt::clear_product_id() {
  product_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CTLRequestEncOpt::product_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.product_id)
  return product_id_;
}
inline void CTLRequestEncOpt::set_product_id(::google::protobuf::uint64 value) {
  
  product_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.product_id)
}

// uint64 enterprise_id = 12;
inline void CTLRequestEncOpt::clear_enterprise_id() {
  enterprise_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CTLRequestEncOpt::enterprise_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enterprise_id)
  return enterprise_id_;
}
inline void CTLRequestEncOpt::set_enterprise_id(::google::protobuf::uint64 value) {
  
  enterprise_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enterprise_id)
}

// uint64 user_id = 13;
inline void CTLRequestEncOpt::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CTLRequestEncOpt::user_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.user_id)
  return user_id_;
}
inline void CTLRequestEncOpt::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.user_id)
}

// string csp_product_name = 14;
inline void CTLRequestEncOpt::clear_csp_product_name() {
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CTLRequestEncOpt::csp_product_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
  return csp_product_name_.GetNoArena();
}
inline void CTLRequestEncOpt::set_csp_product_name(const ::std::string& value) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}
#if LANG_CXX11
inline void CTLRequestEncOpt::set_csp_product_name(::std::string&& value) {
  
  csp_product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}
#endif
inline void CTLRequestEncOpt::set_csp_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}
inline void CTLRequestEncOpt::set_csp_product_name(const char* value, size_t size) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}
inline ::std::string* CTLRequestEncOpt::mutable_csp_product_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CTLRequestEncOpt::release_csp_product_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
  
  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CTLRequestEncOpt::set_allocated_csp_product_name(::std::string* csp_product_name) {
  if (csp_product_name != NULL) {
    
  } else {
    
  }
  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}

// -------------------------------------------------------------------

// ResponseEncPara

// uint32 msg_id = 1;
inline void ResponseEncPara::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::google::protobuf::uint32 ResponseEncPara::msg_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.msg_id)
  return msg_id_;
}
inline void ResponseEncPara::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.msg_id)
}

// uint64 activity_id = 2;
inline void ResponseEncPara::clear_activity_id() {
  activity_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResponseEncPara::activity_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.activity_id)
  return activity_id_;
}
inline void ResponseEncPara::set_activity_id(::google::protobuf::uint64 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.activity_id)
}

// string session_id = 3;
inline void ResponseEncPara::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseEncPara::session_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
  return session_id_.GetNoArena();
}
inline void ResponseEncPara::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}
#if LANG_CXX11
inline void ResponseEncPara::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}
#endif
inline void ResponseEncPara::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}
inline void ResponseEncPara::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}
inline ::std::string* ResponseEncPara::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseEncPara::release_session_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseEncPara::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}

// string traffic_id = 4;
inline void ResponseEncPara::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseEncPara::traffic_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
  return traffic_id_.GetNoArena();
}
inline void ResponseEncPara::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}
#if LANG_CXX11
inline void ResponseEncPara::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}
#endif
inline void ResponseEncPara::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}
inline void ResponseEncPara::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}
inline ::std::string* ResponseEncPara::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseEncPara::release_traffic_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseEncPara::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}

// uint32 opt_file_num = 5;
inline void ResponseEncPara::clear_opt_file_num() {
  opt_file_num_ = 0u;
}
inline ::google::protobuf::uint32 ResponseEncPara::opt_file_num() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.opt_file_num)
  return opt_file_num_;
}
inline void ResponseEncPara::set_opt_file_num(::google::protobuf::uint32 value) {
  
  opt_file_num_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.opt_file_num)
}

// uint32 succeed_file_num = 6;
inline void ResponseEncPara::clear_succeed_file_num() {
  succeed_file_num_ = 0u;
}
inline ::google::protobuf::uint32 ResponseEncPara::succeed_file_num() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.succeed_file_num)
  return succeed_file_num_;
}
inline void ResponseEncPara::set_succeed_file_num(::google::protobuf::uint32 value) {
  
  succeed_file_num_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.succeed_file_num)
}

// uint32 is_succeed = 7;
inline void ResponseEncPara::clear_is_succeed() {
  is_succeed_ = 0u;
}
inline ::google::protobuf::uint32 ResponseEncPara::is_succeed() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.is_succeed)
  return is_succeed_;
}
inline void ResponseEncPara::set_is_succeed(::google::protobuf::uint32 value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.is_succeed)
}

// string http_header = 8;
inline void ResponseEncPara::clear_http_header() {
  http_header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseEncPara::http_header() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
  return http_header_.GetNoArena();
}
inline void ResponseEncPara::set_http_header(const ::std::string& value) {
  
  http_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}
#if LANG_CXX11
inline void ResponseEncPara::set_http_header(::std::string&& value) {
  
  http_header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}
#endif
inline void ResponseEncPara::set_http_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  http_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}
inline void ResponseEncPara::set_http_header(const char* value, size_t size) {
  
  http_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}
inline ::std::string* ResponseEncPara::mutable_http_header() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
  return http_header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseEncPara::release_http_header() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
  
  return http_header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseEncPara::set_allocated_http_header(::std::string* http_header) {
  if (http_header != NULL) {
    
  } else {
    
  }
  http_header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_header);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace efsmoudle
}  // namespace cloudscreen
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EncOptvsCtl_2eproto__INCLUDED
