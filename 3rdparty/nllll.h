     1	// Generated by the protocol buffer compiler.  DO NOT EDIT!
     3	// source: encryptServiceLog.proto
       
     5	#ifndef PROTOBUF_encryptServiceLog_2eproto__INCLUDED
     7	#define PROTOBUF_encryptServiceLog_2eproto__INCLUDED
       
     9	#include <string>
       
    11	#include <google/protobuf/stubs/common.h>
       
    13	#if GOOGLE_PROTOBUF_VERSION < 3004000
    15	#error This file was generated by a newer version of protoc which is
    17	#error incompatible with your Protocol Buffer headers.  Please update
    19	#error your headers.
    21	#endif
    23	#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
    25	#error This file was generated by an older version of protoc which is
    27	#error incompatible with your Protocol Buffer headers.  Please
    29	#error regenerate this file with a newer version of protoc.
    31	#endif
       
    33	#include <google/protobuf/io/coded_stream.h>
    35	#include <google/protobuf/arena.h>
    37	#include <google/protobuf/arenastring.h>
    39	#include <google/protobuf/generated_message_table_driven.h>
    41	#include <google/protobuf/generated_message_util.h>
    43	#include <google/protobuf/metadata.h>
    45	#include <google/protobuf/message.h>
    47	#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
    49	#include <google/protobuf/extension_set.h>  // IWYU pragma: export
    51	#include <google/protobuf/unknown_field_set.h>
    53	// @@protoc_insertion_point(includes)
    55	namespace com {
    57	namespace cloudscreen {
    59	namespace log {
    61	class EncryptServiceLog;
    63	class EncryptServiceLogDefaultTypeInternal;
    65	extern EncryptServiceLogDefaultTypeInternal _EncryptServiceLog_default_instance_;
    67	}  // namespace log
    69	}  // namespace cloudscreen
    71	}  // namespace com
       
    73	namespace com {
    75	namespace cloudscreen {
    77	namespace log {
       
    79	namespace protobuf_encryptServiceLog_2eproto {
    81	// Internal implementation detail -- do not call these.
    83	struct TableStruct {
    85	  static const ::google::protobuf::internal::ParseTableField entries[];
    87	  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    89	  static const ::google::protobuf::internal::ParseTable schema[];
    91	  static const ::google::protobuf::uint32 offsets[];
    93	  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
    95	  static const ::google::protobuf::internal::SerializationTable serialization_table[];
    97	  static void InitDefaultsImpl();
    99	};
   101	void AddDescriptors();
   103	void InitDefaults();
   105	}  // namespace protobuf_encryptServiceLog_2eproto
       
   107	// ===================================================================
       
   109	class EncryptServiceLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.cloudscreen.log.EncryptServiceLog) */ {
   111	 public:
   113	  EncryptServiceLog();
   115	  virtual ~EncryptServiceLog();
       
   117	  EncryptServiceLog(const EncryptServiceLog& from);
       
   119	  inline EncryptServiceLog& operator=(const EncryptServiceLog& from) {
   121	    CopyFrom(from);
   123	    return *this;
   125	  }
   127	  #if LANG_CXX11
   129	  EncryptServiceLog(EncryptServiceLog&& from) noexcept
   131	    : EncryptServiceLog() {
   133	    *this = ::std::move(from);
   135	  }
       
   137	  inline EncryptServiceLog& operator=(EncryptServiceLog&& from) noexcept {
   139	    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
   141	      if (this != &from) InternalSwap(&from);
   143	    } else {
   145	      CopyFrom(from);
   147	    }
   149	    return *this;
   151	  }
   153	  #endif
   155	  static const ::google::protobuf::Descriptor* descriptor();
   157	  static const EncryptServiceLog& default_instance();
       
   159	  static inline const EncryptServiceLog* internal_default_instance() {
   161	    return reinterpret_cast<const EncryptServiceLog*>(
   163	               &_EncryptServiceLog_default_instance_);
   165	  }
   167	  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
   169	    0;
       
   171	  void Swap(EncryptServiceLog* other);
   173	  friend void swap(EncryptServiceLog& a, EncryptServiceLog& b) {
   175	    a.Swap(&b);
   177	  }
       
   179	  // implements Message ----------------------------------------------
       
   181	  inline EncryptServiceLog* New() const PROTOBUF_FINAL { return New(NULL); }
       
   183	  EncryptServiceLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
   185	  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
   187	  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
   189	  void CopyFrom(const EncryptServiceLog& from);
   191	  void MergeFrom(const EncryptServiceLog& from);
   193	  void Clear() PROTOBUF_FINAL;
   195	  bool IsInitialized() const PROTOBUF_FINAL;
       
   197	  size_t ByteSizeLong() const PROTOBUF_FINAL;
   199	  bool MergePartialFromCodedStream(
   201	      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
   203	  void SerializeWithCachedSizes(
   205	      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
   207	  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
   209	      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
   211	  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
   213	  private:
   215	  void SharedCtor();
   217	  void SharedDtor();
   219	  void SetCachedSize(int size) const PROTOBUF_FINAL;
   221	  void InternalSwap(EncryptServiceLog* other);
   223	  private:
   225	  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
   227	    return NULL;
   229	  }
   231	  inline void* MaybeArenaPtr() const {
   233	    return NULL;
   235	  }
   237	  public:
       
   239	  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;
       
   241	  // nested types ----------------------------------------------------
       
   243	  // accessors -------------------------------------------------------
       
   245	  // string csp_product_name = 30;
   247	  void clear_csp_product_name();
   249	  static const int kCspProductNameFieldNumber = 30;
   251	  const ::std::string& csp_product_name() const;
   253	  void set_csp_product_name(const ::std::string& value);
   255	  #if LANG_CXX11
   257	  void set_csp_product_name(::std::string&& value);
   259	  #endif
   261	  void set_csp_product_name(const char* value);
   263	  void set_csp_product_name(const char* value, size_t size);
   265	  ::std::string* mutable_csp_product_name();
   267	  ::std::string* release_csp_product_name();
   269	  void set_allocated_csp_product_name(::std::string* csp_product_name);
       
   271	  // string session_id = 40;
   273	  void clear_session_id();
   275	  static const int kSessionIdFieldNumber = 40;
   277	  const ::std::string& session_id() const;
   279	  void set_session_id(const ::std::string& value);
   281	  #if LANG_CXX11
   283	  void set_session_id(::std::string&& value);
   285	  #endif
   287	  void set_session_id(const char* value);
   289	  void set_session_id(const char* value, size_t size);
   291	  ::std::string* mutable_session_id();
   293	  ::std::string* release_session_id();
   295	  void set_allocated_session_id(::std::string* session_id);
       
   297	  // string traffic_id = 50;
   299	  void clear_traffic_id();
   301	  static const int kTrafficIdFieldNumber = 50;
   303	  const ::std::string& traffic_id() const;
   305	  void set_traffic_id(const ::std::string& value);
   307	  #if LANG_CXX11
   309	  void set_traffic_id(::std::string&& value);
   311	  #endif
   313	  void set_traffic_id(const char* value);
   315	  void set_traffic_id(const char* value, size_t size);
   317	  ::std::string* mutable_traffic_id();
   319	  ::std::string* release_traffic_id();
   321	  void set_allocated_traffic_id(::std::string* traffic_id);
       
   323	  // string trigger_time = 80;
   325	  void clear_trigger_time();
   327	  static const int kTriggerTimeFieldNumber = 80;
   329	  const ::std::string& trigger_time() const;
   331	  void set_trigger_time(const ::std::string& value);
   333	  #if LANG_CXX11
   335	  void set_trigger_time(::std::string&& value);
   337	  #endif
   339	  void set_trigger_time(const char* value);
   341	  void set_trigger_time(const char* value, size_t size);
   343	  ::std::string* mutable_trigger_time();
   345	  ::std::string* release_trigger_time();
   347	  void set_allocated_trigger_time(::std::string* trigger_time);
       
   349	  // string trigger_reason = 90;
   351	  void clear_trigger_reason();
   353	  static const int kTriggerReasonFieldNumber = 90;
   355	  const ::std::string& trigger_reason() const;
   357	  void set_trigger_reason(const ::std::string& value);
   359	  #if LANG_CXX11
   361	  void set_trigger_reason(::std::string&& value);
   363	  #endif
   365	  void set_trigger_reason(const char* value);
   367	  void set_trigger_reason(const char* value, size_t size);
   369	  ::std::string* mutable_trigger_reason();
   371	  ::std::string* release_trigger_reason();
   373	  void set_allocated_trigger_reason(::std::string* trigger_reason);
       
   375	  // string file_name = 110;
   377	  void clear_file_name();
   379	  static const int kFileNameFieldNumber = 110;
   381	  const ::std::string& file_name() const;
   383	  void set_file_name(const ::std::string& value);
   385	  #if LANG_CXX11
   387	  void set_file_name(::std::string&& value);
   389	  #endif
   391	  void set_file_name(const char* value);
   393	  void set_file_name(const char* value, size_t size);
   395	  ::std::string* mutable_file_name();
   397	  ::std::string* release_file_name();
   399	  void set_allocated_file_name(::std::string* file_name);
       
   401	  // string comment = 130;
   403	  void clear_comment();
   405	  static const int kCommentFieldNumber = 130;
   407	  const ::std::string& comment() const;
   409	  void set_comment(const ::std::string& value);
   411	  #if LANG_CXX11
   413	  void set_comment(::std::string&& value);
   415	  #endif
   417	  void set_comment(const char* value);
   419	  void set_comment(const char* value, size_t size);
   421	  ::std::string* mutable_comment();
   423	  ::std::string* release_comment();
   425	  void set_allocated_comment(::std::string* comment);
       
   427	  // uint64 device_activity_id = 10;
   429	  void clear_device_activity_id();
   431	  static const int kDeviceActivityIdFieldNumber = 10;
   433	  ::google::protobuf::uint64 device_activity_id() const;
   435	  void set_device_activity_id(::google::protobuf::uint64 value);
       
   437	  // uint64 csp_product_id = 20;
   439	  void clear_csp_product_id();
   441	  static const int kCspProductIdFieldNumber = 20;
   443	  ::google::protobuf::uint64 csp_product_id() const;
   445	  void set_csp_product_id(::google::protobuf::uint64 value);
       
   447	  // uint64 enterprise_id = 60;
   449	  void clear_enterprise_id();
   451	  static const int kEnterpriseIdFieldNumber = 60;
   453	  ::google::protobuf::uint64 enterprise_id() const;
   455	  void set_enterprise_id(::google::protobuf::uint64 value);
       
   457	  // uint64 user_id = 70;
   459	  void clear_user_id();
   461	  static const int kUserIdFieldNumber = 70;
   463	  ::google::protobuf::uint64 user_id() const;
   465	  void set_user_id(::google::protobuf::uint64 value);
       
   467	  // uint32 is_succeed = 100;
   469	  void clear_is_succeed();
   471	  static const int kIsSucceedFieldNumber = 100;
   473	  ::google::protobuf::uint32 is_succeed() const;
   475	  void set_is_succeed(::google::protobuf::uint32 value);
       
   477	  // uint32 action_type = 120;
   479	  void clear_action_type();
   481	  static const int kActionTypeFieldNumber = 120;
   483	  ::google::protobuf::uint32 action_type() const;
   485	  void set_action_type(::google::protobuf::uint32 value);
       
   487	  // @@protoc_insertion_point(class_scope:com.cloudscreen.log.EncryptServiceLog)
   489	 private:
       
   491	  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
   493	  ::google::protobuf::internal::ArenaStringPtr csp_product_name_;
   495	  ::google::protobuf::internal::ArenaStringPtr session_id_;
   497	  ::google::protobuf::internal::ArenaStringPtr traffic_id_;
   499	  ::google::protobuf::internal::ArenaStringPtr trigger_time_;
   501	  ::google::protobuf::internal::ArenaStringPtr trigger_reason_;
   503	  ::google::protobuf::internal::ArenaStringPtr file_name_;
   505	  ::google::protobuf::internal::ArenaStringPtr comment_;
   507	  ::google::protobuf::uint64 device_activity_id_;
   509	  ::google::protobuf::uint64 csp_product_id_;
   511	  ::google::protobuf::uint64 enterprise_id_;
   513	  ::google::protobuf::uint64 user_id_;
   515	  ::google::protobuf::uint32 is_succeed_;
   517	  ::google::protobuf::uint32 action_type_;
   519	  mutable int _cached_size_;
   521	  friend struct protobuf_encryptServiceLog_2eproto::TableStruct;
   523	};
   525	// ===================================================================
       
       
   527	// ===================================================================
       
   529	#if !PROTOBUF_INLINE_NOT_IN_HEADERS
   531	#ifdef __GNUC__
   533	  #pragma GCC diagnostic push
   535	  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
   537	#endif  // __GNUC__
   539	// EncryptServiceLog
       
   541	// uint64 device_activity_id = 10;
   543	inline void EncryptServiceLog::clear_device_activity_id() {
   545	  device_activity_id_ = GOOGLE_ULONGLONG(0);
   547	}
   549	inline ::google::protobuf::uint64 EncryptServiceLog::device_activity_id() const {
   551	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
   553	  return device_activity_id_;
   555	}
   557	inline void EncryptServiceLog::set_device_activity_id(::google::protobuf::uint64 value) {
   559	  
   561	  device_activity_id_ = value;
   563	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
   565	}
       
   567	// uint64 csp_product_id = 20;
   569	inline void EncryptServiceLog::clear_csp_product_id() {
   571	  csp_product_id_ = GOOGLE_ULONGLONG(0);
   573	}
   575	inline ::google::protobuf::uint64 EncryptServiceLog::csp_product_id() const {
   577	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
   579	  return csp_product_id_;
   581	}
   583	inline void EncryptServiceLog::set_csp_product_id(::google::protobuf::uint64 value) {
   585	  
   587	  csp_product_id_ = value;
   589	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
   591	}
       
   593	// string csp_product_name = 30;
   595	inline void EncryptServiceLog::clear_csp_product_name() {
   597	  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   599	}
   601	inline const ::std::string& EncryptServiceLog::csp_product_name() const {
   603	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   605	  return csp_product_name_.GetNoArena();
   607	}
   609	inline void EncryptServiceLog::set_csp_product_name(const ::std::string& value) {
   611	  
   613	  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   615	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   617	}
   619	#if LANG_CXX11
   621	inline void EncryptServiceLog::set_csp_product_name(::std::string&& value) {
   623	  
   625	  csp_product_name_.SetNoArena(
   627	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   629	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   631	}
   633	#endif
   635	inline void EncryptServiceLog::set_csp_product_name(const char* value) {
   637	  GOOGLE_DCHECK(value != NULL);
   639	  
   641	  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   643	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   645	}
   647	inline void EncryptServiceLog::set_csp_product_name(const char* value, size_t size) {
   649	  
   651	  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   653	      ::std::string(reinterpret_cast<const char*>(value), size));
   655	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   657	}
   659	inline ::std::string* EncryptServiceLog::mutable_csp_product_name() {
   661	  
   663	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   665	  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   667	}
   669	inline ::std::string* EncryptServiceLog::release_csp_product_name() {
   671	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   673	  
   675	  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   677	}
   679	inline void EncryptServiceLog::set_allocated_csp_product_name(::std::string* csp_product_name) {
   681	  if (csp_product_name != NULL) {
   683	    
   685	  } else {
   687	    
   689	  }
   691	  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
   693	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   695	}
       
   697	// string session_id = 40;
   699	inline void EncryptServiceLog::clear_session_id() {
   701	  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   703	}
   705	inline const ::std::string& EncryptServiceLog::session_id() const {
   707	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.session_id)
   709	  return session_id_.GetNoArena();
   711	}
   713	inline void EncryptServiceLog::set_session_id(const ::std::string& value) {
   715	  
   717	  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   719	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.session_id)
   721	}
   723	#if LANG_CXX11
   725	inline void EncryptServiceLog::set_session_id(::std::string&& value) {
   727	  
   729	  session_id_.SetNoArena(
   731	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   733	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.session_id)
   735	}
   737	#endif
   739	inline void EncryptServiceLog::set_session_id(const char* value) {
   741	  GOOGLE_DCHECK(value != NULL);
   743	  
   745	  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   747	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.session_id)
   749	}
   751	inline void EncryptServiceLog::set_session_id(const char* value, size_t size) {
   753	  
   755	  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   757	      ::std::string(reinterpret_cast<const char*>(value), size));
   759	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.session_id)
   761	}
   763	inline ::std::string* EncryptServiceLog::mutable_session_id() {
   765	  
   767	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.session_id)
   769	  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   771	}
   773	inline ::std::string* EncryptServiceLog::release_session_id() {
   775	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.session_id)
   777	  
   779	  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   781	}
   783	inline void EncryptServiceLog::set_allocated_session_id(::std::string* session_id) {
   785	  if (session_id != NULL) {
   787	    
   789	  } else {
   791	    
   793	  }
   795	  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
   797	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.session_id)
   799	}
       
   801	// string traffic_id = 50;
   803	inline void EncryptServiceLog::clear_traffic_id() {
   805	  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   807	}
   809	inline const ::std::string& EncryptServiceLog::traffic_id() const {
   811	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   813	  return traffic_id_.GetNoArena();
   815	}
   817	inline void EncryptServiceLog::set_traffic_id(const ::std::string& value) {
   819	  
   821	  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   823	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   825	}
   827	#if LANG_CXX11
   829	inline void EncryptServiceLog::set_traffic_id(::std::string&& value) {
   831	  
   833	  traffic_id_.SetNoArena(
   835	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   837	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   839	}
   841	#endif
   843	inline void EncryptServiceLog::set_traffic_id(const char* value) {
   845	  GOOGLE_DCHECK(value != NULL);
   847	  
   849	  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   851	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   853	}
   855	inline void EncryptServiceLog::set_traffic_id(const char* value, size_t size) {
   857	  
   859	  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   861	      ::std::string(reinterpret_cast<const char*>(value), size));
   863	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   865	}
   867	inline ::std::string* EncryptServiceLog::mutable_traffic_id() {
   869	  
   871	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   873	  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   875	}
   877	inline ::std::string* EncryptServiceLog::release_traffic_id() {
   879	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   881	  
   883	  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   885	}
   887	inline void EncryptServiceLog::set_allocated_traffic_id(::std::string* traffic_id) {
   889	  if (traffic_id != NULL) {
   891	    
   893	  } else {
   895	    
   897	  }
   899	  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
   901	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   903	}
       
   905	// uint64 enterprise_id = 60;
   907	inline void EncryptServiceLog::clear_enterprise_id() {
   909	  enterprise_id_ = GOOGLE_ULONGLONG(0);
   911	}
   913	inline ::google::protobuf::uint64 EncryptServiceLog::enterprise_id() const {
   915	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
   917	  return enterprise_id_;
   919	}
   921	inline void EncryptServiceLog::set_enterprise_id(::google::protobuf::uint64 value) {
   923	  
   925	  enterprise_id_ = value;
   927	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
   929	}
       
   931	// uint64 user_id = 70;
   933	inline void EncryptServiceLog::clear_user_id() {
   935	  user_id_ = GOOGLE_ULONGLONG(0);
   937	}
   939	inline ::google::protobuf::uint64 EncryptServiceLog::user_id() const {
   941	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.user_id)
   943	  return user_id_;
   945	}
   947	inline void EncryptServiceLog::set_user_id(::google::protobuf::uint64 value) {
   949	  
   951	  user_id_ = value;
   953	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.user_id)
   955	}
       
   957	// string trigger_time = 80;
   959	inline void EncryptServiceLog::clear_trigger_time() {
   961	  trigger_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   963	}
   965	inline const ::std::string& EncryptServiceLog::trigger_time() const {
   967	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   969	  return trigger_time_.GetNoArena();
   971	}
   973	inline void EncryptServiceLog::set_trigger_time(const ::std::string& value) {
   975	  
   977	  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   979	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   981	}
   983	#if LANG_CXX11
   985	inline void EncryptServiceLog::set_trigger_time(::std::string&& value) {
   987	  
   989	  trigger_time_.SetNoArena(
   991	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   993	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   995	}
   997	#endif
   999	inline void EncryptServiceLog::set_trigger_time(const char* value) {
  1001	  GOOGLE_DCHECK(value != NULL);
  1003	  
  1005	  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  1007	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  1009	}
  1011	inline void EncryptServiceLog::set_trigger_time(const char* value, size_t size) {
  1013	  
  1015	  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
  1017	      ::std::string(reinterpret_cast<const char*>(value), size));
  1019	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  1021	}
  1023	inline ::std::string* EncryptServiceLog::mutable_trigger_time() {
  1025	  
  1027	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  1029	  return trigger_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1031	}
  1033	inline ::std::string* EncryptServiceLog::release_trigger_time() {
  1035	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  1037	  
  1039	  return trigger_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1041	}
  1043	inline void EncryptServiceLog::set_allocated_trigger_time(::std::string* trigger_time) {
  1045	  if (trigger_time != NULL) {
  1047	    
  1049	  } else {
  1051	    
  1053	  }
  1055	  trigger_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_time);
  1057	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  1059	}
       
  1061	// string trigger_reason = 90;
  1063	inline void EncryptServiceLog::clear_trigger_reason() {
  1065	  trigger_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1067	}
  1069	inline const ::std::string& EncryptServiceLog::trigger_reason() const {
  1071	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  1073	  return trigger_reason_.GetNoArena();
  1075	}
  1077	inline void EncryptServiceLog::set_trigger_reason(const ::std::string& value) {
  1079	  
  1081	  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  1083	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  1085	}
  1087	#if LANG_CXX11
  1089	inline void EncryptServiceLog::set_trigger_reason(::std::string&& value) {
  1091	  
  1093	  trigger_reason_.SetNoArena(
  1095	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  1097	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  1099	}
  1101	#endif
  1103	inline void EncryptServiceLog::set_trigger_reason(const char* value) {
  1105	  GOOGLE_DCHECK(value != NULL);
  1107	  
  1109	  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  1111	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  1113	}
  1115	inline void EncryptServiceLog::set_trigger_reason(const char* value, size_t size) {
  1117	  
  1119	  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
  1121	      ::std::string(reinterpret_cast<const char*>(value), size));
  1123	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  1125	}
  1127	inline ::std::string* EncryptServiceLog::mutable_trigger_reason() {
  1129	  
  1131	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  1133	  return trigger_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1135	}
  1137	inline ::std::string* EncryptServiceLog::release_trigger_reason() {
  1139	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  1141	  
  1143	  return trigger_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1145	}
  1147	inline void EncryptServiceLog::set_allocated_trigger_reason(::std::string* trigger_reason) {
  1149	  if (trigger_reason != NULL) {
  1151	    
  1153	  } else {
  1155	    
  1157	  }
  1159	  trigger_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_reason);
  1161	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  1163	}
       
  1165	// uint32 is_succeed = 100;
  1167	inline void EncryptServiceLog::clear_is_succeed() {
  1169	  is_succeed_ = 0u;
  1171	}
  1173	inline ::google::protobuf::uint32 EncryptServiceLog::is_succeed() const {
  1175	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.is_succeed)
  1177	  return is_succeed_;
  1179	}
  1181	inline void EncryptServiceLog::set_is_succeed(::google::protobuf::uint32 value) {
  1183	  
  1185	  is_succeed_ = value;
  1187	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.is_succeed)
  1189	}
       
  1191	// string file_name = 110;
  1193	inline void EncryptServiceLog::clear_file_name() {
  1195	  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1197	}
  1199	inline const ::std::string& EncryptServiceLog::file_name() const {
  1201	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.file_name)
  1203	  return file_name_.GetNoArena();
  1205	}
  1207	inline void EncryptServiceLog::set_file_name(const ::std::string& value) {
  1209	  
  1211	  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  1213	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.file_name)
  1215	}
  1217	#if LANG_CXX11
  1219	inline void EncryptServiceLog::set_file_name(::std::string&& value) {
  1221	  
  1223	  file_name_.SetNoArena(
  1225	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  1227	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.file_name)
  1229	}
  1231	#endif
  1233	inline void EncryptServiceLog::set_file_name(const char* value) {
  1235	  GOOGLE_DCHECK(value != NULL);
  1237	  
  1239	  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  1241	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.file_name)
  1243	}
  1245	inline void EncryptServiceLog::set_file_name(const char* value, size_t size) {
  1247	  
  1249	  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
  1251	      ::std::string(reinterpret_cast<const char*>(value), size));
  1253	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.file_name)
  1255	}
  1257	inline ::std::string* EncryptServiceLog::mutable_file_name() {
  1259	  
  1261	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.file_name)
  1263	  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1265	}
  1267	inline ::std::string* EncryptServiceLog::release_file_name() {
  1269	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.file_name)
  1271	  
  1273	  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1275	}
  1277	inline void EncryptServiceLog::set_allocated_file_name(::std::string* file_name) {
  1279	  if (file_name != NULL) {
  1281	    
  1283	  } else {
  1285	    
  1287	  }
  1289	  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  1291	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.file_name)
  1293	}
       
  1295	// uint32 action_type = 120;
  1297	inline void EncryptServiceLog::clear_action_type() {
  1299	  action_type_ = 0u;
  1301	}
  1303	inline ::google::protobuf::uint32 EncryptServiceLog::action_type() const {
  1305	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.action_type)
  1307	  return action_type_;
  1309	}
  1311	inline void EncryptServiceLog::set_action_type(::google::protobuf::uint32 value) {
  1313	  
  1315	  action_type_ = value;
  1317	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.action_type)
  1319	}
       
  1321	// string comment = 130;
  1323	inline void EncryptServiceLog::clear_comment() {
  1325	  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1327	}
  1329	inline const ::std::string& EncryptServiceLog::comment() const {
  1331	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.comment)
  1333	  return comment_.GetNoArena();
  1335	}
  1337	inline void EncryptServiceLog::set_comment(const ::std::string& value) {
  1339	  
  1341	  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  1343	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.comment)
  1345	}
  1347	#if LANG_CXX11
  1349	inline void EncryptServiceLog::set_comment(::std::string&& value) {
  1351	  
  1353	  comment_.SetNoArena(
  1355	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  1357	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.comment)
  1359	}
  1361	#endif
  1363	inline void EncryptServiceLog::set_comment(const char* value) {
  1365	  GOOGLE_DCHECK(value != NULL);
  1367	  
  1369	  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  1371	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.comment)
  1373	}
  1375	inline void EncryptServiceLog::set_comment(const char* value, size_t size) {
  1377	  
  1379	  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
  1381	      ::std::string(reinterpret_cast<const char*>(value), size));
  1383	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.comment)
  1385	}
  1387	inline ::std::string* EncryptServiceLog::mutable_comment() {
  1389	  
  1391	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.comment)
  1393	  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1395	}
  1397	inline ::std::string* EncryptServiceLog::release_comment() {
  1399	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.comment)
  1401	  
  1403	  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  1405	}
  1407	inline void EncryptServiceLog::set_allocated_comment(::std::string* comment) {
  1409	  if (comment != NULL) {
  1411	    
  1413	  } else {
  1415	    
  1417	  }
  1419	  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  1421	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.comment)
  1423	}
       
  1425	#ifdef __GNUC__
  1427	  #pragma GCC diagnostic pop
  1429	#endif  // __GNUC__
  1431	#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
       
  1433	// @@protoc_insertion_point(namespace_scope)
       
       
  1435	}  // namespace log
  1437	}  // namespace cloudscreen
  1439	}  // namespace com
       
  1441	// @@protoc_insertion_point(global_scope)
       
  1443	#endif  // PROTOBUF_encryptServiceLog_2eproto__INCLUDED
