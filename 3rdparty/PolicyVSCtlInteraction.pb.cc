// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PolicyVSCtlInteraction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PolicyVSCtlInteraction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace policyvsctlinteraction {
class CtlRequstPolicyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CtlRequstPolicy>
     _instance;
} _CtlRequstPolicy_default_instance_;
class PolicyResponseCtlDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PolicyResponseCtl>
     _instance;
} _PolicyResponseCtl_default_instance_;

namespace protobuf_PolicyVSCtlInteraction_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlRequstPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlRequstPolicy, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlRequstPolicy, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlRequstPolicy, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlRequstPolicy, enc_product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlRequstPolicy, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlRequstPolicy, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlRequstPolicy, traffic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlRequstPolicy, block_tip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, action_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, traffic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, enc_enterprise_pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, enc_enterprise_cipherkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, enc_enterprice_test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, block_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, enterprise_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyResponseCtl, csp_product_name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CtlRequstPolicy)},
  { 13, -1, sizeof(PolicyResponseCtl)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CtlRequstPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PolicyResponseCtl_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "PolicyVSCtlInteraction.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CtlRequstPolicy_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CtlRequstPolicy_default_instance_);_PolicyResponseCtl_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PolicyResponseCtl_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034PolicyVSCtlInteraction.proto\022\026policyvs"
      "ctlinteraction\"\257\001\n\017CtlRequstPolicy\022\016\n\006ms"
      "g_id\030\n \001(\r\022\023\n\013activity_id\030\024 \001(\004\022\022\n\nprodu"
      "ct_id\030\036 \001(\004\022\026\n\016enc_product_id\030\037 \001(\004\022\020\n\010e"
      "vent_id\030( \001(\004\022\022\n\nsession_id\0302 \001(\t\022\022\n\ntra"
      "ffic_id\030< \001(\t\022\021\n\tblock_tip\030F \001(\t\"\275\002\n\021Pol"
      "icyResponseCtl\022\016\n\006msg_id\030\001 \001(\r\022\023\n\013activi"
      "ty_id\030\002 \001(\004\022\024\n\014action_taken\030\003 \001(\r\022\022\n\nses"
      "sion_id\030\004 \001(\t\022\022\n\ntraffic_id\030\005 \001(\t\022\032\n\022enc"
      "_enterprise_pwd\030\006 \001(\t\022 \n\030enc_enterprise_"
      "cipherkey\030\007 \001(\t\022\033\n\023enc_enterprice_test\030\010"
      " \001(\t\022\024\n\014block_result\030\t \001(\r\022\022\n\nproduct_id"
      "\030\n \001(\004\022\025\n\renterprise_id\030\013 \001(\004\022\017\n\007user_id"
      "\030\014 \001(\004\022\030\n\020csp_product_name\030\r \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PolicyVSCtlInteraction.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_PolicyVSCtlInteraction_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtlRequstPolicy::kMsgIdFieldNumber;
const int CtlRequstPolicy::kActivityIdFieldNumber;
const int CtlRequstPolicy::kProductIdFieldNumber;
const int CtlRequstPolicy::kEncProductIdFieldNumber;
const int CtlRequstPolicy::kEventIdFieldNumber;
const int CtlRequstPolicy::kSessionIdFieldNumber;
const int CtlRequstPolicy::kTrafficIdFieldNumber;
const int CtlRequstPolicy::kBlockTipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtlRequstPolicy::CtlRequstPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PolicyVSCtlInteraction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:policyvsctlinteraction.CtlRequstPolicy)
}
CtlRequstPolicy::CtlRequstPolicy(const CtlRequstPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traffic_id().size() > 0) {
    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  block_tip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.block_tip().size() > 0) {
    block_tip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_tip_);
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:policyvsctlinteraction.CtlRequstPolicy)
}

void CtlRequstPolicy::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_tip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(event_id_));
  _cached_size_ = 0;
}

CtlRequstPolicy::~CtlRequstPolicy() {
  // @@protoc_insertion_point(destructor:policyvsctlinteraction.CtlRequstPolicy)
  SharedDtor();
}

void CtlRequstPolicy::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_tip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtlRequstPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtlRequstPolicy::descriptor() {
  protobuf_PolicyVSCtlInteraction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PolicyVSCtlInteraction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CtlRequstPolicy& CtlRequstPolicy::default_instance() {
  protobuf_PolicyVSCtlInteraction_2eproto::InitDefaults();
  return *internal_default_instance();
}

CtlRequstPolicy* CtlRequstPolicy::New(::google::protobuf::Arena* arena) const {
  CtlRequstPolicy* n = new CtlRequstPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtlRequstPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:policyvsctlinteraction.CtlRequstPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_tip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(event_id_));
  _internal_metadata_.Clear();
}

bool CtlRequstPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:policyvsctlinteraction.CtlRequstPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 msg_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 activity_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 product_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 enc_product_id = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enc_product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 event_id = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policyvsctlinteraction.CtlRequstPolicy.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traffic_id = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policyvsctlinteraction.CtlRequstPolicy.traffic_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string block_tip = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_tip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->block_tip().data(), static_cast<int>(this->block_tip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policyvsctlinteraction.CtlRequstPolicy.block_tip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:policyvsctlinteraction.CtlRequstPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:policyvsctlinteraction.CtlRequstPolicy)
  return false;
#undef DO_
}

void CtlRequstPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:policyvsctlinteraction.CtlRequstPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 10;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->msg_id(), output);
  }

  // uint64 activity_id = 20;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->activity_id(), output);
  }

  // uint64 product_id = 30;
  if (this->product_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->product_id(), output);
  }

  // uint64 enc_product_id = 31;
  if (this->enc_product_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->enc_product_id(), output);
  }

  // uint64 event_id = 40;
  if (this->event_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->event_id(), output);
  }

  // string session_id = 50;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.CtlRequstPolicy.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->session_id(), output);
  }

  // string traffic_id = 60;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.CtlRequstPolicy.traffic_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->traffic_id(), output);
  }

  // string block_tip = 70;
  if (this->block_tip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->block_tip().data(), static_cast<int>(this->block_tip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.CtlRequstPolicy.block_tip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      70, this->block_tip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:policyvsctlinteraction.CtlRequstPolicy)
}

::google::protobuf::uint8* CtlRequstPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:policyvsctlinteraction.CtlRequstPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 10;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->msg_id(), target);
  }

  // uint64 activity_id = 20;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->activity_id(), target);
  }

  // uint64 product_id = 30;
  if (this->product_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->product_id(), target);
  }

  // uint64 enc_product_id = 31;
  if (this->enc_product_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->enc_product_id(), target);
  }

  // uint64 event_id = 40;
  if (this->event_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->event_id(), target);
  }

  // string session_id = 50;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.CtlRequstPolicy.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->session_id(), target);
  }

  // string traffic_id = 60;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.CtlRequstPolicy.traffic_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->traffic_id(), target);
  }

  // string block_tip = 70;
  if (this->block_tip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->block_tip().data(), static_cast<int>(this->block_tip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.CtlRequstPolicy.block_tip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->block_tip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:policyvsctlinteraction.CtlRequstPolicy)
  return target;
}

size_t CtlRequstPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:policyvsctlinteraction.CtlRequstPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_id = 50;
  if (this->session_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string traffic_id = 60;
  if (this->traffic_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traffic_id());
  }

  // string block_tip = 70;
  if (this->block_tip().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->block_tip());
  }

  // uint32 msg_id = 10;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // uint64 activity_id = 20;
  if (this->activity_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->activity_id());
  }

  // uint64 product_id = 30;
  if (this->product_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->product_id());
  }

  // uint64 enc_product_id = 31;
  if (this->enc_product_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->enc_product_id());
  }

  // uint64 event_id = 40;
  if (this->event_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtlRequstPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:policyvsctlinteraction.CtlRequstPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const CtlRequstPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CtlRequstPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:policyvsctlinteraction.CtlRequstPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:policyvsctlinteraction.CtlRequstPolicy)
    MergeFrom(*source);
  }
}

void CtlRequstPolicy::MergeFrom(const CtlRequstPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:policyvsctlinteraction.CtlRequstPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.traffic_id().size() > 0) {

    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  if (from.block_tip().size() > 0) {

    block_tip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_tip_);
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
  if (from.product_id() != 0) {
    set_product_id(from.product_id());
  }
  if (from.enc_product_id() != 0) {
    set_enc_product_id(from.enc_product_id());
  }
  if (from.event_id() != 0) {
    set_event_id(from.event_id());
  }
}

void CtlRequstPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:policyvsctlinteraction.CtlRequstPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtlRequstPolicy::CopyFrom(const CtlRequstPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:policyvsctlinteraction.CtlRequstPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtlRequstPolicy::IsInitialized() const {
  return true;
}

void CtlRequstPolicy::Swap(CtlRequstPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtlRequstPolicy::InternalSwap(CtlRequstPolicy* other) {
  using std::swap;
  session_id_.Swap(&other->session_id_);
  traffic_id_.Swap(&other->traffic_id_);
  block_tip_.Swap(&other->block_tip_);
  swap(msg_id_, other->msg_id_);
  swap(activity_id_, other->activity_id_);
  swap(product_id_, other->product_id_);
  swap(enc_product_id_, other->enc_product_id_);
  swap(event_id_, other->event_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtlRequstPolicy::GetMetadata() const {
  protobuf_PolicyVSCtlInteraction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PolicyVSCtlInteraction_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtlRequstPolicy

// uint32 msg_id = 10;
void CtlRequstPolicy::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 CtlRequstPolicy::msg_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.msg_id)
  return msg_id_;
}
void CtlRequstPolicy::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.msg_id)
}

// uint64 activity_id = 20;
void CtlRequstPolicy::clear_activity_id() {
  activity_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CtlRequstPolicy::activity_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.activity_id)
  return activity_id_;
}
void CtlRequstPolicy::set_activity_id(::google::protobuf::uint64 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.activity_id)
}

// uint64 product_id = 30;
void CtlRequstPolicy::clear_product_id() {
  product_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CtlRequstPolicy::product_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.product_id)
  return product_id_;
}
void CtlRequstPolicy::set_product_id(::google::protobuf::uint64 value) {
  
  product_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.product_id)
}

// uint64 enc_product_id = 31;
void CtlRequstPolicy::clear_enc_product_id() {
  enc_product_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CtlRequstPolicy::enc_product_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.enc_product_id)
  return enc_product_id_;
}
void CtlRequstPolicy::set_enc_product_id(::google::protobuf::uint64 value) {
  
  enc_product_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.enc_product_id)
}

// uint64 event_id = 40;
void CtlRequstPolicy::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CtlRequstPolicy::event_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.event_id)
  return event_id_;
}
void CtlRequstPolicy::set_event_id(::google::protobuf::uint64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.event_id)
}

// string session_id = 50;
void CtlRequstPolicy::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CtlRequstPolicy::session_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.session_id)
  return session_id_.GetNoArena();
}
void CtlRequstPolicy::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.session_id)
}
#if LANG_CXX11
void CtlRequstPolicy::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.CtlRequstPolicy.session_id)
}
#endif
void CtlRequstPolicy::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.CtlRequstPolicy.session_id)
}
void CtlRequstPolicy::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.CtlRequstPolicy.session_id)
}
::std::string* CtlRequstPolicy::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.CtlRequstPolicy.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CtlRequstPolicy::release_session_id() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.CtlRequstPolicy.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CtlRequstPolicy::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.CtlRequstPolicy.session_id)
}

// string traffic_id = 60;
void CtlRequstPolicy::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CtlRequstPolicy::traffic_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
  return traffic_id_.GetNoArena();
}
void CtlRequstPolicy::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}
#if LANG_CXX11
void CtlRequstPolicy::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}
#endif
void CtlRequstPolicy::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}
void CtlRequstPolicy::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}
::std::string* CtlRequstPolicy::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CtlRequstPolicy::release_traffic_id() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CtlRequstPolicy::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}

// string block_tip = 70;
void CtlRequstPolicy::clear_block_tip() {
  block_tip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CtlRequstPolicy::block_tip() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.block_tip)
  return block_tip_.GetNoArena();
}
void CtlRequstPolicy::set_block_tip(const ::std::string& value) {
  
  block_tip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}
#if LANG_CXX11
void CtlRequstPolicy::set_block_tip(::std::string&& value) {
  
  block_tip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}
#endif
void CtlRequstPolicy::set_block_tip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  block_tip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}
void CtlRequstPolicy::set_block_tip(const char* value, size_t size) {
  
  block_tip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}
::std::string* CtlRequstPolicy::mutable_block_tip() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.CtlRequstPolicy.block_tip)
  return block_tip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CtlRequstPolicy::release_block_tip() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.CtlRequstPolicy.block_tip)
  
  return block_tip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CtlRequstPolicy::set_allocated_block_tip(::std::string* block_tip) {
  if (block_tip != NULL) {
    
  } else {
    
  }
  block_tip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_tip);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyResponseCtl::kMsgIdFieldNumber;
const int PolicyResponseCtl::kActivityIdFieldNumber;
const int PolicyResponseCtl::kActionTakenFieldNumber;
const int PolicyResponseCtl::kSessionIdFieldNumber;
const int PolicyResponseCtl::kTrafficIdFieldNumber;
const int PolicyResponseCtl::kEncEnterprisePwdFieldNumber;
const int PolicyResponseCtl::kEncEnterpriseCipherkeyFieldNumber;
const int PolicyResponseCtl::kEncEnterpriceTestFieldNumber;
const int PolicyResponseCtl::kBlockResultFieldNumber;
const int PolicyResponseCtl::kProductIdFieldNumber;
const int PolicyResponseCtl::kEnterpriseIdFieldNumber;
const int PolicyResponseCtl::kUserIdFieldNumber;
const int PolicyResponseCtl::kCspProductNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyResponseCtl::PolicyResponseCtl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PolicyVSCtlInteraction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:policyvsctlinteraction.PolicyResponseCtl)
}
PolicyResponseCtl::PolicyResponseCtl(const PolicyResponseCtl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traffic_id().size() > 0) {
    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  enc_enterprise_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enc_enterprise_pwd().size() > 0) {
    enc_enterprise_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprise_pwd_);
  }
  enc_enterprise_cipherkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enc_enterprise_cipherkey().size() > 0) {
    enc_enterprise_cipherkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprise_cipherkey_);
  }
  enc_enterprice_test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enc_enterprice_test().size() > 0) {
    enc_enterprice_test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprice_test_);
  }
  csp_product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.csp_product_name().size() > 0) {
    csp_product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_product_name_);
  }
  ::memcpy(&activity_id_, &from.activity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_result_) -
    reinterpret_cast<char*>(&activity_id_)) + sizeof(block_result_));
  // @@protoc_insertion_point(copy_constructor:policyvsctlinteraction.PolicyResponseCtl)
}

void PolicyResponseCtl::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_cipherkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprice_test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_result_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(block_result_));
  _cached_size_ = 0;
}

PolicyResponseCtl::~PolicyResponseCtl() {
  // @@protoc_insertion_point(destructor:policyvsctlinteraction.PolicyResponseCtl)
  SharedDtor();
}

void PolicyResponseCtl::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_cipherkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprice_test_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PolicyResponseCtl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolicyResponseCtl::descriptor() {
  protobuf_PolicyVSCtlInteraction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PolicyVSCtlInteraction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolicyResponseCtl& PolicyResponseCtl::default_instance() {
  protobuf_PolicyVSCtlInteraction_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolicyResponseCtl* PolicyResponseCtl::New(::google::protobuf::Arena* arena) const {
  PolicyResponseCtl* n = new PolicyResponseCtl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolicyResponseCtl::Clear() {
// @@protoc_insertion_point(message_clear_start:policyvsctlinteraction.PolicyResponseCtl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_cipherkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprice_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_result_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(block_result_));
  _internal_metadata_.Clear();
}

bool PolicyResponseCtl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:policyvsctlinteraction.PolicyResponseCtl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 activity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_taken = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policyvsctlinteraction.PolicyResponseCtl.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traffic_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policyvsctlinteraction.PolicyResponseCtl.traffic_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enc_enterprise_pwd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enc_enterprise_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enc_enterprise_pwd().data(), static_cast<int>(this->enc_enterprise_pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enc_enterprise_cipherkey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enc_enterprise_cipherkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enc_enterprise_cipherkey().data(), static_cast<int>(this->enc_enterprise_cipherkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enc_enterprice_test = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enc_enterprice_test()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enc_enterprice_test().data(), static_cast<int>(this->enc_enterprice_test().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 block_result = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 product_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 enterprise_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enterprise_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string csp_product_name = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_csp_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "policyvsctlinteraction.PolicyResponseCtl.csp_product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:policyvsctlinteraction.PolicyResponseCtl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:policyvsctlinteraction.PolicyResponseCtl)
  return false;
#undef DO_
}

void PolicyResponseCtl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:policyvsctlinteraction.PolicyResponseCtl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // uint64 activity_id = 2;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->activity_id(), output);
  }

  // uint32 action_taken = 3;
  if (this->action_taken() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action_taken(), output);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->session_id(), output);
  }

  // string traffic_id = 5;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.traffic_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->traffic_id(), output);
  }

  // string enc_enterprise_pwd = 6;
  if (this->enc_enterprise_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprise_pwd().data(), static_cast<int>(this->enc_enterprise_pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->enc_enterprise_pwd(), output);
  }

  // string enc_enterprise_cipherkey = 7;
  if (this->enc_enterprise_cipherkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprise_cipherkey().data(), static_cast<int>(this->enc_enterprise_cipherkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->enc_enterprise_cipherkey(), output);
  }

  // string enc_enterprice_test = 8;
  if (this->enc_enterprice_test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprice_test().data(), static_cast<int>(this->enc_enterprice_test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->enc_enterprice_test(), output);
  }

  // uint32 block_result = 9;
  if (this->block_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->block_result(), output);
  }

  // uint64 product_id = 10;
  if (this->product_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->product_id(), output);
  }

  // uint64 enterprise_id = 11;
  if (this->enterprise_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->enterprise_id(), output);
  }

  // uint64 user_id = 12;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->user_id(), output);
  }

  // string csp_product_name = 13;
  if (this->csp_product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.csp_product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->csp_product_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:policyvsctlinteraction.PolicyResponseCtl)
}

::google::protobuf::uint8* PolicyResponseCtl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:policyvsctlinteraction.PolicyResponseCtl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // uint64 activity_id = 2;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->activity_id(), target);
  }

  // uint32 action_taken = 3;
  if (this->action_taken() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action_taken(), target);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session_id(), target);
  }

  // string traffic_id = 5;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.traffic_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->traffic_id(), target);
  }

  // string enc_enterprise_pwd = 6;
  if (this->enc_enterprise_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprise_pwd().data(), static_cast<int>(this->enc_enterprise_pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->enc_enterprise_pwd(), target);
  }

  // string enc_enterprise_cipherkey = 7;
  if (this->enc_enterprise_cipherkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprise_cipherkey().data(), static_cast<int>(this->enc_enterprise_cipherkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->enc_enterprise_cipherkey(), target);
  }

  // string enc_enterprice_test = 8;
  if (this->enc_enterprice_test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprice_test().data(), static_cast<int>(this->enc_enterprice_test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->enc_enterprice_test(), target);
  }

  // uint32 block_result = 9;
  if (this->block_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->block_result(), target);
  }

  // uint64 product_id = 10;
  if (this->product_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->product_id(), target);
  }

  // uint64 enterprise_id = 11;
  if (this->enterprise_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->enterprise_id(), target);
  }

  // uint64 user_id = 12;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->user_id(), target);
  }

  // string csp_product_name = 13;
  if (this->csp_product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "policyvsctlinteraction.PolicyResponseCtl.csp_product_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->csp_product_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:policyvsctlinteraction.PolicyResponseCtl)
  return target;
}

size_t PolicyResponseCtl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:policyvsctlinteraction.PolicyResponseCtl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_id = 4;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string traffic_id = 5;
  if (this->traffic_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traffic_id());
  }

  // string enc_enterprise_pwd = 6;
  if (this->enc_enterprise_pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enc_enterprise_pwd());
  }

  // string enc_enterprise_cipherkey = 7;
  if (this->enc_enterprise_cipherkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enc_enterprise_cipherkey());
  }

  // string enc_enterprice_test = 8;
  if (this->enc_enterprice_test().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enc_enterprice_test());
  }

  // string csp_product_name = 13;
  if (this->csp_product_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->csp_product_name());
  }

  // uint64 activity_id = 2;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->activity_id());
  }

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // uint32 action_taken = 3;
  if (this->action_taken() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_taken());
  }

  // uint64 product_id = 10;
  if (this->product_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->product_id());
  }

  // uint64 enterprise_id = 11;
  if (this->enterprise_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->enterprise_id());
  }

  // uint64 user_id = 12;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // uint32 block_result = 9;
  if (this->block_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyResponseCtl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:policyvsctlinteraction.PolicyResponseCtl)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyResponseCtl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolicyResponseCtl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:policyvsctlinteraction.PolicyResponseCtl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:policyvsctlinteraction.PolicyResponseCtl)
    MergeFrom(*source);
  }
}

void PolicyResponseCtl::MergeFrom(const PolicyResponseCtl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:policyvsctlinteraction.PolicyResponseCtl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.traffic_id().size() > 0) {

    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  if (from.enc_enterprise_pwd().size() > 0) {

    enc_enterprise_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprise_pwd_);
  }
  if (from.enc_enterprise_cipherkey().size() > 0) {

    enc_enterprise_cipherkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprise_cipherkey_);
  }
  if (from.enc_enterprice_test().size() > 0) {

    enc_enterprice_test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprice_test_);
  }
  if (from.csp_product_name().size() > 0) {

    csp_product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_product_name_);
  }
  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.action_taken() != 0) {
    set_action_taken(from.action_taken());
  }
  if (from.product_id() != 0) {
    set_product_id(from.product_id());
  }
  if (from.enterprise_id() != 0) {
    set_enterprise_id(from.enterprise_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.block_result() != 0) {
    set_block_result(from.block_result());
  }
}

void PolicyResponseCtl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:policyvsctlinteraction.PolicyResponseCtl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyResponseCtl::CopyFrom(const PolicyResponseCtl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:policyvsctlinteraction.PolicyResponseCtl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyResponseCtl::IsInitialized() const {
  return true;
}

void PolicyResponseCtl::Swap(PolicyResponseCtl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyResponseCtl::InternalSwap(PolicyResponseCtl* other) {
  using std::swap;
  session_id_.Swap(&other->session_id_);
  traffic_id_.Swap(&other->traffic_id_);
  enc_enterprise_pwd_.Swap(&other->enc_enterprise_pwd_);
  enc_enterprise_cipherkey_.Swap(&other->enc_enterprise_cipherkey_);
  enc_enterprice_test_.Swap(&other->enc_enterprice_test_);
  csp_product_name_.Swap(&other->csp_product_name_);
  swap(activity_id_, other->activity_id_);
  swap(msg_id_, other->msg_id_);
  swap(action_taken_, other->action_taken_);
  swap(product_id_, other->product_id_);
  swap(enterprise_id_, other->enterprise_id_);
  swap(user_id_, other->user_id_);
  swap(block_result_, other->block_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PolicyResponseCtl::GetMetadata() const {
  protobuf_PolicyVSCtlInteraction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_PolicyVSCtlInteraction_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyResponseCtl

// uint32 msg_id = 1;
void PolicyResponseCtl::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 PolicyResponseCtl::msg_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.msg_id)
  return msg_id_;
}
void PolicyResponseCtl::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.msg_id)
}

// uint64 activity_id = 2;
void PolicyResponseCtl::clear_activity_id() {
  activity_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PolicyResponseCtl::activity_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.activity_id)
  return activity_id_;
}
void PolicyResponseCtl::set_activity_id(::google::protobuf::uint64 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.activity_id)
}

// uint32 action_taken = 3;
void PolicyResponseCtl::clear_action_taken() {
  action_taken_ = 0u;
}
::google::protobuf::uint32 PolicyResponseCtl::action_taken() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.action_taken)
  return action_taken_;
}
void PolicyResponseCtl::set_action_taken(::google::protobuf::uint32 value) {
  
  action_taken_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.action_taken)
}

// string session_id = 4;
void PolicyResponseCtl::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PolicyResponseCtl::session_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.session_id)
  return session_id_.GetNoArena();
}
void PolicyResponseCtl::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.session_id)
}
#if LANG_CXX11
void PolicyResponseCtl::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.session_id)
}
#endif
void PolicyResponseCtl::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.session_id)
}
void PolicyResponseCtl::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.session_id)
}
::std::string* PolicyResponseCtl::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyResponseCtl::release_session_id() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyResponseCtl::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.session_id)
}

// string traffic_id = 5;
void PolicyResponseCtl::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PolicyResponseCtl::traffic_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
  return traffic_id_.GetNoArena();
}
void PolicyResponseCtl::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}
#if LANG_CXX11
void PolicyResponseCtl::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}
#endif
void PolicyResponseCtl::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}
void PolicyResponseCtl::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}
::std::string* PolicyResponseCtl::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyResponseCtl::release_traffic_id() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyResponseCtl::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}

// string enc_enterprise_pwd = 6;
void PolicyResponseCtl::clear_enc_enterprise_pwd() {
  enc_enterprise_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PolicyResponseCtl::enc_enterprise_pwd() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
  return enc_enterprise_pwd_.GetNoArena();
}
void PolicyResponseCtl::set_enc_enterprise_pwd(const ::std::string& value) {
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}
#if LANG_CXX11
void PolicyResponseCtl::set_enc_enterprise_pwd(::std::string&& value) {
  
  enc_enterprise_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}
#endif
void PolicyResponseCtl::set_enc_enterprise_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}
void PolicyResponseCtl::set_enc_enterprise_pwd(const char* value, size_t size) {
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}
::std::string* PolicyResponseCtl::mutable_enc_enterprise_pwd() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
  return enc_enterprise_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyResponseCtl::release_enc_enterprise_pwd() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
  
  return enc_enterprise_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyResponseCtl::set_allocated_enc_enterprise_pwd(::std::string* enc_enterprise_pwd) {
  if (enc_enterprise_pwd != NULL) {
    
  } else {
    
  }
  enc_enterprise_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprise_pwd);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}

// string enc_enterprise_cipherkey = 7;
void PolicyResponseCtl::clear_enc_enterprise_cipherkey() {
  enc_enterprise_cipherkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PolicyResponseCtl::enc_enterprise_cipherkey() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
  return enc_enterprise_cipherkey_.GetNoArena();
}
void PolicyResponseCtl::set_enc_enterprise_cipherkey(const ::std::string& value) {
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}
#if LANG_CXX11
void PolicyResponseCtl::set_enc_enterprise_cipherkey(::std::string&& value) {
  
  enc_enterprise_cipherkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}
#endif
void PolicyResponseCtl::set_enc_enterprise_cipherkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}
void PolicyResponseCtl::set_enc_enterprise_cipherkey(const char* value, size_t size) {
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}
::std::string* PolicyResponseCtl::mutable_enc_enterprise_cipherkey() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
  return enc_enterprise_cipherkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyResponseCtl::release_enc_enterprise_cipherkey() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
  
  return enc_enterprise_cipherkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyResponseCtl::set_allocated_enc_enterprise_cipherkey(::std::string* enc_enterprise_cipherkey) {
  if (enc_enterprise_cipherkey != NULL) {
    
  } else {
    
  }
  enc_enterprise_cipherkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprise_cipherkey);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}

// string enc_enterprice_test = 8;
void PolicyResponseCtl::clear_enc_enterprice_test() {
  enc_enterprice_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PolicyResponseCtl::enc_enterprice_test() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
  return enc_enterprice_test_.GetNoArena();
}
void PolicyResponseCtl::set_enc_enterprice_test(const ::std::string& value) {
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}
#if LANG_CXX11
void PolicyResponseCtl::set_enc_enterprice_test(::std::string&& value) {
  
  enc_enterprice_test_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}
#endif
void PolicyResponseCtl::set_enc_enterprice_test(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}
void PolicyResponseCtl::set_enc_enterprice_test(const char* value, size_t size) {
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}
::std::string* PolicyResponseCtl::mutable_enc_enterprice_test() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
  return enc_enterprice_test_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyResponseCtl::release_enc_enterprice_test() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
  
  return enc_enterprice_test_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyResponseCtl::set_allocated_enc_enterprice_test(::std::string* enc_enterprice_test) {
  if (enc_enterprice_test != NULL) {
    
  } else {
    
  }
  enc_enterprice_test_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprice_test);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}

// uint32 block_result = 9;
void PolicyResponseCtl::clear_block_result() {
  block_result_ = 0u;
}
::google::protobuf::uint32 PolicyResponseCtl::block_result() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.block_result)
  return block_result_;
}
void PolicyResponseCtl::set_block_result(::google::protobuf::uint32 value) {
  
  block_result_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.block_result)
}

// uint64 product_id = 10;
void PolicyResponseCtl::clear_product_id() {
  product_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PolicyResponseCtl::product_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.product_id)
  return product_id_;
}
void PolicyResponseCtl::set_product_id(::google::protobuf::uint64 value) {
  
  product_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.product_id)
}

// uint64 enterprise_id = 11;
void PolicyResponseCtl::clear_enterprise_id() {
  enterprise_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PolicyResponseCtl::enterprise_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.enterprise_id)
  return enterprise_id_;
}
void PolicyResponseCtl::set_enterprise_id(::google::protobuf::uint64 value) {
  
  enterprise_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.enterprise_id)
}

// uint64 user_id = 12;
void PolicyResponseCtl::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PolicyResponseCtl::user_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.user_id)
  return user_id_;
}
void PolicyResponseCtl::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.user_id)
}

// string csp_product_name = 13;
void PolicyResponseCtl::clear_csp_product_name() {
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PolicyResponseCtl::csp_product_name() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
  return csp_product_name_.GetNoArena();
}
void PolicyResponseCtl::set_csp_product_name(const ::std::string& value) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}
#if LANG_CXX11
void PolicyResponseCtl::set_csp_product_name(::std::string&& value) {
  
  csp_product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}
#endif
void PolicyResponseCtl::set_csp_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}
void PolicyResponseCtl::set_csp_product_name(const char* value, size_t size) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}
::std::string* PolicyResponseCtl::mutable_csp_product_name() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyResponseCtl::release_csp_product_name() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
  
  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyResponseCtl::set_allocated_csp_product_name(::std::string* csp_product_name) {
  if (csp_product_name != NULL) {
    
  } else {
    
  }
  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace policyvsctlinteraction

// @@protoc_insertion_point(global_scope)
