// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProviderToPolicy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBProviderToPolicy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace policy {
namespace msgdbprovidertopolicy {
class MsgDBProviderToPolicyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MsgDBProviderToPolicy>
     _instance;
} _MsgDBProviderToPolicy_default_instance_;

namespace protobuf_DBProviderToPolicy_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, traffic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, action_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, log_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, encry_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, encry_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, encry_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, csp_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, enable_encry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBProviderToPolicy, user_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(MsgDBProviderToPolicy)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgDBProviderToPolicy_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "DBProviderToPolicy.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MsgDBProviderToPolicy_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MsgDBProviderToPolicy_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030DBProviderToPolicy.proto\022 com.policy.m"
      "sgdbprovidertopolicy\"\354\001\n\025MsgDBProviderTo"
      "Policy\022\022\n\nsession_id\030\n \001(\t\022\022\n\ntraffic_id"
      "\030\024 \001(\t\022\024\n\014action_taken\030\036 \001(\r\022\016\n\006msg_id\030("
      " \001(\r\022\020\n\010log_type\0302 \001(\r\022\021\n\tencry_key\030< \001("
      "\t\022\023\n\013encry_value\030F \001(\t\022\022\n\nencry_text\030P \001"
      "(\t\022\020\n\010csp_name\030Z \001(\t\022\024\n\014enable_encry\030d \001"
      "(\r\022\017\n\007user_id\030n \001(\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 307);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBProviderToPolicy.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_DBProviderToPolicy_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgDBProviderToPolicy::kSessionIdFieldNumber;
const int MsgDBProviderToPolicy::kTrafficIdFieldNumber;
const int MsgDBProviderToPolicy::kActionTakenFieldNumber;
const int MsgDBProviderToPolicy::kMsgIdFieldNumber;
const int MsgDBProviderToPolicy::kLogTypeFieldNumber;
const int MsgDBProviderToPolicy::kEncryKeyFieldNumber;
const int MsgDBProviderToPolicy::kEncryValueFieldNumber;
const int MsgDBProviderToPolicy::kEncryTextFieldNumber;
const int MsgDBProviderToPolicy::kCspNameFieldNumber;
const int MsgDBProviderToPolicy::kEnableEncryFieldNumber;
const int MsgDBProviderToPolicy::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgDBProviderToPolicy::MsgDBProviderToPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DBProviderToPolicy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
}
MsgDBProviderToPolicy::MsgDBProviderToPolicy(const MsgDBProviderToPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traffic_id().size() > 0) {
    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  encry_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.encry_key().size() > 0) {
    encry_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encry_key_);
  }
  encry_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.encry_value().size() > 0) {
    encry_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encry_value_);
  }
  encry_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.encry_text().size() > 0) {
    encry_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encry_text_);
  }
  csp_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.csp_name().size() > 0) {
    csp_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_name_);
  }
  ::memcpy(&action_taken_, &from.action_taken_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&action_taken_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
}

void MsgDBProviderToPolicy::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encry_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encry_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encry_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_taken_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&action_taken_)) + sizeof(user_id_));
  _cached_size_ = 0;
}

MsgDBProviderToPolicy::~MsgDBProviderToPolicy() {
  // @@protoc_insertion_point(destructor:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  SharedDtor();
}

void MsgDBProviderToPolicy::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encry_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encry_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encry_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgDBProviderToPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBProviderToPolicy::descriptor() {
  protobuf_DBProviderToPolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DBProviderToPolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgDBProviderToPolicy& MsgDBProviderToPolicy::default_instance() {
  protobuf_DBProviderToPolicy_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgDBProviderToPolicy* MsgDBProviderToPolicy::New(::google::protobuf::Arena* arena) const {
  MsgDBProviderToPolicy* n = new MsgDBProviderToPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgDBProviderToPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encry_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encry_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encry_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_taken_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&action_taken_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

bool MsgDBProviderToPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traffic_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_taken = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 log_type = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string encry_key = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encry_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->encry_key().data(), static_cast<int>(this->encry_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string encry_value = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encry_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->encry_value().data(), static_cast<int>(this->encry_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string encry_text = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encry_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->encry_text().data(), static_cast<int>(this->encry_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string csp_name = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_csp_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->csp_name().data(), static_cast<int>(this->csp_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 enable_encry = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_encry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 880 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  return false;
#undef DO_
}

void MsgDBProviderToPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 10;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->session_id(), output);
  }

  // string traffic_id = 20;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->traffic_id(), output);
  }

  // uint32 action_taken = 30;
  if (this->action_taken() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->action_taken(), output);
  }

  // uint32 msg_id = 40;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->msg_id(), output);
  }

  // uint32 log_type = 50;
  if (this->log_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->log_type(), output);
  }

  // string encry_key = 60;
  if (this->encry_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encry_key().data(), static_cast<int>(this->encry_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->encry_key(), output);
  }

  // string encry_value = 70;
  if (this->encry_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encry_value().data(), static_cast<int>(this->encry_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      70, this->encry_value(), output);
  }

  // string encry_text = 80;
  if (this->encry_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encry_text().data(), static_cast<int>(this->encry_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->encry_text(), output);
  }

  // string csp_name = 90;
  if (this->csp_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_name().data(), static_cast<int>(this->csp_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      90, this->csp_name(), output);
  }

  // uint32 enable_encry = 100;
  if (this->enable_encry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->enable_encry(), output);
  }

  // uint64 user_id = 110;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(110, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
}

::google::protobuf::uint8* MsgDBProviderToPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 10;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->session_id(), target);
  }

  // string traffic_id = 20;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->traffic_id(), target);
  }

  // uint32 action_taken = 30;
  if (this->action_taken() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->action_taken(), target);
  }

  // uint32 msg_id = 40;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->msg_id(), target);
  }

  // uint32 log_type = 50;
  if (this->log_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->log_type(), target);
  }

  // string encry_key = 60;
  if (this->encry_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encry_key().data(), static_cast<int>(this->encry_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->encry_key(), target);
  }

  // string encry_value = 70;
  if (this->encry_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encry_value().data(), static_cast<int>(this->encry_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->encry_value(), target);
  }

  // string encry_text = 80;
  if (this->encry_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encry_text().data(), static_cast<int>(this->encry_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->encry_text(), target);
  }

  // string csp_name = 90;
  if (this->csp_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_name().data(), static_cast<int>(this->csp_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        90, this->csp_name(), target);
  }

  // uint32 enable_encry = 100;
  if (this->enable_encry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->enable_encry(), target);
  }

  // uint64 user_id = 110;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(110, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  return target;
}

size_t MsgDBProviderToPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_id = 10;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string traffic_id = 20;
  if (this->traffic_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traffic_id());
  }

  // string encry_key = 60;
  if (this->encry_key().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->encry_key());
  }

  // string encry_value = 70;
  if (this->encry_value().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->encry_value());
  }

  // string encry_text = 80;
  if (this->encry_text().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->encry_text());
  }

  // string csp_name = 90;
  if (this->csp_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->csp_name());
  }

  // uint32 action_taken = 30;
  if (this->action_taken() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_taken());
  }

  // uint32 msg_id = 40;
  if (this->msg_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // uint32 log_type = 50;
  if (this->log_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->log_type());
  }

  // uint32 enable_encry = 100;
  if (this->enable_encry() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enable_encry());
  }

  // uint64 user_id = 110;
  if (this->user_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBProviderToPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBProviderToPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgDBProviderToPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
    MergeFrom(*source);
  }
}

void MsgDBProviderToPolicy::MergeFrom(const MsgDBProviderToPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.traffic_id().size() > 0) {

    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  if (from.encry_key().size() > 0) {

    encry_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encry_key_);
  }
  if (from.encry_value().size() > 0) {

    encry_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encry_value_);
  }
  if (from.encry_text().size() > 0) {

    encry_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encry_text_);
  }
  if (from.csp_name().size() > 0) {

    csp_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_name_);
  }
  if (from.action_taken() != 0) {
    set_action_taken(from.action_taken());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.log_type() != 0) {
    set_log_type(from.log_type());
  }
  if (from.enable_encry() != 0) {
    set_enable_encry(from.enable_encry());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void MsgDBProviderToPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBProviderToPolicy::CopyFrom(const MsgDBProviderToPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBProviderToPolicy::IsInitialized() const {
  return true;
}

void MsgDBProviderToPolicy::Swap(MsgDBProviderToPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgDBProviderToPolicy::InternalSwap(MsgDBProviderToPolicy* other) {
  using std::swap;
  session_id_.Swap(&other->session_id_);
  traffic_id_.Swap(&other->traffic_id_);
  encry_key_.Swap(&other->encry_key_);
  encry_value_.Swap(&other->encry_value_);
  encry_text_.Swap(&other->encry_text_);
  csp_name_.Swap(&other->csp_name_);
  swap(action_taken_, other->action_taken_);
  swap(msg_id_, other->msg_id_);
  swap(log_type_, other->log_type_);
  swap(enable_encry_, other->enable_encry_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgDBProviderToPolicy::GetMetadata() const {
  protobuf_DBProviderToPolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DBProviderToPolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgDBProviderToPolicy

// string session_id = 10;
void MsgDBProviderToPolicy::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgDBProviderToPolicy::session_id() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id)
  return session_id_.GetNoArena();
}
void MsgDBProviderToPolicy::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id)
}
#if LANG_CXX11
void MsgDBProviderToPolicy::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id)
}
#endif
void MsgDBProviderToPolicy::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id)
}
void MsgDBProviderToPolicy::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id)
}
::std::string* MsgDBProviderToPolicy::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgDBProviderToPolicy::release_session_id() {
  // @@protoc_insertion_point(field_release:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDBProviderToPolicy::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.session_id)
}

// string traffic_id = 20;
void MsgDBProviderToPolicy::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgDBProviderToPolicy::traffic_id() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id)
  return traffic_id_.GetNoArena();
}
void MsgDBProviderToPolicy::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id)
}
#if LANG_CXX11
void MsgDBProviderToPolicy::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id)
}
#endif
void MsgDBProviderToPolicy::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id)
}
void MsgDBProviderToPolicy::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id)
}
::std::string* MsgDBProviderToPolicy::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgDBProviderToPolicy::release_traffic_id() {
  // @@protoc_insertion_point(field_release:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDBProviderToPolicy::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.traffic_id)
}

// uint32 action_taken = 30;
void MsgDBProviderToPolicy::clear_action_taken() {
  action_taken_ = 0u;
}
::google::protobuf::uint32 MsgDBProviderToPolicy::action_taken() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.action_taken)
  return action_taken_;
}
void MsgDBProviderToPolicy::set_action_taken(::google::protobuf::uint32 value) {
  
  action_taken_ = value;
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.action_taken)
}

// uint32 msg_id = 40;
void MsgDBProviderToPolicy::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 MsgDBProviderToPolicy::msg_id() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.msg_id)
  return msg_id_;
}
void MsgDBProviderToPolicy::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.msg_id)
}

// uint32 log_type = 50;
void MsgDBProviderToPolicy::clear_log_type() {
  log_type_ = 0u;
}
::google::protobuf::uint32 MsgDBProviderToPolicy::log_type() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.log_type)
  return log_type_;
}
void MsgDBProviderToPolicy::set_log_type(::google::protobuf::uint32 value) {
  
  log_type_ = value;
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.log_type)
}

// string encry_key = 60;
void MsgDBProviderToPolicy::clear_encry_key() {
  encry_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgDBProviderToPolicy::encry_key() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key)
  return encry_key_.GetNoArena();
}
void MsgDBProviderToPolicy::set_encry_key(const ::std::string& value) {
  
  encry_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key)
}
#if LANG_CXX11
void MsgDBProviderToPolicy::set_encry_key(::std::string&& value) {
  
  encry_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key)
}
#endif
void MsgDBProviderToPolicy::set_encry_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encry_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key)
}
void MsgDBProviderToPolicy::set_encry_key(const char* value, size_t size) {
  
  encry_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key)
}
::std::string* MsgDBProviderToPolicy::mutable_encry_key() {
  
  // @@protoc_insertion_point(field_mutable:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key)
  return encry_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgDBProviderToPolicy::release_encry_key() {
  // @@protoc_insertion_point(field_release:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key)
  
  return encry_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDBProviderToPolicy::set_allocated_encry_key(::std::string* encry_key) {
  if (encry_key != NULL) {
    
  } else {
    
  }
  encry_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encry_key);
  // @@protoc_insertion_point(field_set_allocated:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_key)
}

// string encry_value = 70;
void MsgDBProviderToPolicy::clear_encry_value() {
  encry_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgDBProviderToPolicy::encry_value() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value)
  return encry_value_.GetNoArena();
}
void MsgDBProviderToPolicy::set_encry_value(const ::std::string& value) {
  
  encry_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value)
}
#if LANG_CXX11
void MsgDBProviderToPolicy::set_encry_value(::std::string&& value) {
  
  encry_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value)
}
#endif
void MsgDBProviderToPolicy::set_encry_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encry_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value)
}
void MsgDBProviderToPolicy::set_encry_value(const char* value, size_t size) {
  
  encry_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value)
}
::std::string* MsgDBProviderToPolicy::mutable_encry_value() {
  
  // @@protoc_insertion_point(field_mutable:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value)
  return encry_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgDBProviderToPolicy::release_encry_value() {
  // @@protoc_insertion_point(field_release:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value)
  
  return encry_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDBProviderToPolicy::set_allocated_encry_value(::std::string* encry_value) {
  if (encry_value != NULL) {
    
  } else {
    
  }
  encry_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encry_value);
  // @@protoc_insertion_point(field_set_allocated:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_value)
}

// string encry_text = 80;
void MsgDBProviderToPolicy::clear_encry_text() {
  encry_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgDBProviderToPolicy::encry_text() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text)
  return encry_text_.GetNoArena();
}
void MsgDBProviderToPolicy::set_encry_text(const ::std::string& value) {
  
  encry_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text)
}
#if LANG_CXX11
void MsgDBProviderToPolicy::set_encry_text(::std::string&& value) {
  
  encry_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text)
}
#endif
void MsgDBProviderToPolicy::set_encry_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encry_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text)
}
void MsgDBProviderToPolicy::set_encry_text(const char* value, size_t size) {
  
  encry_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text)
}
::std::string* MsgDBProviderToPolicy::mutable_encry_text() {
  
  // @@protoc_insertion_point(field_mutable:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text)
  return encry_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgDBProviderToPolicy::release_encry_text() {
  // @@protoc_insertion_point(field_release:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text)
  
  return encry_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDBProviderToPolicy::set_allocated_encry_text(::std::string* encry_text) {
  if (encry_text != NULL) {
    
  } else {
    
  }
  encry_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encry_text);
  // @@protoc_insertion_point(field_set_allocated:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.encry_text)
}

// string csp_name = 90;
void MsgDBProviderToPolicy::clear_csp_name() {
  csp_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgDBProviderToPolicy::csp_name() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name)
  return csp_name_.GetNoArena();
}
void MsgDBProviderToPolicy::set_csp_name(const ::std::string& value) {
  
  csp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name)
}
#if LANG_CXX11
void MsgDBProviderToPolicy::set_csp_name(::std::string&& value) {
  
  csp_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name)
}
#endif
void MsgDBProviderToPolicy::set_csp_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  csp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name)
}
void MsgDBProviderToPolicy::set_csp_name(const char* value, size_t size) {
  
  csp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name)
}
::std::string* MsgDBProviderToPolicy::mutable_csp_name() {
  
  // @@protoc_insertion_point(field_mutable:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name)
  return csp_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgDBProviderToPolicy::release_csp_name() {
  // @@protoc_insertion_point(field_release:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name)
  
  return csp_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgDBProviderToPolicy::set_allocated_csp_name(::std::string* csp_name) {
  if (csp_name != NULL) {
    
  } else {
    
  }
  csp_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_name);
  // @@protoc_insertion_point(field_set_allocated:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.csp_name)
}

// uint32 enable_encry = 100;
void MsgDBProviderToPolicy::clear_enable_encry() {
  enable_encry_ = 0u;
}
::google::protobuf::uint32 MsgDBProviderToPolicy::enable_encry() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.enable_encry)
  return enable_encry_;
}
void MsgDBProviderToPolicy::set_enable_encry(::google::protobuf::uint32 value) {
  
  enable_encry_ = value;
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.enable_encry)
}

// uint64 user_id = 110;
void MsgDBProviderToPolicy::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MsgDBProviderToPolicy::user_id() const {
  // @@protoc_insertion_point(field_get:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.user_id)
  return user_id_;
}
void MsgDBProviderToPolicy::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.policy.msgdbprovidertopolicy.MsgDBProviderToPolicy.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgdbprovidertopolicy
}  // namespace policy
}  // namespace com

// @@protoc_insertion_point(global_scope)
