// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encryptServiceLog.proto

#ifndef PROTOBUF_encryptServiceLog_2eproto__INCLUDED
#define PROTOBUF_encryptServiceLog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace com {
namespace cloudscreen {
namespace log {
class EncryptServiceLog;
class EncryptServiceLogDefaultTypeInternal;
extern EncryptServiceLogDefaultTypeInternal _EncryptServiceLog_default_instance_;
}  // namespace log
}  // namespace cloudscreen
}  // namespace com

namespace com {
namespace cloudscreen {
namespace log {

namespace protobuf_encryptServiceLog_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_encryptServiceLog_2eproto

// ===================================================================

class EncryptServiceLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.cloudscreen.log.EncryptServiceLog) */ {
 public:
  EncryptServiceLog();
  virtual ~EncryptServiceLog();

  EncryptServiceLog(const EncryptServiceLog& from);

  inline EncryptServiceLog& operator=(const EncryptServiceLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncryptServiceLog(EncryptServiceLog&& from) noexcept
    : EncryptServiceLog() {
    *this = ::std::move(from);
  }

  inline EncryptServiceLog& operator=(EncryptServiceLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncryptServiceLog& default_instance();

  static inline const EncryptServiceLog* internal_default_instance() {
    return reinterpret_cast<const EncryptServiceLog*>(
               &_EncryptServiceLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EncryptServiceLog* other);
  friend void swap(EncryptServiceLog& a, EncryptServiceLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncryptServiceLog* New() const PROTOBUF_FINAL { return New(NULL); }

  EncryptServiceLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EncryptServiceLog& from);
  void MergeFrom(const EncryptServiceLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EncryptServiceLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string csp_product_name = 30;
  void clear_csp_product_name();
  static const int kCspProductNameFieldNumber = 30;
  const ::std::string& csp_product_name() const;
  void set_csp_product_name(const ::std::string& value);
  #if LANG_CXX11
  void set_csp_product_name(::std::string&& value);
  #endif
  void set_csp_product_name(const char* value);
  void set_csp_product_name(const char* value, size_t size);
  ::std::string* mutable_csp_product_name();
  ::std::string* release_csp_product_name();
  void set_allocated_csp_product_name(::std::string* csp_product_name);

  // string session_id = 40;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 40;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string traffic_id = 50;
  void clear_traffic_id();
  static const int kTrafficIdFieldNumber = 50;
  const ::std::string& traffic_id() const;
  void set_traffic_id(const ::std::string& value);
  #if LANG_CXX11
  void set_traffic_id(::std::string&& value);
  #endif
  void set_traffic_id(const char* value);
  void set_traffic_id(const char* value, size_t size);
  ::std::string* mutable_traffic_id();
  ::std::string* release_traffic_id();
  void set_allocated_traffic_id(::std::string* traffic_id);

  // string trigger_time = 80;
  void clear_trigger_time();
  static const int kTriggerTimeFieldNumber = 80;
  const ::std::string& trigger_time() const;
  void set_trigger_time(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_time(::std::string&& value);
  #endif
  void set_trigger_time(const char* value);
  void set_trigger_time(const char* value, size_t size);
  ::std::string* mutable_trigger_time();
  ::std::string* release_trigger_time();
  void set_allocated_trigger_time(::std::string* trigger_time);

  // string trigger_reason = 90;
  void clear_trigger_reason();
  static const int kTriggerReasonFieldNumber = 90;
  const ::std::string& trigger_reason() const;
  void set_trigger_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_trigger_reason(::std::string&& value);
  #endif
  void set_trigger_reason(const char* value);
  void set_trigger_reason(const char* value, size_t size);
  ::std::string* mutable_trigger_reason();
  ::std::string* release_trigger_reason();
  void set_allocated_trigger_reason(::std::string* trigger_reason);

  // string file_name = 110;
  void clear_file_name();
  static const int kFileNameFieldNumber = 110;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string comment = 130;
  void clear_comment();
  static const int kCommentFieldNumber = 130;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // uint64 device_activity_id = 10;
  void clear_device_activity_id();
  static const int kDeviceActivityIdFieldNumber = 10;
  ::google::protobuf::uint64 device_activity_id() const;
  void set_device_activity_id(::google::protobuf::uint64 value);

  // uint64 csp_product_id = 20;
  void clear_csp_product_id();
  static const int kCspProductIdFieldNumber = 20;
  ::google::protobuf::uint64 csp_product_id() const;
  void set_csp_product_id(::google::protobuf::uint64 value);

  // uint64 enterprise_id = 60;
  void clear_enterprise_id();
  static const int kEnterpriseIdFieldNumber = 60;
  ::google::protobuf::uint64 enterprise_id() const;
  void set_enterprise_id(::google::protobuf::uint64 value);

  // uint64 user_id = 70;
  void clear_user_id();
  static const int kUserIdFieldNumber = 70;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // uint32 is_succeed = 100;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 100;
  ::google::protobuf::uint32 is_succeed() const;
  void set_is_succeed(::google::protobuf::uint32 value);

  // uint32 action_type = 120;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 120;
  ::google::protobuf::uint32 action_type() const;
  void set_action_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cloudscreen.log.EncryptServiceLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr csp_product_name_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr traffic_id_;
  ::google::protobuf::internal::ArenaStringPtr trigger_time_;
  ::google::protobuf::internal::ArenaStringPtr trigger_reason_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::uint64 device_activity_id_;
  ::google::protobuf::uint64 csp_product_id_;
  ::google::protobuf::uint64 enterprise_id_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 is_succeed_;
  ::google::protobuf::uint32 action_type_;
  mutable int _cached_size_;
  friend struct protobuf_encryptServiceLog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptServiceLog

// uint64 device_activity_id = 10;
inline void EncryptServiceLog::clear_device_activity_id() {
  device_activity_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EncryptServiceLog::device_activity_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
  return device_activity_id_;
}
inline void EncryptServiceLog::set_device_activity_id(::google::protobuf::uint64 value) {
  
  device_activity_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
}

// uint64 csp_product_id = 20;
inline void EncryptServiceLog::clear_csp_product_id() {
  csp_product_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EncryptServiceLog::csp_product_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
  return csp_product_id_;
}
inline void EncryptServiceLog::set_csp_product_id(::google::protobuf::uint64 value) {
  
  csp_product_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
}

// string csp_product_name = 30;
inline void EncryptServiceLog::clear_csp_product_name() {
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncryptServiceLog::csp_product_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
  return csp_product_name_.GetNoArena();
}
inline void EncryptServiceLog::set_csp_product_name(const ::std::string& value) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}
#if LANG_CXX11
inline void EncryptServiceLog::set_csp_product_name(::std::string&& value) {
  
  csp_product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}
#endif
inline void EncryptServiceLog::set_csp_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}
inline void EncryptServiceLog::set_csp_product_name(const char* value, size_t size) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}
inline ::std::string* EncryptServiceLog::mutable_csp_product_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptServiceLog::release_csp_product_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
  
  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptServiceLog::set_allocated_csp_product_name(::std::string* csp_product_name) {
  if (csp_product_name != NULL) {
    
  } else {
    
  }
  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}

// string session_id = 40;
inline void EncryptServiceLog::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncryptServiceLog::session_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.session_id)
  return session_id_.GetNoArena();
}
inline void EncryptServiceLog::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.session_id)
}
#if LANG_CXX11
inline void EncryptServiceLog::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.session_id)
}
#endif
inline void EncryptServiceLog::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.session_id)
}
inline void EncryptServiceLog::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.session_id)
}
inline ::std::string* EncryptServiceLog::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptServiceLog::release_session_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptServiceLog::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.session_id)
}

// string traffic_id = 50;
inline void EncryptServiceLog::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncryptServiceLog::traffic_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.traffic_id)
  return traffic_id_.GetNoArena();
}
inline void EncryptServiceLog::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}
#if LANG_CXX11
inline void EncryptServiceLog::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}
#endif
inline void EncryptServiceLog::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}
inline void EncryptServiceLog::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}
inline ::std::string* EncryptServiceLog::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptServiceLog::release_traffic_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptServiceLog::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}

// uint64 enterprise_id = 60;
inline void EncryptServiceLog::clear_enterprise_id() {
  enterprise_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EncryptServiceLog::enterprise_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
  return enterprise_id_;
}
inline void EncryptServiceLog::set_enterprise_id(::google::protobuf::uint64 value) {
  
  enterprise_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
}

// uint64 user_id = 70;
inline void EncryptServiceLog::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EncryptServiceLog::user_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.user_id)
  return user_id_;
}
inline void EncryptServiceLog::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.user_id)
}

// string trigger_time = 80;
inline void EncryptServiceLog::clear_trigger_time() {
  trigger_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncryptServiceLog::trigger_time() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  return trigger_time_.GetNoArena();
}
inline void EncryptServiceLog::set_trigger_time(const ::std::string& value) {
  
  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}
#if LANG_CXX11
inline void EncryptServiceLog::set_trigger_time(::std::string&& value) {
  
  trigger_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}
#endif
inline void EncryptServiceLog::set_trigger_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}
inline void EncryptServiceLog::set_trigger_time(const char* value, size_t size) {
  
  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}
inline ::std::string* EncryptServiceLog::mutable_trigger_time() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  return trigger_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptServiceLog::release_trigger_time() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  
  return trigger_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptServiceLog::set_allocated_trigger_time(::std::string* trigger_time) {
  if (trigger_time != NULL) {
    
  } else {
    
  }
  trigger_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_time);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}

// string trigger_reason = 90;
inline void EncryptServiceLog::clear_trigger_reason() {
  trigger_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncryptServiceLog::trigger_reason() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  return trigger_reason_.GetNoArena();
}
inline void EncryptServiceLog::set_trigger_reason(const ::std::string& value) {
  
  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}
#if LANG_CXX11
inline void EncryptServiceLog::set_trigger_reason(::std::string&& value) {
  
  trigger_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}
#endif
inline void EncryptServiceLog::set_trigger_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}
inline void EncryptServiceLog::set_trigger_reason(const char* value, size_t size) {
  
  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}
inline ::std::string* EncryptServiceLog::mutable_trigger_reason() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  return trigger_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptServiceLog::release_trigger_reason() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  
  return trigger_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptServiceLog::set_allocated_trigger_reason(::std::string* trigger_reason) {
  if (trigger_reason != NULL) {
    
  } else {
    
  }
  trigger_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_reason);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}

// uint32 is_succeed = 100;
inline void EncryptServiceLog::clear_is_succeed() {
  is_succeed_ = 0u;
}
inline ::google::protobuf::uint32 EncryptServiceLog::is_succeed() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.is_succeed)
  return is_succeed_;
}
inline void EncryptServiceLog::set_is_succeed(::google::protobuf::uint32 value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.is_succeed)
}

// string file_name = 110;
inline void EncryptServiceLog::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncryptServiceLog::file_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.file_name)
  return file_name_.GetNoArena();
}
inline void EncryptServiceLog::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.file_name)
}
#if LANG_CXX11
inline void EncryptServiceLog::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.file_name)
}
#endif
inline void EncryptServiceLog::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.file_name)
}
inline void EncryptServiceLog::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.file_name)
}
inline ::std::string* EncryptServiceLog::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptServiceLog::release_file_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptServiceLog::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.file_name)
}

// uint32 action_type = 120;
inline void EncryptServiceLog::clear_action_type() {
  action_type_ = 0u;
}
inline ::google::protobuf::uint32 EncryptServiceLog::action_type() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.action_type)
  return action_type_;
}
inline void EncryptServiceLog::set_action_type(::google::protobuf::uint32 value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.action_type)
}

// string comment = 130;
inline void EncryptServiceLog::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncryptServiceLog::comment() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.comment)
  return comment_.GetNoArena();
}
inline void EncryptServiceLog::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.comment)
}
#if LANG_CXX11
inline void EncryptServiceLog::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.comment)
}
#endif
inline void EncryptServiceLog::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.comment)
}
inline void EncryptServiceLog::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.comment)
}
inline ::std::string* EncryptServiceLog::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptServiceLog::release_comment() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptServiceLog::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.comment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace log
}  // namespace cloudscreen
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_encryptServiceLog_2eproto__INCLUDED
