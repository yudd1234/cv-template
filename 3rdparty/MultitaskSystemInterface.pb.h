// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultitaskSystemInterface.proto

#ifndef PROTOBUF_MultitaskSystemInterface_2eproto__INCLUDED
#define PROTOBUF_MultitaskSystemInterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace com {
namespace mutitasksystem {
namespace interface {
class MsgMutiTaskSystemIF;
class MsgMutiTaskSystemIFDefaultTypeInternal;
extern MsgMutiTaskSystemIFDefaultTypeInternal _MsgMutiTaskSystemIF_default_instance_;
class MsgMutiTaskSystemKeepalive;
class MsgMutiTaskSystemKeepaliveDefaultTypeInternal;
extern MsgMutiTaskSystemKeepaliveDefaultTypeInternal _MsgMutiTaskSystemKeepalive_default_instance_;
}  // namespace interface
}  // namespace mutitasksystem
}  // namespace com

namespace com {
namespace mutitasksystem {
namespace interface {

namespace protobuf_MultitaskSystemInterface_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_MultitaskSystemInterface_2eproto

// ===================================================================

class MsgMutiTaskSystemKeepalive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive) */ {
 public:
  MsgMutiTaskSystemKeepalive();
  virtual ~MsgMutiTaskSystemKeepalive();

  MsgMutiTaskSystemKeepalive(const MsgMutiTaskSystemKeepalive& from);

  inline MsgMutiTaskSystemKeepalive& operator=(const MsgMutiTaskSystemKeepalive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgMutiTaskSystemKeepalive(MsgMutiTaskSystemKeepalive&& from) noexcept
    : MsgMutiTaskSystemKeepalive() {
    *this = ::std::move(from);
  }

  inline MsgMutiTaskSystemKeepalive& operator=(MsgMutiTaskSystemKeepalive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgMutiTaskSystemKeepalive& default_instance();

  static inline const MsgMutiTaskSystemKeepalive* internal_default_instance() {
    return reinterpret_cast<const MsgMutiTaskSystemKeepalive*>(
               &_MsgMutiTaskSystemKeepalive_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MsgMutiTaskSystemKeepalive* other);
  friend void swap(MsgMutiTaskSystemKeepalive& a, MsgMutiTaskSystemKeepalive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgMutiTaskSystemKeepalive* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgMutiTaskSystemKeepalive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgMutiTaskSystemKeepalive& from);
  void MergeFrom(const MsgMutiTaskSystemKeepalive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgMutiTaskSystemKeepalive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dataport = 30;
  void clear_dataport();
  static const int kDataportFieldNumber = 30;
  ::google::protobuf::uint32 dataport() const;
  void set_dataport(::google::protobuf::uint32 value);

  // uint32 capability = 10;
  void clear_capability();
  static const int kCapabilityFieldNumber = 10;
  ::google::protobuf::uint32 capability() const;
  void set_capability(::google::protobuf::uint32 value);

  // uint32 keepalive = 20;
  void clear_keepalive();
  static const int kKeepaliveFieldNumber = 20;
  ::google::protobuf::uint32 keepalive() const;
  void set_keepalive(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dataport_;
  ::google::protobuf::uint32 capability_;
  ::google::protobuf::uint32 keepalive_;
  mutable int _cached_size_;
  friend struct protobuf_MultitaskSystemInterface_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgMutiTaskSystemIF : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.mutitasksystem.interface.MsgMutiTaskSystemIF) */ {
 public:
  MsgMutiTaskSystemIF();
  virtual ~MsgMutiTaskSystemIF();

  MsgMutiTaskSystemIF(const MsgMutiTaskSystemIF& from);

  inline MsgMutiTaskSystemIF& operator=(const MsgMutiTaskSystemIF& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgMutiTaskSystemIF(MsgMutiTaskSystemIF&& from) noexcept
    : MsgMutiTaskSystemIF() {
    *this = ::std::move(from);
  }

  inline MsgMutiTaskSystemIF& operator=(MsgMutiTaskSystemIF&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgMutiTaskSystemIF& default_instance();

  static inline const MsgMutiTaskSystemIF* internal_default_instance() {
    return reinterpret_cast<const MsgMutiTaskSystemIF*>(
               &_MsgMutiTaskSystemIF_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MsgMutiTaskSystemIF* other);
  friend void swap(MsgMutiTaskSystemIF& a, MsgMutiTaskSystemIF& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgMutiTaskSystemIF* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgMutiTaskSystemIF* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgMutiTaskSystemIF& from);
  void MergeFrom(const MsgMutiTaskSystemIF& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgMutiTaskSystemIF* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string task_data = 20;
  void clear_task_data();
  static const int kTaskDataFieldNumber = 20;
  const ::std::string& task_data() const;
  void set_task_data(const ::std::string& value);
  #if LANG_CXX11
  void set_task_data(::std::string&& value);
  #endif
  void set_task_data(const char* value);
  void set_task_data(const char* value, size_t size);
  ::std::string* mutable_task_data();
  ::std::string* release_task_data();
  void set_allocated_task_data(::std::string* task_data);

  // uint32 msg_id = 10;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 10;
  ::google::protobuf::uint32 msg_id() const;
  void set_msg_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mutitasksystem.interface.MsgMutiTaskSystemIF)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_data_;
  ::google::protobuf::uint32 msg_id_;
  mutable int _cached_size_;
  friend struct protobuf_MultitaskSystemInterface_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgMutiTaskSystemKeepalive

// uint32 capability = 10;
inline void MsgMutiTaskSystemKeepalive::clear_capability() {
  capability_ = 0u;
}
inline ::google::protobuf::uint32 MsgMutiTaskSystemKeepalive::capability() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.capability)
  return capability_;
}
inline void MsgMutiTaskSystemKeepalive::set_capability(::google::protobuf::uint32 value) {
  
  capability_ = value;
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.capability)
}

// uint32 keepalive = 20;
inline void MsgMutiTaskSystemKeepalive::clear_keepalive() {
  keepalive_ = 0u;
}
inline ::google::protobuf::uint32 MsgMutiTaskSystemKeepalive::keepalive() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.keepalive)
  return keepalive_;
}
inline void MsgMutiTaskSystemKeepalive::set_keepalive(::google::protobuf::uint32 value) {
  
  keepalive_ = value;
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.keepalive)
}

// uint32 dataport = 30;
inline void MsgMutiTaskSystemKeepalive::clear_dataport() {
  dataport_ = 0u;
}
inline ::google::protobuf::uint32 MsgMutiTaskSystemKeepalive::dataport() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.dataport)
  return dataport_;
}
inline void MsgMutiTaskSystemKeepalive::set_dataport(::google::protobuf::uint32 value) {
  
  dataport_ = value;
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemKeepalive.dataport)
}

// -------------------------------------------------------------------

// MsgMutiTaskSystemIF

// uint32 msg_id = 10;
inline void MsgMutiTaskSystemIF::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::google::protobuf::uint32 MsgMutiTaskSystemIF::msg_id() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemIF.msg_id)
  return msg_id_;
}
inline void MsgMutiTaskSystemIF::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemIF.msg_id)
}

// string task_data = 20;
inline void MsgMutiTaskSystemIF::clear_task_data() {
  task_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgMutiTaskSystemIF::task_data() const {
  // @@protoc_insertion_point(field_get:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
  return task_data_.GetNoArena();
}
inline void MsgMutiTaskSystemIF::set_task_data(const ::std::string& value) {
  
  task_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}
#if LANG_CXX11
inline void MsgMutiTaskSystemIF::set_task_data(::std::string&& value) {
  
  task_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}
#endif
inline void MsgMutiTaskSystemIF::set_task_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}
inline void MsgMutiTaskSystemIF::set_task_data(const char* value, size_t size) {
  
  task_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}
inline ::std::string* MsgMutiTaskSystemIF::mutable_task_data() {
  
  // @@protoc_insertion_point(field_mutable:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
  return task_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgMutiTaskSystemIF::release_task_data() {
  // @@protoc_insertion_point(field_release:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
  
  return task_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgMutiTaskSystemIF::set_allocated_task_data(::std::string* task_data) {
  if (task_data != NULL) {
    
  } else {
    
  }
  task_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_data);
  // @@protoc_insertion_point(field_set_allocated:com.mutitasksystem.interface.MsgMutiTaskSystemIF.task_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace interface
}  // namespace mutitasksystem
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MultitaskSystemInterface_2eproto__INCLUDED
