
  
    
    }
  }
// ===================================================================
// -------------------------------------------------------------------
}
};
    0;
    1;
    2;
    3;
  // accessors -------------------------------------------------------
    a.Swap(&b);
  attachment_size_ = 0u;
  attachment_size_ = value;
  authentication_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authentication_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authentication_data);
  authentication_data_.SetNoArena(
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  bool has_chuck_info() const;
  bool has_request() const;
  bool has_response() const;
  bool IsInitialized() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
bool RpcMeta_CompressType_IsValid(int value);
  // bytes authentication_data = 7;
// bytes authentication_data = 7;
  chuck_info_ = chuck_info;
    chuck_info_ = new ::RpcMetaMsg::RpcChunkInfo;
  chuck_info_ = NULL;
  chunk_id_ = GOOGLE_ULONGLONG(0);
  chunk_id_ = value;
class RpcChunkInfo;
class RpcChunkInfoDefaultTypeInternal;
class RpcChunkInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RpcMetaMsg.RpcChunkInfo) */ {
class RpcMeta;
class RpcMetaDefaultTypeInternal;
class RpcMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RpcMetaMsg.RpcMeta) */ {
class RpcRequestMeta;
class RpcRequestMetaDefaultTypeInternal;
class RpcRequestMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RpcMetaMsg.RpcRequestMeta) */ {
class RpcResponseMeta;
class RpcResponseMetaDefaultTypeInternal;
class RpcResponseMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RpcMetaMsg.RpcResponseMeta) */ {
  compress_type_ = 0;
  CompressType_descriptor() {
  compress_type_ = value;
      CompressType* value) {
const ::google::protobuf::EnumDescriptor* RpcMeta_CompressType_descriptor();
const int RpcMeta_CompressType_CompressType_ARRAYSIZE = RpcMeta_CompressType_CompressType_MAX + 1;
const RpcMeta_CompressType RpcMeta_CompressType_CompressType_MAX = RpcMeta_CompressType_COMPRESS_GZIP;
const RpcMeta_CompressType RpcMeta_CompressType_CompressType_MIN = RpcMeta_CompressType_COMPRESS_NO;
  const ::RpcMetaMsg::RpcChunkInfo& chuck_info() const;
  const ::RpcMetaMsg::RpcChunkInfo* p = chuck_info_;
  const ::RpcMetaMsg::RpcRequestMeta* p = request_;
  const ::RpcMetaMsg::RpcRequestMeta& request() const;
  const ::RpcMetaMsg::RpcResponseMeta* p = response_;
  const ::RpcMetaMsg::RpcResponseMeta& response() const;
  const ::std::string& authentication_data() const;
  const ::std::string& method_name() const;
    const ::std::string& name, RpcMeta_CompressType* value) {
  const ::std::string& service_name() const;
  const ::std::string& status_text() const;
      CopyFrom(from);
    CopyFrom(from);
  correlation_id_ = GOOGLE_ULONGLONG(0);
  correlation_id_ = value;
#define _3RDPROTO_H_
#define PROTOBUF_RpcMeta_2eproto__INCLUDED
  delete chuck_info_;
  delete request_;
  delete response_;
    } else {
  } else {
  #endif
#endif
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_RpcMeta_2eproto__INCLUDED
enum RpcMeta_CompressType {
#error incompatible with your Protocol Buffer headers.  Please
#error incompatible with your Protocol Buffer headers.  Please update
#error regenerate this file with a newer version of protoc.
#error This file was generated by a newer version of protoc which is
#error This file was generated by an older version of protoc which is
#error your headers.
extern RpcChunkInfoDefaultTypeInternal _RpcChunkInfo_default_instance_;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
extern RpcRequestMetaDefaultTypeInternal _RpcRequestMeta_default_instance_;
extern RpcResponseMetaDefaultTypeInternal _RpcResponseMeta_default_instance_;
  friend struct protobuf_RpcMeta_2eproto::TableStruct;
  friend void swap(RpcChunkInfo& a, RpcChunkInfo& b) {
  friend void swap(RpcMeta& a, RpcMeta& b) {
  friend void swap(RpcRequestMeta& a, RpcRequestMeta& b) {
  friend void swap(RpcResponseMeta& a, RpcResponseMeta& b) {
// Generated by the protocol buffer compiler.  DO NOT EDIT!
  GOOGLE_DCHECK(value != NULL);
  ::google::protobuf::internal::ArenaStringPtr authentication_data_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr status_text_;
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;
  ::google::protobuf::uint32 attachment_size_;
  ::google::protobuf::uint32 attachment_size() const;
  ::google::protobuf::uint32 status_code_;
  ::google::protobuf::uint32 status_code() const;
  ::google::protobuf::uint64 chunk_id_;
  ::google::protobuf::uint64 chunk_id() const;
  ::google::protobuf::uint64 correlation_id_;
  ::google::protobuf::uint64 correlation_id() const;
  ::google::protobuf::uint64 log_id_;
  ::google::protobuf::uint64 log_id() const;
  ::google::protobuf::uint64 stream_id_;
  ::google::protobuf::uint64 stream_id() const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
  if (authentication_data != NULL) {
  if (chuck_info) {
  if (chuck_info_ == NULL) {
#ifdef __GNUC__
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
  if (GetArenaNoVirtual() == NULL && chuck_info_ != NULL) delete chuck_info_;
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
#if GOOGLE_PROTOBUF_VERSION < 3004000
  #if LANG_CXX11
#if LANG_CXX11
  if (method_name != NULL) {
#ifndef _3RDPROTO_H_
#ifndef PROTOBUF_RpcMeta_2eproto__INCLUDED
#if !PROTOBUF_INLINE_NOT_IN_HEADERS
  if (request) {
  if (request_ == NULL) {
  if (response) {
  if (response_ == NULL) {
  if (service_name != NULL) {
  if (status_text != NULL) {
      if (this != &from) InternalSwap(&from);
  // implements Message ----------------------------------------------
#include "3rdparty.h"
#include "cloudPolicy.pb.h"
#include "DBProviderServerAndClient.pb.h"
#include "DBProviderToPolicy.pb.h"
#include "device_activity.pb.h"
#include "EncOptvsCtl.pb.h"
#include "encryptServiceLog.pb.h"
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/unknown_field_set.h>
#include "MultitaskSystemInterface.pb.h"
#include "policyToDBProvider.pb.h"
#include "PolicyVSCtlInteraction.pb.h"
#include "PolicyVSMdmInteraction.pb.h"
#include "RpcMeta.pb.h"
#include <string>
inline bool RpcMeta_CompressType_Parse(
inline bool RpcMeta::has_chuck_info() const {
inline bool RpcMeta::has_request() const {
inline bool RpcMeta::has_response() const {
inline const EnumDescriptor* GetEnumDescriptor< ::RpcMetaMsg::RpcMeta_CompressType>() {
inline const ::RpcMetaMsg::RpcChunkInfo& RpcMeta::chuck_info() const {
inline const ::RpcMetaMsg::RpcRequestMeta& RpcMeta::request() const {
inline const ::RpcMetaMsg::RpcResponseMeta& RpcMeta::response() const {
inline const ::std::string& RpcMeta::authentication_data() const {
inline const ::std::string& RpcMeta_CompressType_Name(RpcMeta_CompressType value) {
inline const ::std::string& RpcRequestMeta::method_name() const {
inline const ::std::string& RpcRequestMeta::service_name() const {
inline const ::std::string& RpcResponseMeta::status_text() const {
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
inline ::google::protobuf::uint32 RpcMeta::attachment_size() const {
inline ::google::protobuf::uint32 RpcResponseMeta::status_code() const {
inline ::google::protobuf::uint64 RpcChunkInfo::chunk_id() const {
inline ::google::protobuf::uint64 RpcChunkInfo::stream_id() const {
inline ::google::protobuf::uint64 RpcMeta::correlation_id() const {
inline ::google::protobuf::uint64 RpcRequestMeta::log_id() const {
  inline RpcChunkInfo* New() const PROTOBUF_FINAL { return New(NULL); }
  inline RpcChunkInfo& operator=(const RpcChunkInfo& from) {
  inline RpcChunkInfo& operator=(RpcChunkInfo&& from) noexcept {
inline ::RpcMetaMsg::RpcChunkInfo* RpcMeta::mutable_chuck_info() {
inline ::RpcMetaMsg::RpcChunkInfo* RpcMeta::release_chuck_info() {
inline ::RpcMetaMsg::RpcMeta_CompressType RpcMeta::compress_type() const {
inline ::RpcMetaMsg::RpcRequestMeta* RpcMeta::mutable_request() {
inline ::RpcMetaMsg::RpcRequestMeta* RpcMeta::release_request() {
inline ::RpcMetaMsg::RpcResponseMeta* RpcMeta::mutable_response() {
inline ::RpcMetaMsg::RpcResponseMeta* RpcMeta::release_response() {
  inline RpcMeta* New() const PROTOBUF_FINAL { return New(NULL); }
  inline RpcMeta& operator=(const RpcMeta& from) {
  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
  inline RpcRequestMeta* New() const PROTOBUF_FINAL { return New(NULL); }
  inline RpcRequestMeta& operator=(const RpcRequestMeta& from) {
  inline RpcRequestMeta& operator=(RpcRequestMeta&& from) noexcept {
  inline RpcResponseMeta* New() const PROTOBUF_FINAL { return New(NULL); }
  inline RpcResponseMeta& operator=(const RpcResponseMeta& from) {
  inline RpcResponseMeta& operator=(RpcResponseMeta&& from) noexcept {
inline ::std::string* RpcMeta::mutable_authentication_data() {
inline ::std::string* RpcMeta::release_authentication_data() {
inline ::std::string* RpcRequestMeta::mutable_method_name() {
inline ::std::string* RpcRequestMeta::mutable_service_name() {
inline ::std::string* RpcRequestMeta::release_method_name() {
inline ::std::string* RpcRequestMeta::release_service_name() {
inline ::std::string* RpcResponseMeta::mutable_status_text() {
inline ::std::string* RpcResponseMeta::release_status_text() {
  inline void* MaybeArenaPtr() const {
inline void RpcChunkInfo::clear_chunk_id() {
inline void RpcChunkInfo::clear_stream_id() {
inline void RpcChunkInfo::set_chunk_id(::google::protobuf::uint64 value) {
inline void RpcChunkInfo::set_stream_id(::google::protobuf::uint64 value) {
inline void RpcMeta::clear_attachment_size() {
inline void RpcMeta::clear_authentication_data() {
inline void RpcMeta::clear_chuck_info() {
inline void RpcMeta::clear_compress_type() {
inline void RpcMeta::clear_correlation_id() {
inline void RpcMeta::clear_request() {
inline void RpcMeta::clear_response() {
inline void RpcMeta::set_allocated_authentication_data(::std::string* authentication_data) {
inline void RpcMeta::set_allocated_chuck_info(::RpcMetaMsg::RpcChunkInfo* chuck_info) {
inline void RpcMeta::set_allocated_request(::RpcMetaMsg::RpcRequestMeta* request) {
inline void RpcMeta::set_allocated_response(::RpcMetaMsg::RpcResponseMeta* response) {
inline void RpcMeta::set_attachment_size(::google::protobuf::uint32 value) {
inline void RpcMeta::set_authentication_data(const char* value) {
inline void RpcMeta::set_authentication_data(const ::std::string& value) {
inline void RpcMeta::set_authentication_data(const void* value, size_t size) {
inline void RpcMeta::set_authentication_data(::std::string&& value) {
inline void RpcMeta::set_compress_type(::RpcMetaMsg::RpcMeta_CompressType value) {
inline void RpcMeta::set_correlation_id(::google::protobuf::uint64 value) {
inline void RpcRequestMeta::clear_log_id() {
inline void RpcRequestMeta::clear_method_name() {
inline void RpcRequestMeta::clear_service_name() {
inline void RpcRequestMeta::set_allocated_method_name(::std::string* method_name) {
inline void RpcRequestMeta::set_allocated_service_name(::std::string* service_name) {
inline void RpcRequestMeta::set_log_id(::google::protobuf::uint64 value) {
inline void RpcRequestMeta::set_method_name(const char* value) {
inline void RpcRequestMeta::set_method_name(const char* value, size_t size) {
inline void RpcRequestMeta::set_method_name(const ::std::string& value) {
inline void RpcRequestMeta::set_method_name(::std::string&& value) {
inline void RpcRequestMeta::set_service_name(const char* value) {
inline void RpcRequestMeta::set_service_name(const char* value, size_t size) {
inline void RpcRequestMeta::set_service_name(const ::std::string& value) {
inline void RpcRequestMeta::set_service_name(::std::string&& value) {
inline void RpcResponseMeta::clear_status_code() {
inline void RpcResponseMeta::clear_status_text() {
inline void RpcResponseMeta::set_allocated_status_text(::std::string* status_text) {
inline void RpcResponseMeta::set_status_code(::google::protobuf::uint32 value) {
inline void RpcResponseMeta::set_status_text(const char* value) {
inline void RpcResponseMeta::set_status_text(const char* value, size_t size) {
inline void RpcResponseMeta::set_status_text(const ::std::string& value) {
inline void RpcResponseMeta::set_status_text(::std::string&& value) {
  int compress_type_;
// Internal implementation detail -- do not call these.
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  log_id_ = GOOGLE_ULONGLONG(0);
  log_id_ = value;
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  method_name_.SetNoArena(
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  mutable int _cached_size_;
}  // namespace google
namespace google {
}  // namespace protobuf
namespace protobuf {
}  // namespace protobuf_RpcMeta_2eproto
namespace protobuf_RpcMeta_2eproto {
}  // namespace RpcMetaMsg
namespace RpcMetaMsg {
  // nested types ----------------------------------------------------
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
  #pragma GCC diagnostic pop
  #pragma GCC diagnostic push
  private:
 private:
  // @@protoc_insertion_point(class_scope:RpcMetaMsg.RpcChunkInfo)
  // @@protoc_insertion_point(class_scope:RpcMetaMsg.RpcMeta)
  // @@protoc_insertion_point(class_scope:RpcMetaMsg.RpcRequestMeta)
  // @@protoc_insertion_point(class_scope:RpcMetaMsg.RpcResponseMeta)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcChunkInfo.chunk_id)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcChunkInfo.stream_id)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.attachment_size)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.authentication_data)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.chuck_info)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.compress_type)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.correlation_id)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.request)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcMeta.response)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcRequestMeta.log_id)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcRequestMeta.method_name)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcRequestMeta.service_name)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcResponseMeta.status_code)
  // @@protoc_insertion_point(field_get:RpcMetaMsg.RpcResponseMeta.status_text)
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcMeta.authentication_data)
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcMeta.chuck_info)
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcMeta.request)
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcMeta.response)
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcRequestMeta.method_name)
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcRequestMeta.service_name)
  // @@protoc_insertion_point(field_mutable:RpcMetaMsg.RpcResponseMeta.status_text)
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcMeta.authentication_data)
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcMeta.chuck_info)
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcMeta.request)
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcMeta.response)
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcRequestMeta.method_name)
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcRequestMeta.service_name)
  // @@protoc_insertion_point(field_release:RpcMetaMsg.RpcResponseMeta.status_text)
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcMeta.authentication_data)
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcMeta.chuck_info)
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcMeta.request)
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcMeta.response)
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcRequestMeta.method_name)
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcRequestMeta.service_name)
  // @@protoc_insertion_point(field_set_allocated:RpcMetaMsg.RpcResponseMeta.status_text)
  // @@protoc_insertion_point(field_set_char:RpcMetaMsg.RpcMeta.authentication_data)
  // @@protoc_insertion_point(field_set_char:RpcMetaMsg.RpcRequestMeta.method_name)
  // @@protoc_insertion_point(field_set_char:RpcMetaMsg.RpcRequestMeta.service_name)
  // @@protoc_insertion_point(field_set_char:RpcMetaMsg.RpcResponseMeta.status_text)
  // @@protoc_insertion_point(field_set_pointer:RpcMetaMsg.RpcMeta.authentication_data)
  // @@protoc_insertion_point(field_set_pointer:RpcMetaMsg.RpcRequestMeta.method_name)
  // @@protoc_insertion_point(field_set_pointer:RpcMetaMsg.RpcRequestMeta.service_name)
  // @@protoc_insertion_point(field_set_pointer:RpcMetaMsg.RpcResponseMeta.status_text)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcChunkInfo.chunk_id)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcChunkInfo.stream_id)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcMeta.attachment_size)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcMeta.authentication_data)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcMeta.compress_type)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcMeta.correlation_id)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcRequestMeta.log_id)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcRequestMeta.method_name)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcRequestMeta.service_name)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcResponseMeta.status_code)
  // @@protoc_insertion_point(field_set:RpcMetaMsg.RpcResponseMeta.status_text)
  // @@protoc_insertion_point(field_set_rvalue:RpcMetaMsg.RpcMeta.authentication_data)
  // @@protoc_insertion_point(field_set_rvalue:RpcMetaMsg.RpcRequestMeta.method_name)
  // @@protoc_insertion_point(field_set_rvalue:RpcMetaMsg.RpcRequestMeta.service_name)
  // @@protoc_insertion_point(field_set_rvalue:RpcMetaMsg.RpcResponseMeta.status_text)
// @@protoc_insertion_point(global_scope)
// @@protoc_insertion_point(includes)
// @@protoc_insertion_point(namespace_scope)
  public:
 public:
    request_ = new ::RpcMetaMsg::RpcRequestMeta;
  request_ = NULL;
  request_ = request;
    response_ = new ::RpcMetaMsg::RpcResponseMeta;
  response_ = NULL;
  response_ = response;
  return attachment_size_;
  return authentication_data_.GetNoArena();
  return authentication_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return authentication_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return chuck_info_;
  return chunk_id_;
  return correlation_id_;
  return ::google::protobuf::internal::NameOfEnum(
  return ::google::protobuf::internal::ParseNamedEnum<RpcMeta_CompressType>(
  return log_id_;
  return method_name_.GetNoArena();
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return NULL;
  return p != NULL ? *p : *reinterpret_cast<const ::RpcMetaMsg::RpcChunkInfo*>(
  return p != NULL ? *p : *reinterpret_cast<const ::RpcMetaMsg::RpcRequestMeta*>(
  return p != NULL ? *p : *reinterpret_cast<const ::RpcMetaMsg::RpcResponseMeta*>(
    return reinterpret_cast<const RpcChunkInfo*>(
    return reinterpret_cast<const RpcMeta*>(
    return reinterpret_cast<const RpcRequestMeta*>(
    return reinterpret_cast<const RpcResponseMeta*>(
  return request_;
  return response_;
    return RpcMeta_CompressType_descriptor();
    return RpcMeta_CompressType_IsValid(value);
    return RpcMeta_CompressType_Name(value);
    return RpcMeta_CompressType_Parse(name, value);
  return ::RpcMetaMsg::RpcMeta_CompressType_descriptor();
  return service_name_.GetNoArena();
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return static_cast< ::RpcMetaMsg::RpcMeta_CompressType >(compress_type_);
  return status_code_;
  return status_text_.GetNoArena();
  return status_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return status_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return stream_id_;
  return temp;
    return *this;
  return this != internal_default_instance() && chuck_info_ != NULL;
  return this != internal_default_instance() && request_ != NULL;
  return this != internal_default_instance() && response_ != NULL;
    : RpcChunkInfo() {
  RpcChunkInfo();
// RpcChunkInfo
  RpcChunkInfo(const RpcChunkInfo& from);
               &_RpcChunkInfo_default_instance_);
  RpcChunkInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  RpcChunkInfo(RpcChunkInfo&& from) noexcept
    : RpcMeta() {
  RpcMeta();
// RpcMeta
    RpcMeta_CompressType_COMPRESS_GZIP;
  RpcMeta_CompressType_COMPRESS_GZIP = 2,
    RpcMeta_CompressType_COMPRESS_NO;
  RpcMeta_CompressType_COMPRESS_NO = 0,
    RpcMeta_CompressType_COMPRESS_SNAPPY;
  RpcMeta_CompressType_COMPRESS_SNAPPY = 1,
    RpcMeta_CompressType_CompressType_ARRAYSIZE;
    RpcMeta_CompressType_CompressType_MAX;
    RpcMeta_CompressType_CompressType_MIN;
    RpcMeta_CompressType_descriptor(), name, value);
    RpcMeta_CompressType_descriptor(), value);
  RpcMeta_CompressType_RpcMeta_CompressType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
  RpcMeta_CompressType_RpcMeta_CompressType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RpcMeta(const RpcMeta& from);
               &_RpcMeta_default_instance_);
  ::RpcMetaMsg::RpcChunkInfo* chuck_info_;
  // .RpcMetaMsg.RpcChunkInfo chuck_info = 6;
// .RpcMetaMsg.RpcChunkInfo chuck_info = 6;
      &::RpcMetaMsg::_RpcChunkInfo_default_instance_);
  ::RpcMetaMsg::RpcChunkInfo* mutable_chuck_info();
  ::RpcMetaMsg::RpcChunkInfo* release_chuck_info();
  ::RpcMetaMsg::RpcChunkInfo* temp = chuck_info_;
  // .RpcMetaMsg.RpcMeta.CompressType compress_type = 3;
// .RpcMetaMsg.RpcMeta.CompressType compress_type = 3;
  ::RpcMetaMsg::RpcMeta_CompressType compress_type() const;
      &::RpcMetaMsg::_RpcRequestMeta_default_instance_);
  ::RpcMetaMsg::RpcRequestMeta* mutable_request();
  ::RpcMetaMsg::RpcRequestMeta* release_request();
  ::RpcMetaMsg::RpcRequestMeta* request_;
  // .RpcMetaMsg.RpcRequestMeta request = 1;
// .RpcMetaMsg.RpcRequestMeta request = 1;
  ::RpcMetaMsg::RpcRequestMeta* temp = request_;
      &::RpcMetaMsg::_RpcResponseMeta_default_instance_);
  ::RpcMetaMsg::RpcResponseMeta* mutable_response();
  ::RpcMetaMsg::RpcResponseMeta* release_response();
  ::RpcMetaMsg::RpcResponseMeta* response_;
  // .RpcMetaMsg.RpcResponseMeta response = 2;
// .RpcMetaMsg.RpcResponseMeta response = 2;
  ::RpcMetaMsg::RpcResponseMeta* temp = response_;
  RpcMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  RpcMeta(RpcMeta&& from) noexcept
    : RpcRequestMeta() {
  RpcRequestMeta();
// RpcRequestMeta
  RpcRequestMeta(const RpcRequestMeta& from);
               &_RpcRequestMeta_default_instance_);
  RpcRequestMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  RpcRequestMeta(RpcRequestMeta&& from) noexcept
    : RpcResponseMeta() {
  RpcResponseMeta();
// RpcResponseMeta
  RpcResponseMeta(const RpcResponseMeta& from);
               &_RpcResponseMeta_default_instance_);
  RpcResponseMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  RpcResponseMeta(RpcResponseMeta&& from) noexcept
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  service_name_.SetNoArena(
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  size_t ByteSizeLong() const PROTOBUF_FINAL;
// source: RpcMeta.proto
  static const CompressType COMPRESS_GZIP =
  static const CompressType COMPRESS_NO =
  static const CompressType COMPRESS_SNAPPY =
  static const CompressType CompressType_MAX =
  static const CompressType CompressType_MIN =
  static const ::google::protobuf::Descriptor* descriptor();
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
  static const int CompressType_ARRAYSIZE =
  static const int kAttachmentSizeFieldNumber = 5;
  static const int kAuthenticationDataFieldNumber = 7;
  static const int kChuckInfoFieldNumber = 6;
  static const int kChunkIdFieldNumber = 2;
  static const int kCompressTypeFieldNumber = 3;
  static const int kCorrelationIdFieldNumber = 4;
  static const int kLogIdFieldNumber = 3;
  static const int kMethodNameFieldNumber = 2;
  static const int kRequestFieldNumber = 1;
  static const int kResponseFieldNumber = 2;
  static const int kServiceNameFieldNumber = 1;
  static const int kStatusCodeFieldNumber = 1;
  static const int kStatusTextFieldNumber = 2;
  static const int kStreamIdFieldNumber = 1;
  static const RpcChunkInfo& default_instance();
  static const RpcMeta& default_instance();
  static const RpcRequestMeta& default_instance();
  static const RpcResponseMeta& default_instance();
  static inline bool CompressType_IsValid(int value) {
  static inline bool CompressType_Parse(const ::std::string& name,
  static inline const ::google::protobuf::EnumDescriptor*
  static inline const RpcChunkInfo* internal_default_instance() {
  static inline const RpcMeta* internal_default_instance() {
  static inline const RpcRequestMeta* internal_default_instance() {
  static inline const RpcResponseMeta* internal_default_instance() {
  static inline const ::std::string& CompressType_Name(CompressType value) {
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
  static void InitDefaultsImpl();
  status_code_ = 0u;
  status_code_ = value;
  status_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_text);
  status_text_.SetNoArena(
  status_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
  status_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  status_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  ::std::string* mutable_authentication_data();
  ::std::string* mutable_method_name();
  ::std::string* mutable_service_name();
  ::std::string* mutable_status_text();
      ::std::string(reinterpret_cast<const char*>(value), size));
  ::std::string* release_authentication_data();
  ::std::string* release_method_name();
  ::std::string* release_service_name();
  ::std::string* release_status_text();
  stream_id_ = GOOGLE_ULONGLONG(0);
  stream_id_ = value;
  // string method_name = 2;
// string method_name = 2;
  // string service_name = 1;
// string service_name = 1;
  // string status_text = 2;
// string status_text = 2;
struct TableStruct {
template <>
template <> struct is_proto_enum< ::RpcMetaMsg::RpcMeta_CompressType> : ::google::protobuf::internal::true_type {};
    *this = ::std::move(from);
  typedef RpcMeta_CompressType CompressType;
  // uint32 attachment_size = 5;
// uint32 attachment_size = 5;
  // uint32 status_code = 1;
// uint32 status_code = 1;
  // uint64 chunk_id = 2;
// uint64 chunk_id = 2;
  // uint64 correlation_id = 4;
// uint64 correlation_id = 4;
  // uint64 log_id = 3;
// uint64 log_id = 3;
  // uint64 stream_id = 1;
// uint64 stream_id = 1;
  virtual ~RpcChunkInfo();
  virtual ~RpcMeta();
  virtual ~RpcRequestMeta();
  virtual ~RpcResponseMeta();
void AddDescriptors();
  void clear_attachment_size();
  void clear_authentication_data();
  void clear_chuck_info();
  void clear_chunk_id();
  void clear_compress_type();
  void clear_correlation_id();
  void clear_log_id();
  void clear_method_name();
  void Clear() PROTOBUF_FINAL;
  void clear_request();
  void clear_response();
  void clear_service_name();
  void clear_status_code();
  void clear_status_text();
  void clear_stream_id();
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcChunkInfo& from);
  void CopyFrom(const RpcMeta& from);
  void CopyFrom(const RpcRequestMeta& from);
  void CopyFrom(const RpcResponseMeta& from);
void InitDefaults();
  void InternalSwap(RpcChunkInfo* other);
  void InternalSwap(RpcMeta* other);
  void InternalSwap(RpcRequestMeta* other);
  void InternalSwap(RpcResponseMeta* other);
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const RpcChunkInfo& from);
  void MergeFrom(const RpcMeta& from);
  void MergeFrom(const RpcRequestMeta& from);
  void MergeFrom(const RpcResponseMeta& from);
  void SerializeWithCachedSizes(
  void set_allocated_authentication_data(::std::string* authentication_data);
  void set_allocated_chuck_info(::RpcMetaMsg::RpcChunkInfo* chuck_info);
  void set_allocated_method_name(::std::string* method_name);
  void set_allocated_request(::RpcMetaMsg::RpcRequestMeta* request);
  void set_allocated_response(::RpcMetaMsg::RpcResponseMeta* response);
  void set_allocated_service_name(::std::string* service_name);
  void set_allocated_status_text(::std::string* status_text);
  void set_attachment_size(::google::protobuf::uint32 value);
  void set_authentication_data(const char* value);
  void set_authentication_data(const ::std::string& value);
  void set_authentication_data(const void* value, size_t size);
  void set_authentication_data(::std::string&& value);
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void set_chunk_id(::google::protobuf::uint64 value);
  void set_compress_type(::RpcMetaMsg::RpcMeta_CompressType value);
  void set_correlation_id(::google::protobuf::uint64 value);
  void set_log_id(::google::protobuf::uint64 value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  void set_method_name(const ::std::string& value);
  void set_method_name(::std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  void set_service_name(const ::std::string& value);
  void set_service_name(::std::string&& value);
  void set_status_code(::google::protobuf::uint32 value);
  void set_status_text(const char* value);
  void set_status_text(const char* value, size_t size);
  void set_status_text(const ::std::string& value);
  void set_status_text(::std::string&& value);
  void set_stream_id(::google::protobuf::uint64 value);
  void SharedCtor();
  void SharedDtor();
  void Swap(RpcChunkInfo* other);
  void Swap(RpcMeta* other);
  void Swap(RpcRequestMeta* other);
  void Swap(RpcResponseMeta* other);
