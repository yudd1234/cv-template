// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encryptServiceLog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "encryptServiceLog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cloudscreen {
namespace log {
class EncryptServiceLogDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EncryptServiceLog>
     _instance;
} _EncryptServiceLog_default_instance_;

namespace protobuf_encryptServiceLog_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, device_activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, csp_product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, csp_product_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, traffic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, enterprise_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, trigger_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, trigger_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, is_succeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptServiceLog, comment_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(EncryptServiceLog)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EncryptServiceLog_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "encryptServiceLog.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _EncryptServiceLog_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EncryptServiceLog_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027encryptServiceLog.proto\022\023com.cloudscre"
      "en.log\"\255\002\n\021EncryptServiceLog\022\032\n\022device_a"
      "ctivity_id\030\n \001(\004\022\026\n\016csp_product_id\030\024 \001(\004"
      "\022\030\n\020csp_product_name\030\036 \001(\t\022\022\n\nsession_id"
      "\030( \001(\t\022\022\n\ntraffic_id\0302 \001(\t\022\025\n\renterprise"
      "_id\030< \001(\004\022\017\n\007user_id\030F \001(\004\022\024\n\014trigger_ti"
      "me\030P \001(\t\022\026\n\016trigger_reason\030Z \001(\t\022\022\n\nis_s"
      "ucceed\030d \001(\r\022\021\n\tfile_name\030n \001(\t\022\023\n\013actio"
      "n_type\030x \001(\r\022\020\n\007comment\030\202\001 \001(\tB1\n\032com.cl"
      "oudscreen.csg.log.pbB\023EncryptServiceLogP"
      "Bb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 409);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "encryptServiceLog.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_encryptServiceLog_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptServiceLog::kDeviceActivityIdFieldNumber;
const int EncryptServiceLog::kCspProductIdFieldNumber;
const int EncryptServiceLog::kCspProductNameFieldNumber;
const int EncryptServiceLog::kSessionIdFieldNumber;
const int EncryptServiceLog::kTrafficIdFieldNumber;
const int EncryptServiceLog::kEnterpriseIdFieldNumber;
const int EncryptServiceLog::kUserIdFieldNumber;
const int EncryptServiceLog::kTriggerTimeFieldNumber;
const int EncryptServiceLog::kTriggerReasonFieldNumber;
const int EncryptServiceLog::kIsSucceedFieldNumber;
const int EncryptServiceLog::kFileNameFieldNumber;
const int EncryptServiceLog::kActionTypeFieldNumber;
const int EncryptServiceLog::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptServiceLog::EncryptServiceLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_encryptServiceLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cloudscreen.log.EncryptServiceLog)
}
EncryptServiceLog::EncryptServiceLog(const EncryptServiceLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  csp_product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.csp_product_name().size() > 0) {
    csp_product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_product_name_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traffic_id().size() > 0) {
    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  trigger_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trigger_time().size() > 0) {
    trigger_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_time_);
  }
  trigger_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trigger_reason().size() > 0) {
    trigger_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_reason_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&device_activity_id_, &from.device_activity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&device_activity_id_)) + sizeof(action_type_));
  // @@protoc_insertion_point(copy_constructor:com.cloudscreen.log.EncryptServiceLog)
}

void EncryptServiceLog::SharedCtor() {
  csp_product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&device_activity_id_)) + sizeof(action_type_));
  _cached_size_ = 0;
}

EncryptServiceLog::~EncryptServiceLog() {
  // @@protoc_insertion_point(destructor:com.cloudscreen.log.EncryptServiceLog)
  SharedDtor();
}

void EncryptServiceLog::SharedDtor() {
  csp_product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncryptServiceLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptServiceLog::descriptor() {
  protobuf_encryptServiceLog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_encryptServiceLog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncryptServiceLog& EncryptServiceLog::default_instance() {
  protobuf_encryptServiceLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

EncryptServiceLog* EncryptServiceLog::New(::google::protobuf::Arena* arena) const {
  EncryptServiceLog* n = new EncryptServiceLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EncryptServiceLog::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cloudscreen.log.EncryptServiceLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&device_activity_id_)) + sizeof(action_type_));
  _internal_metadata_.Clear();
}

bool EncryptServiceLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cloudscreen.log.EncryptServiceLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 device_activity_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 csp_product_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &csp_product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string csp_product_name = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_csp_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.EncryptServiceLog.csp_product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.EncryptServiceLog.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traffic_id = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.EncryptServiceLog.traffic_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 enterprise_id = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enterprise_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trigger_time = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trigger_time().data(), static_cast<int>(this->trigger_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.EncryptServiceLog.trigger_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trigger_reason = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trigger_reason().data(), static_cast<int>(this->trigger_reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.EncryptServiceLog.trigger_reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 is_succeed = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_succeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.EncryptServiceLog.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_type = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 960 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1042 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.EncryptServiceLog.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cloudscreen.log.EncryptServiceLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cloudscreen.log.EncryptServiceLog)
  return false;
#undef DO_
}

void EncryptServiceLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cloudscreen.log.EncryptServiceLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 device_activity_id = 10;
  if (this->device_activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->device_activity_id(), output);
  }

  // uint64 csp_product_id = 20;
  if (this->csp_product_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->csp_product_id(), output);
  }

  // string csp_product_name = 30;
  if (this->csp_product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.csp_product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->csp_product_name(), output);
  }

  // string session_id = 40;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->session_id(), output);
  }

  // string traffic_id = 50;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.traffic_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->traffic_id(), output);
  }

  // uint64 enterprise_id = 60;
  if (this->enterprise_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->enterprise_id(), output);
  }

  // uint64 user_id = 70;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(70, this->user_id(), output);
  }

  // string trigger_time = 80;
  if (this->trigger_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_time().data(), static_cast<int>(this->trigger_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.trigger_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->trigger_time(), output);
  }

  // string trigger_reason = 90;
  if (this->trigger_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_reason().data(), static_cast<int>(this->trigger_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.trigger_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      90, this->trigger_reason(), output);
  }

  // uint32 is_succeed = 100;
  if (this->is_succeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->is_succeed(), output);
  }

  // string file_name = 110;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      110, this->file_name(), output);
  }

  // uint32 action_type = 120;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(120, this->action_type(), output);
  }

  // string comment = 130;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      130, this->comment(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cloudscreen.log.EncryptServiceLog)
}

::google::protobuf::uint8* EncryptServiceLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cloudscreen.log.EncryptServiceLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 device_activity_id = 10;
  if (this->device_activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->device_activity_id(), target);
  }

  // uint64 csp_product_id = 20;
  if (this->csp_product_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->csp_product_id(), target);
  }

  // string csp_product_name = 30;
  if (this->csp_product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.csp_product_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->csp_product_name(), target);
  }

  // string session_id = 40;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->session_id(), target);
  }

  // string traffic_id = 50;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.traffic_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->traffic_id(), target);
  }

  // uint64 enterprise_id = 60;
  if (this->enterprise_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->enterprise_id(), target);
  }

  // uint64 user_id = 70;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(70, this->user_id(), target);
  }

  // string trigger_time = 80;
  if (this->trigger_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_time().data(), static_cast<int>(this->trigger_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.trigger_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->trigger_time(), target);
  }

  // string trigger_reason = 90;
  if (this->trigger_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_reason().data(), static_cast<int>(this->trigger_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.trigger_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        90, this->trigger_reason(), target);
  }

  // uint32 is_succeed = 100;
  if (this->is_succeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->is_succeed(), target);
  }

  // string file_name = 110;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        110, this->file_name(), target);
  }

  // uint32 action_type = 120;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(120, this->action_type(), target);
  }

  // string comment = 130;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.EncryptServiceLog.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        130, this->comment(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cloudscreen.log.EncryptServiceLog)
  return target;
}

size_t EncryptServiceLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cloudscreen.log.EncryptServiceLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string csp_product_name = 30;
  if (this->csp_product_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->csp_product_name());
  }

  // string session_id = 40;
  if (this->session_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string traffic_id = 50;
  if (this->traffic_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traffic_id());
  }

  // string trigger_time = 80;
  if (this->trigger_time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trigger_time());
  }

  // string trigger_reason = 90;
  if (this->trigger_reason().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trigger_reason());
  }

  // string file_name = 110;
  if (this->file_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // string comment = 130;
  if (this->comment().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // uint64 device_activity_id = 10;
  if (this->device_activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_activity_id());
  }

  // uint64 csp_product_id = 20;
  if (this->csp_product_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->csp_product_id());
  }

  // uint64 enterprise_id = 60;
  if (this->enterprise_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->enterprise_id());
  }

  // uint64 user_id = 70;
  if (this->user_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // uint32 is_succeed = 100;
  if (this->is_succeed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_succeed());
  }

  // uint32 action_type = 120;
  if (this->action_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptServiceLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cloudscreen.log.EncryptServiceLog)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptServiceLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncryptServiceLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cloudscreen.log.EncryptServiceLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cloudscreen.log.EncryptServiceLog)
    MergeFrom(*source);
  }
}

void EncryptServiceLog::MergeFrom(const EncryptServiceLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cloudscreen.log.EncryptServiceLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.csp_product_name().size() > 0) {

    csp_product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_product_name_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.traffic_id().size() > 0) {

    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  if (from.trigger_time().size() > 0) {

    trigger_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_time_);
  }
  if (from.trigger_reason().size() > 0) {

    trigger_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_reason_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.device_activity_id() != 0) {
    set_device_activity_id(from.device_activity_id());
  }
  if (from.csp_product_id() != 0) {
    set_csp_product_id(from.csp_product_id());
  }
  if (from.enterprise_id() != 0) {
    set_enterprise_id(from.enterprise_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.is_succeed() != 0) {
    set_is_succeed(from.is_succeed());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
}

void EncryptServiceLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cloudscreen.log.EncryptServiceLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptServiceLog::CopyFrom(const EncryptServiceLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cloudscreen.log.EncryptServiceLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptServiceLog::IsInitialized() const {
  return true;
}

void EncryptServiceLog::Swap(EncryptServiceLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptServiceLog::InternalSwap(EncryptServiceLog* other) {
  using std::swap;
  csp_product_name_.Swap(&other->csp_product_name_);
  session_id_.Swap(&other->session_id_);
  traffic_id_.Swap(&other->traffic_id_);
  trigger_time_.Swap(&other->trigger_time_);
  trigger_reason_.Swap(&other->trigger_reason_);
  file_name_.Swap(&other->file_name_);
  comment_.Swap(&other->comment_);
  swap(device_activity_id_, other->device_activity_id_);
  swap(csp_product_id_, other->csp_product_id_);
  swap(enterprise_id_, other->enterprise_id_);
  swap(user_id_, other->user_id_);
  swap(is_succeed_, other->is_succeed_);
  swap(action_type_, other->action_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EncryptServiceLog::GetMetadata() const {
  protobuf_encryptServiceLog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_encryptServiceLog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EncryptServiceLog

// uint64 device_activity_id = 10;
void EncryptServiceLog::clear_device_activity_id() {
  device_activity_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EncryptServiceLog::device_activity_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
  return device_activity_id_;
}
void EncryptServiceLog::set_device_activity_id(::google::protobuf::uint64 value) {
  
  device_activity_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
}

// uint64 csp_product_id = 20;
void EncryptServiceLog::clear_csp_product_id() {
  csp_product_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EncryptServiceLog::csp_product_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
  return csp_product_id_;
}
void EncryptServiceLog::set_csp_product_id(::google::protobuf::uint64 value) {
  
  csp_product_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
}

// string csp_product_name = 30;
void EncryptServiceLog::clear_csp_product_name() {
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EncryptServiceLog::csp_product_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
  return csp_product_name_.GetNoArena();
}
void EncryptServiceLog::set_csp_product_name(const ::std::string& value) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}
#if LANG_CXX11
void EncryptServiceLog::set_csp_product_name(::std::string&& value) {
  
  csp_product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}
#endif
void EncryptServiceLog::set_csp_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}
void EncryptServiceLog::set_csp_product_name(const char* value, size_t size) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}
::std::string* EncryptServiceLog::mutable_csp_product_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EncryptServiceLog::release_csp_product_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
  
  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EncryptServiceLog::set_allocated_csp_product_name(::std::string* csp_product_name) {
  if (csp_product_name != NULL) {
    
  } else {
    
  }
  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
}

// string session_id = 40;
void EncryptServiceLog::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EncryptServiceLog::session_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.session_id)
  return session_id_.GetNoArena();
}
void EncryptServiceLog::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.session_id)
}
#if LANG_CXX11
void EncryptServiceLog::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.session_id)
}
#endif
void EncryptServiceLog::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.session_id)
}
void EncryptServiceLog::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.session_id)
}
::std::string* EncryptServiceLog::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EncryptServiceLog::release_session_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EncryptServiceLog::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.session_id)
}

// string traffic_id = 50;
void EncryptServiceLog::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EncryptServiceLog::traffic_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.traffic_id)
  return traffic_id_.GetNoArena();
}
void EncryptServiceLog::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}
#if LANG_CXX11
void EncryptServiceLog::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}
#endif
void EncryptServiceLog::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}
void EncryptServiceLog::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}
::std::string* EncryptServiceLog::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EncryptServiceLog::release_traffic_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EncryptServiceLog::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.traffic_id)
}

// uint64 enterprise_id = 60;
void EncryptServiceLog::clear_enterprise_id() {
  enterprise_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EncryptServiceLog::enterprise_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
  return enterprise_id_;
}
void EncryptServiceLog::set_enterprise_id(::google::protobuf::uint64 value) {
  
  enterprise_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
}

// uint64 user_id = 70;
void EncryptServiceLog::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EncryptServiceLog::user_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.user_id)
  return user_id_;
}
void EncryptServiceLog::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.user_id)
}

// string trigger_time = 80;
void EncryptServiceLog::clear_trigger_time() {
  trigger_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EncryptServiceLog::trigger_time() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  return trigger_time_.GetNoArena();
}
void EncryptServiceLog::set_trigger_time(const ::std::string& value) {
  
  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}
#if LANG_CXX11
void EncryptServiceLog::set_trigger_time(::std::string&& value) {
  
  trigger_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}
#endif
void EncryptServiceLog::set_trigger_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}
void EncryptServiceLog::set_trigger_time(const char* value, size_t size) {
  
  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}
::std::string* EncryptServiceLog::mutable_trigger_time() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  return trigger_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EncryptServiceLog::release_trigger_time() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_time)
  
  return trigger_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EncryptServiceLog::set_allocated_trigger_time(::std::string* trigger_time) {
  if (trigger_time != NULL) {
    
  } else {
    
  }
  trigger_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_time);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_time)
}

// string trigger_reason = 90;
void EncryptServiceLog::clear_trigger_reason() {
  trigger_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EncryptServiceLog::trigger_reason() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  return trigger_reason_.GetNoArena();
}
void EncryptServiceLog::set_trigger_reason(const ::std::string& value) {
  
  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}
#if LANG_CXX11
void EncryptServiceLog::set_trigger_reason(::std::string&& value) {
  
  trigger_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}
#endif
void EncryptServiceLog::set_trigger_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}
void EncryptServiceLog::set_trigger_reason(const char* value, size_t size) {
  
  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}
::std::string* EncryptServiceLog::mutable_trigger_reason() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  return trigger_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EncryptServiceLog::release_trigger_reason() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
  
  return trigger_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EncryptServiceLog::set_allocated_trigger_reason(::std::string* trigger_reason) {
  if (trigger_reason != NULL) {
    
  } else {
    
  }
  trigger_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_reason);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
}

// uint32 is_succeed = 100;
void EncryptServiceLog::clear_is_succeed() {
  is_succeed_ = 0u;
}
::google::protobuf::uint32 EncryptServiceLog::is_succeed() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.is_succeed)
  return is_succeed_;
}
void EncryptServiceLog::set_is_succeed(::google::protobuf::uint32 value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.is_succeed)
}

// string file_name = 110;
void EncryptServiceLog::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EncryptServiceLog::file_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.file_name)
  return file_name_.GetNoArena();
}
void EncryptServiceLog::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.file_name)
}
#if LANG_CXX11
void EncryptServiceLog::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.file_name)
}
#endif
void EncryptServiceLog::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.file_name)
}
void EncryptServiceLog::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.file_name)
}
::std::string* EncryptServiceLog::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EncryptServiceLog::release_file_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EncryptServiceLog::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.file_name)
}

// uint32 action_type = 120;
void EncryptServiceLog::clear_action_type() {
  action_type_ = 0u;
}
::google::protobuf::uint32 EncryptServiceLog::action_type() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.action_type)
  return action_type_;
}
void EncryptServiceLog::set_action_type(::google::protobuf::uint32 value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.action_type)
}

// string comment = 130;
void EncryptServiceLog::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EncryptServiceLog::comment() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.comment)
  return comment_.GetNoArena();
}
void EncryptServiceLog::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.comment)
}
#if LANG_CXX11
void EncryptServiceLog::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.comment)
}
#endif
void EncryptServiceLog::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.comment)
}
void EncryptServiceLog::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.comment)
}
::std::string* EncryptServiceLog::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EncryptServiceLog::release_comment() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EncryptServiceLog::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace cloudscreen
}  // namespace com

// @@protoc_insertion_point(global_scope)
