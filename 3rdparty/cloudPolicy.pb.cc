// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloudPolicy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cloudPolicy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cloudscreen {
namespace log {
class CloudPolicyLogDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CloudPolicyLog>
     _instance;
} _CloudPolicyLog_default_instance_;

namespace protobuf_cloudPolicy_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, matched_policy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, policy_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, log_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, delivery_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, enterprise_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, device_activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, csp_product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, csp_product_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, event_category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, traffic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, matched_device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, matched_device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, matched_map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, matched_map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, matched_net_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, matched_net_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, frequency_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, frequency_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, period_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, trigger_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, action_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, reserve_id1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, reserve_content1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, reserve_id2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudPolicyLog, reserve_content2_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CloudPolicyLog)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudPolicyLog_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cloudPolicy.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CloudPolicyLog_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CloudPolicyLog_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021cloudPolicy.proto\022\023com.cloudscreen.log"
      "\"\232\006\n\016CloudPolicyLog\022\031\n\021matched_policy_id"
      "\030\n \001(\004\022\023\n\013policy_name\030\024 \001(\t\022\020\n\010log_type\030"
      "\036 \001(\r\022\025\n\rdelivery_type\030( \001(\r\022\020\n\010severity"
      "\0302 \001(\r\022\025\n\renterprise_id\0304 \001(\004\022\017\n\007user_id"
      "\0307 \001(\004\022\032\n\022device_activity_id\030< \001(\004\022\026\n\016cs"
      "p_product_id\030F \001(\004\022\030\n\020csp_product_name\030P"
      " \001(\t\022\020\n\010event_id\030Z \001(\004\022\031\n\021event_category"
      "_id\030[ \001(\004\022\022\n\nevent_name\030d \001(\t\022\022\n\nsession"
      "_id\030n \001(\t\022\022\n\ntraffic_id\030x \001(\t\022\032\n\021matched"
      "_device_id\030\202\001 \001(\004\022\034\n\023matched_device_name"
      "\030\214\001 \001(\t\022\027\n\016matched_map_id\030\226\001 \001(\004\022\031\n\020matc"
      "hed_map_name\030\240\001 \001(\t\022\027\n\016matched_net_id\030\252\001"
      " \001(\004\022\031\n\020matched_net_name\030\264\001 \001(\t\022\025\n\014frequ"
      "ency_id\030\266\001 \001(\004\022\027\n\016frequency_name\030\267\001 \001(\t\022"
      "\022\n\tthreshold\030\271\001 \001(\r\022\017\n\006period\030\273\001 \001(\r\022\024\n\013"
      "period_unit\030\275\001 \001(\r\022\017\n\006policy\030\276\001 \001(\t\022\025\n\014t"
      "rigger_time\030\310\001 \001(\t\022\025\n\014action_taken\030\322\001 \001("
      "\r\022\020\n\007comment\030\334\001 \001(\t\022\024\n\013reserve_id1\030\346\001 \001("
      "\004\022\031\n\020reserve_content1\030\360\001 \001(\t\022\024\n\013reserve_"
      "id2\030\372\001 \001(\004\022\031\n\020reserve_content2\030\204\002 \001(\tB.\n"
      "\032com.cloudscreen.csg.log.pbB\020CloudPolicy"
      "LogPBb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 893);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cloudPolicy.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cloudPolicy_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudPolicyLog::kMatchedPolicyIdFieldNumber;
const int CloudPolicyLog::kPolicyNameFieldNumber;
const int CloudPolicyLog::kLogTypeFieldNumber;
const int CloudPolicyLog::kDeliveryTypeFieldNumber;
const int CloudPolicyLog::kSeverityFieldNumber;
const int CloudPolicyLog::kEnterpriseIdFieldNumber;
const int CloudPolicyLog::kUserIdFieldNumber;
const int CloudPolicyLog::kDeviceActivityIdFieldNumber;
const int CloudPolicyLog::kCspProductIdFieldNumber;
const int CloudPolicyLog::kCspProductNameFieldNumber;
const int CloudPolicyLog::kEventIdFieldNumber;
const int CloudPolicyLog::kEventCategoryIdFieldNumber;
const int CloudPolicyLog::kEventNameFieldNumber;
const int CloudPolicyLog::kSessionIdFieldNumber;
const int CloudPolicyLog::kTrafficIdFieldNumber;
const int CloudPolicyLog::kMatchedDeviceIdFieldNumber;
const int CloudPolicyLog::kMatchedDeviceNameFieldNumber;
const int CloudPolicyLog::kMatchedMapIdFieldNumber;
const int CloudPolicyLog::kMatchedMapNameFieldNumber;
const int CloudPolicyLog::kMatchedNetIdFieldNumber;
const int CloudPolicyLog::kMatchedNetNameFieldNumber;
const int CloudPolicyLog::kFrequencyIdFieldNumber;
const int CloudPolicyLog::kFrequencyNameFieldNumber;
const int CloudPolicyLog::kThresholdFieldNumber;
const int CloudPolicyLog::kPeriodFieldNumber;
const int CloudPolicyLog::kPeriodUnitFieldNumber;
const int CloudPolicyLog::kPolicyFieldNumber;
const int CloudPolicyLog::kTriggerTimeFieldNumber;
const int CloudPolicyLog::kActionTakenFieldNumber;
const int CloudPolicyLog::kCommentFieldNumber;
const int CloudPolicyLog::kReserveId1FieldNumber;
const int CloudPolicyLog::kReserveContent1FieldNumber;
const int CloudPolicyLog::kReserveId2FieldNumber;
const int CloudPolicyLog::kReserveContent2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudPolicyLog::CloudPolicyLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cloudPolicy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cloudscreen.log.CloudPolicyLog)
}
CloudPolicyLog::CloudPolicyLog(const CloudPolicyLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.policy_name().size() > 0) {
    policy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_name_);
  }
  csp_product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.csp_product_name().size() > 0) {
    csp_product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_product_name_);
  }
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_name().size() > 0) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traffic_id().size() > 0) {
    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  matched_device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matched_device_name().size() > 0) {
    matched_device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matched_device_name_);
  }
  matched_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matched_map_name().size() > 0) {
    matched_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matched_map_name_);
  }
  matched_net_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matched_net_name().size() > 0) {
    matched_net_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matched_net_name_);
  }
  frequency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frequency_name().size() > 0) {
    frequency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frequency_name_);
  }
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.policy().size() > 0) {
    policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
  }
  trigger_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trigger_time().size() > 0) {
    trigger_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_time_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  reserve_content1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reserve_content1().size() > 0) {
    reserve_content1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reserve_content1_);
  }
  reserve_content2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reserve_content2().size() > 0) {
    reserve_content2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reserve_content2_);
  }
  ::memcpy(&matched_policy_id_, &from.matched_policy_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserve_id2_) -
    reinterpret_cast<char*>(&matched_policy_id_)) + sizeof(reserve_id2_));
  // @@protoc_insertion_point(copy_constructor:com.cloudscreen.log.CloudPolicyLog)
}

void CloudPolicyLog::SharedCtor() {
  policy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_net_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve_content1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve_content2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&matched_policy_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserve_id2_) -
      reinterpret_cast<char*>(&matched_policy_id_)) + sizeof(reserve_id2_));
  _cached_size_ = 0;
}

CloudPolicyLog::~CloudPolicyLog() {
  // @@protoc_insertion_point(destructor:com.cloudscreen.log.CloudPolicyLog)
  SharedDtor();
}

void CloudPolicyLog::SharedDtor() {
  policy_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_net_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve_content1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve_content2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudPolicyLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudPolicyLog::descriptor() {
  protobuf_cloudPolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cloudPolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudPolicyLog& CloudPolicyLog::default_instance() {
  protobuf_cloudPolicy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudPolicyLog* CloudPolicyLog::New(::google::protobuf::Arena* arena) const {
  CloudPolicyLog* n = new CloudPolicyLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudPolicyLog::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cloudscreen.log.CloudPolicyLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_net_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frequency_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve_content1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve_content2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&matched_policy_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserve_id2_) -
      reinterpret_cast<char*>(&matched_policy_id_)) + sizeof(reserve_id2_));
  _internal_metadata_.Clear();
}

bool CloudPolicyLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cloudscreen.log.CloudPolicyLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 matched_policy_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matched_policy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string policy_name = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->policy_name().data(), static_cast<int>(this->policy_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.policy_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 log_type = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 delivery_type = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delivery_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 severity = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 enterprise_id = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enterprise_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_activity_id = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 csp_product_id = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &csp_product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string csp_product_name = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_csp_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.csp_product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 event_id = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 event_category_id = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 728 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event_name = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_name().data(), static_cast<int>(this->event_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.event_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traffic_id = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.traffic_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 matched_device_id = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 1040 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matched_device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matched_device_name = 140;
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matched_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matched_device_name().data(), static_cast<int>(this->matched_device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.matched_device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 matched_map_id = 150;
      case 150: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 1200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matched_map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matched_map_name = 160;
      case 160: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matched_map_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matched_map_name().data(), static_cast<int>(this->matched_map_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.matched_map_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 matched_net_id = 170;
      case 170: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 1360 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matched_net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matched_net_name = 180;
      case 180: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 1442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matched_net_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matched_net_name().data(), static_cast<int>(this->matched_net_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.matched_net_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frequency_id = 182;
      case 182: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 1456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frequency_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string frequency_name = 183;
      case 183: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 1466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frequency_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frequency_name().data(), static_cast<int>(this->frequency_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.frequency_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 threshold = 185;
      case 185: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 1480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 period = 187;
      case 187: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 1496 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 period_unit = 189;
      case 189: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 1512 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string policy = 190;
      case 190: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 1522 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->policy().data(), static_cast<int>(this->policy().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.policy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trigger_time = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 1602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trigger_time().data(), static_cast<int>(this->trigger_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.trigger_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_taken = 210;
      case 210: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 1680 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 220;
      case 220: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 1762 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reserve_id1 = 230;
      case 230: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 1840 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reserve_id1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reserve_content1 = 240;
      case 240: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 1922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserve_content1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reserve_content1().data(), static_cast<int>(this->reserve_content1().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.reserve_content1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reserve_id2 = 250;
      case 250: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 2000 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reserve_id2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reserve_content2 = 260;
      case 260: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2082 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserve_content2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reserve_content2().data(), static_cast<int>(this->reserve_content2().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.log.CloudPolicyLog.reserve_content2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cloudscreen.log.CloudPolicyLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cloudscreen.log.CloudPolicyLog)
  return false;
#undef DO_
}

void CloudPolicyLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cloudscreen.log.CloudPolicyLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 matched_policy_id = 10;
  if (this->matched_policy_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->matched_policy_id(), output);
  }

  // string policy_name = 20;
  if (this->policy_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->policy_name().data(), static_cast<int>(this->policy_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.policy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->policy_name(), output);
  }

  // uint32 log_type = 30;
  if (this->log_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->log_type(), output);
  }

  // uint32 delivery_type = 40;
  if (this->delivery_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->delivery_type(), output);
  }

  // uint32 severity = 50;
  if (this->severity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->severity(), output);
  }

  // uint64 enterprise_id = 52;
  if (this->enterprise_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->enterprise_id(), output);
  }

  // uint64 user_id = 55;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(55, this->user_id(), output);
  }

  // uint64 device_activity_id = 60;
  if (this->device_activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->device_activity_id(), output);
  }

  // uint64 csp_product_id = 70;
  if (this->csp_product_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(70, this->csp_product_id(), output);
  }

  // string csp_product_name = 80;
  if (this->csp_product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.csp_product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->csp_product_name(), output);
  }

  // uint64 event_id = 90;
  if (this->event_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(90, this->event_id(), output);
  }

  // uint64 event_category_id = 91;
  if (this->event_category_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(91, this->event_category_id(), output);
  }

  // string event_name = 100;
  if (this->event_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->event_name(), output);
  }

  // string session_id = 110;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      110, this->session_id(), output);
  }

  // string traffic_id = 120;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.traffic_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->traffic_id(), output);
  }

  // uint64 matched_device_id = 130;
  if (this->matched_device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(130, this->matched_device_id(), output);
  }

  // string matched_device_name = 140;
  if (this->matched_device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matched_device_name().data(), static_cast<int>(this->matched_device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.matched_device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      140, this->matched_device_name(), output);
  }

  // uint64 matched_map_id = 150;
  if (this->matched_map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(150, this->matched_map_id(), output);
  }

  // string matched_map_name = 160;
  if (this->matched_map_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matched_map_name().data(), static_cast<int>(this->matched_map_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.matched_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      160, this->matched_map_name(), output);
  }

  // uint64 matched_net_id = 170;
  if (this->matched_net_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(170, this->matched_net_id(), output);
  }

  // string matched_net_name = 180;
  if (this->matched_net_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matched_net_name().data(), static_cast<int>(this->matched_net_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.matched_net_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      180, this->matched_net_name(), output);
  }

  // uint64 frequency_id = 182;
  if (this->frequency_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(182, this->frequency_id(), output);
  }

  // string frequency_name = 183;
  if (this->frequency_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frequency_name().data(), static_cast<int>(this->frequency_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.frequency_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      183, this->frequency_name(), output);
  }

  // uint32 threshold = 185;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(185, this->threshold(), output);
  }

  // uint32 period = 187;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(187, this->period(), output);
  }

  // uint32 period_unit = 189;
  if (this->period_unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(189, this->period_unit(), output);
  }

  // string policy = 190;
  if (this->policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->policy().data(), static_cast<int>(this->policy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      190, this->policy(), output);
  }

  // string trigger_time = 200;
  if (this->trigger_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_time().data(), static_cast<int>(this->trigger_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.trigger_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      200, this->trigger_time(), output);
  }

  // uint32 action_taken = 210;
  if (this->action_taken() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(210, this->action_taken(), output);
  }

  // string comment = 220;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      220, this->comment(), output);
  }

  // uint64 reserve_id1 = 230;
  if (this->reserve_id1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(230, this->reserve_id1(), output);
  }

  // string reserve_content1 = 240;
  if (this->reserve_content1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reserve_content1().data(), static_cast<int>(this->reserve_content1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.reserve_content1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      240, this->reserve_content1(), output);
  }

  // uint64 reserve_id2 = 250;
  if (this->reserve_id2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(250, this->reserve_id2(), output);
  }

  // string reserve_content2 = 260;
  if (this->reserve_content2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reserve_content2().data(), static_cast<int>(this->reserve_content2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.reserve_content2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      260, this->reserve_content2(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cloudscreen.log.CloudPolicyLog)
}

::google::protobuf::uint8* CloudPolicyLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cloudscreen.log.CloudPolicyLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 matched_policy_id = 10;
  if (this->matched_policy_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->matched_policy_id(), target);
  }

  // string policy_name = 20;
  if (this->policy_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->policy_name().data(), static_cast<int>(this->policy_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.policy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->policy_name(), target);
  }

  // uint32 log_type = 30;
  if (this->log_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->log_type(), target);
  }

  // uint32 delivery_type = 40;
  if (this->delivery_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->delivery_type(), target);
  }

  // uint32 severity = 50;
  if (this->severity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->severity(), target);
  }

  // uint64 enterprise_id = 52;
  if (this->enterprise_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->enterprise_id(), target);
  }

  // uint64 user_id = 55;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(55, this->user_id(), target);
  }

  // uint64 device_activity_id = 60;
  if (this->device_activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->device_activity_id(), target);
  }

  // uint64 csp_product_id = 70;
  if (this->csp_product_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(70, this->csp_product_id(), target);
  }

  // string csp_product_name = 80;
  if (this->csp_product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.csp_product_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->csp_product_name(), target);
  }

  // uint64 event_id = 90;
  if (this->event_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(90, this->event_id(), target);
  }

  // uint64 event_category_id = 91;
  if (this->event_category_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(91, this->event_category_id(), target);
  }

  // string event_name = 100;
  if (this->event_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->event_name(), target);
  }

  // string session_id = 110;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        110, this->session_id(), target);
  }

  // string traffic_id = 120;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.traffic_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->traffic_id(), target);
  }

  // uint64 matched_device_id = 130;
  if (this->matched_device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(130, this->matched_device_id(), target);
  }

  // string matched_device_name = 140;
  if (this->matched_device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matched_device_name().data(), static_cast<int>(this->matched_device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.matched_device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        140, this->matched_device_name(), target);
  }

  // uint64 matched_map_id = 150;
  if (this->matched_map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(150, this->matched_map_id(), target);
  }

  // string matched_map_name = 160;
  if (this->matched_map_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matched_map_name().data(), static_cast<int>(this->matched_map_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.matched_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        160, this->matched_map_name(), target);
  }

  // uint64 matched_net_id = 170;
  if (this->matched_net_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(170, this->matched_net_id(), target);
  }

  // string matched_net_name = 180;
  if (this->matched_net_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matched_net_name().data(), static_cast<int>(this->matched_net_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.matched_net_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        180, this->matched_net_name(), target);
  }

  // uint64 frequency_id = 182;
  if (this->frequency_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(182, this->frequency_id(), target);
  }

  // string frequency_name = 183;
  if (this->frequency_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frequency_name().data(), static_cast<int>(this->frequency_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.frequency_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        183, this->frequency_name(), target);
  }

  // uint32 threshold = 185;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(185, this->threshold(), target);
  }

  // uint32 period = 187;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(187, this->period(), target);
  }

  // uint32 period_unit = 189;
  if (this->period_unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(189, this->period_unit(), target);
  }

  // string policy = 190;
  if (this->policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->policy().data(), static_cast<int>(this->policy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        190, this->policy(), target);
  }

  // string trigger_time = 200;
  if (this->trigger_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_time().data(), static_cast<int>(this->trigger_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.trigger_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        200, this->trigger_time(), target);
  }

  // uint32 action_taken = 210;
  if (this->action_taken() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(210, this->action_taken(), target);
  }

  // string comment = 220;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        220, this->comment(), target);
  }

  // uint64 reserve_id1 = 230;
  if (this->reserve_id1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(230, this->reserve_id1(), target);
  }

  // string reserve_content1 = 240;
  if (this->reserve_content1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reserve_content1().data(), static_cast<int>(this->reserve_content1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.reserve_content1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        240, this->reserve_content1(), target);
  }

  // uint64 reserve_id2 = 250;
  if (this->reserve_id2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(250, this->reserve_id2(), target);
  }

  // string reserve_content2 = 260;
  if (this->reserve_content2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reserve_content2().data(), static_cast<int>(this->reserve_content2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.log.CloudPolicyLog.reserve_content2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        260, this->reserve_content2(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cloudscreen.log.CloudPolicyLog)
  return target;
}

size_t CloudPolicyLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cloudscreen.log.CloudPolicyLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string policy_name = 20;
  if (this->policy_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->policy_name());
  }

  // string csp_product_name = 80;
  if (this->csp_product_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->csp_product_name());
  }

  // string event_name = 100;
  if (this->event_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_name());
  }

  // string session_id = 110;
  if (this->session_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string traffic_id = 120;
  if (this->traffic_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traffic_id());
  }

  // string matched_device_name = 140;
  if (this->matched_device_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matched_device_name());
  }

  // string matched_map_name = 160;
  if (this->matched_map_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matched_map_name());
  }

  // string matched_net_name = 180;
  if (this->matched_net_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matched_net_name());
  }

  // string frequency_name = 183;
  if (this->frequency_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frequency_name());
  }

  // string policy = 190;
  if (this->policy().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->policy());
  }

  // string trigger_time = 200;
  if (this->trigger_time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trigger_time());
  }

  // string comment = 220;
  if (this->comment().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // string reserve_content1 = 240;
  if (this->reserve_content1().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reserve_content1());
  }

  // string reserve_content2 = 260;
  if (this->reserve_content2().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reserve_content2());
  }

  // uint64 matched_policy_id = 10;
  if (this->matched_policy_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->matched_policy_id());
  }

  // uint32 log_type = 30;
  if (this->log_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->log_type());
  }

  // uint32 delivery_type = 40;
  if (this->delivery_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delivery_type());
  }

  // uint32 action_taken = 210;
  if (this->action_taken() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_taken());
  }

  // uint64 enterprise_id = 52;
  if (this->enterprise_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->enterprise_id());
  }

  // uint64 user_id = 55;
  if (this->user_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // uint64 device_activity_id = 60;
  if (this->device_activity_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_activity_id());
  }

  // uint64 csp_product_id = 70;
  if (this->csp_product_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->csp_product_id());
  }

  // uint64 event_id = 90;
  if (this->event_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->event_id());
  }

  // uint64 event_category_id = 91;
  if (this->event_category_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->event_category_id());
  }

  // uint32 severity = 50;
  if (this->severity() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->severity());
  }

  // uint32 threshold = 185;
  if (this->threshold() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->threshold());
  }

  // uint64 matched_device_id = 130;
  if (this->matched_device_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->matched_device_id());
  }

  // uint64 matched_map_id = 150;
  if (this->matched_map_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->matched_map_id());
  }

  // uint64 matched_net_id = 170;
  if (this->matched_net_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->matched_net_id());
  }

  // uint64 frequency_id = 182;
  if (this->frequency_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frequency_id());
  }

  // uint32 period = 187;
  if (this->period() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->period());
  }

  // uint32 period_unit = 189;
  if (this->period_unit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->period_unit());
  }

  // uint64 reserve_id1 = 230;
  if (this->reserve_id1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reserve_id1());
  }

  // uint64 reserve_id2 = 250;
  if (this->reserve_id2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reserve_id2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudPolicyLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cloudscreen.log.CloudPolicyLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudPolicyLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudPolicyLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cloudscreen.log.CloudPolicyLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cloudscreen.log.CloudPolicyLog)
    MergeFrom(*source);
  }
}

void CloudPolicyLog::MergeFrom(const CloudPolicyLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cloudscreen.log.CloudPolicyLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.policy_name().size() > 0) {

    policy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_name_);
  }
  if (from.csp_product_name().size() > 0) {

    csp_product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_product_name_);
  }
  if (from.event_name().size() > 0) {

    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.traffic_id().size() > 0) {

    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  if (from.matched_device_name().size() > 0) {

    matched_device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matched_device_name_);
  }
  if (from.matched_map_name().size() > 0) {

    matched_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matched_map_name_);
  }
  if (from.matched_net_name().size() > 0) {

    matched_net_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matched_net_name_);
  }
  if (from.frequency_name().size() > 0) {

    frequency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frequency_name_);
  }
  if (from.policy().size() > 0) {

    policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
  }
  if (from.trigger_time().size() > 0) {

    trigger_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_time_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.reserve_content1().size() > 0) {

    reserve_content1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reserve_content1_);
  }
  if (from.reserve_content2().size() > 0) {

    reserve_content2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reserve_content2_);
  }
  if (from.matched_policy_id() != 0) {
    set_matched_policy_id(from.matched_policy_id());
  }
  if (from.log_type() != 0) {
    set_log_type(from.log_type());
  }
  if (from.delivery_type() != 0) {
    set_delivery_type(from.delivery_type());
  }
  if (from.action_taken() != 0) {
    set_action_taken(from.action_taken());
  }
  if (from.enterprise_id() != 0) {
    set_enterprise_id(from.enterprise_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.device_activity_id() != 0) {
    set_device_activity_id(from.device_activity_id());
  }
  if (from.csp_product_id() != 0) {
    set_csp_product_id(from.csp_product_id());
  }
  if (from.event_id() != 0) {
    set_event_id(from.event_id());
  }
  if (from.event_category_id() != 0) {
    set_event_category_id(from.event_category_id());
  }
  if (from.severity() != 0) {
    set_severity(from.severity());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.matched_device_id() != 0) {
    set_matched_device_id(from.matched_device_id());
  }
  if (from.matched_map_id() != 0) {
    set_matched_map_id(from.matched_map_id());
  }
  if (from.matched_net_id() != 0) {
    set_matched_net_id(from.matched_net_id());
  }
  if (from.frequency_id() != 0) {
    set_frequency_id(from.frequency_id());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
  if (from.period_unit() != 0) {
    set_period_unit(from.period_unit());
  }
  if (from.reserve_id1() != 0) {
    set_reserve_id1(from.reserve_id1());
  }
  if (from.reserve_id2() != 0) {
    set_reserve_id2(from.reserve_id2());
  }
}

void CloudPolicyLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cloudscreen.log.CloudPolicyLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudPolicyLog::CopyFrom(const CloudPolicyLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cloudscreen.log.CloudPolicyLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudPolicyLog::IsInitialized() const {
  return true;
}

void CloudPolicyLog::Swap(CloudPolicyLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudPolicyLog::InternalSwap(CloudPolicyLog* other) {
  using std::swap;
  policy_name_.Swap(&other->policy_name_);
  csp_product_name_.Swap(&other->csp_product_name_);
  event_name_.Swap(&other->event_name_);
  session_id_.Swap(&other->session_id_);
  traffic_id_.Swap(&other->traffic_id_);
  matched_device_name_.Swap(&other->matched_device_name_);
  matched_map_name_.Swap(&other->matched_map_name_);
  matched_net_name_.Swap(&other->matched_net_name_);
  frequency_name_.Swap(&other->frequency_name_);
  policy_.Swap(&other->policy_);
  trigger_time_.Swap(&other->trigger_time_);
  comment_.Swap(&other->comment_);
  reserve_content1_.Swap(&other->reserve_content1_);
  reserve_content2_.Swap(&other->reserve_content2_);
  swap(matched_policy_id_, other->matched_policy_id_);
  swap(log_type_, other->log_type_);
  swap(delivery_type_, other->delivery_type_);
  swap(action_taken_, other->action_taken_);
  swap(enterprise_id_, other->enterprise_id_);
  swap(user_id_, other->user_id_);
  swap(device_activity_id_, other->device_activity_id_);
  swap(csp_product_id_, other->csp_product_id_);
  swap(event_id_, other->event_id_);
  swap(event_category_id_, other->event_category_id_);
  swap(severity_, other->severity_);
  swap(threshold_, other->threshold_);
  swap(matched_device_id_, other->matched_device_id_);
  swap(matched_map_id_, other->matched_map_id_);
  swap(matched_net_id_, other->matched_net_id_);
  swap(frequency_id_, other->frequency_id_);
  swap(period_, other->period_);
  swap(period_unit_, other->period_unit_);
  swap(reserve_id1_, other->reserve_id1_);
  swap(reserve_id2_, other->reserve_id2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudPolicyLog::GetMetadata() const {
  protobuf_cloudPolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cloudPolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudPolicyLog

// uint64 matched_policy_id = 10;
void CloudPolicyLog::clear_matched_policy_id() {
  matched_policy_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::matched_policy_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.matched_policy_id)
  return matched_policy_id_;
}
void CloudPolicyLog::set_matched_policy_id(::google::protobuf::uint64 value) {
  
  matched_policy_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.matched_policy_id)
}

// string policy_name = 20;
void CloudPolicyLog::clear_policy_name() {
  policy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::policy_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.policy_name)
  return policy_name_.GetNoArena();
}
void CloudPolicyLog::set_policy_name(const ::std::string& value) {
  
  policy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.policy_name)
}
#if LANG_CXX11
void CloudPolicyLog::set_policy_name(::std::string&& value) {
  
  policy_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.policy_name)
}
#endif
void CloudPolicyLog::set_policy_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  policy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.policy_name)
}
void CloudPolicyLog::set_policy_name(const char* value, size_t size) {
  
  policy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.policy_name)
}
::std::string* CloudPolicyLog::mutable_policy_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.policy_name)
  return policy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_policy_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.policy_name)
  
  return policy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_policy_name(::std::string* policy_name) {
  if (policy_name != NULL) {
    
  } else {
    
  }
  policy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.policy_name)
}

// uint32 log_type = 30;
void CloudPolicyLog::clear_log_type() {
  log_type_ = 0u;
}
::google::protobuf::uint32 CloudPolicyLog::log_type() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.log_type)
  return log_type_;
}
void CloudPolicyLog::set_log_type(::google::protobuf::uint32 value) {
  
  log_type_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.log_type)
}

// uint32 delivery_type = 40;
void CloudPolicyLog::clear_delivery_type() {
  delivery_type_ = 0u;
}
::google::protobuf::uint32 CloudPolicyLog::delivery_type() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.delivery_type)
  return delivery_type_;
}
void CloudPolicyLog::set_delivery_type(::google::protobuf::uint32 value) {
  
  delivery_type_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.delivery_type)
}

// uint32 severity = 50;
void CloudPolicyLog::clear_severity() {
  severity_ = 0u;
}
::google::protobuf::uint32 CloudPolicyLog::severity() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.severity)
  return severity_;
}
void CloudPolicyLog::set_severity(::google::protobuf::uint32 value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.severity)
}

// uint64 enterprise_id = 52;
void CloudPolicyLog::clear_enterprise_id() {
  enterprise_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::enterprise_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.enterprise_id)
  return enterprise_id_;
}
void CloudPolicyLog::set_enterprise_id(::google::protobuf::uint64 value) {
  
  enterprise_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.enterprise_id)
}

// uint64 user_id = 55;
void CloudPolicyLog::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::user_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.user_id)
  return user_id_;
}
void CloudPolicyLog::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.user_id)
}

// uint64 device_activity_id = 60;
void CloudPolicyLog::clear_device_activity_id() {
  device_activity_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::device_activity_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.device_activity_id)
  return device_activity_id_;
}
void CloudPolicyLog::set_device_activity_id(::google::protobuf::uint64 value) {
  
  device_activity_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.device_activity_id)
}

// uint64 csp_product_id = 70;
void CloudPolicyLog::clear_csp_product_id() {
  csp_product_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::csp_product_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.csp_product_id)
  return csp_product_id_;
}
void CloudPolicyLog::set_csp_product_id(::google::protobuf::uint64 value) {
  
  csp_product_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.csp_product_id)
}

// string csp_product_name = 80;
void CloudPolicyLog::clear_csp_product_name() {
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::csp_product_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.csp_product_name)
  return csp_product_name_.GetNoArena();
}
void CloudPolicyLog::set_csp_product_name(const ::std::string& value) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.csp_product_name)
}
#if LANG_CXX11
void CloudPolicyLog::set_csp_product_name(::std::string&& value) {
  
  csp_product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.csp_product_name)
}
#endif
void CloudPolicyLog::set_csp_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.csp_product_name)
}
void CloudPolicyLog::set_csp_product_name(const char* value, size_t size) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.csp_product_name)
}
::std::string* CloudPolicyLog::mutable_csp_product_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.csp_product_name)
  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_csp_product_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.csp_product_name)
  
  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_csp_product_name(::std::string* csp_product_name) {
  if (csp_product_name != NULL) {
    
  } else {
    
  }
  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.csp_product_name)
}

// uint64 event_id = 90;
void CloudPolicyLog::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::event_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.event_id)
  return event_id_;
}
void CloudPolicyLog::set_event_id(::google::protobuf::uint64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.event_id)
}

// uint64 event_category_id = 91;
void CloudPolicyLog::clear_event_category_id() {
  event_category_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::event_category_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.event_category_id)
  return event_category_id_;
}
void CloudPolicyLog::set_event_category_id(::google::protobuf::uint64 value) {
  
  event_category_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.event_category_id)
}

// string event_name = 100;
void CloudPolicyLog::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::event_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.event_name)
  return event_name_.GetNoArena();
}
void CloudPolicyLog::set_event_name(const ::std::string& value) {
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.event_name)
}
#if LANG_CXX11
void CloudPolicyLog::set_event_name(::std::string&& value) {
  
  event_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.event_name)
}
#endif
void CloudPolicyLog::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.event_name)
}
void CloudPolicyLog::set_event_name(const char* value, size_t size) {
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.event_name)
}
::std::string* CloudPolicyLog::mutable_event_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_event_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.event_name)
  
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    
  } else {
    
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.event_name)
}

// string session_id = 110;
void CloudPolicyLog::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::session_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.session_id)
  return session_id_.GetNoArena();
}
void CloudPolicyLog::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.session_id)
}
#if LANG_CXX11
void CloudPolicyLog::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.session_id)
}
#endif
void CloudPolicyLog::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.session_id)
}
void CloudPolicyLog::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.session_id)
}
::std::string* CloudPolicyLog::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_session_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.session_id)
}

// string traffic_id = 120;
void CloudPolicyLog::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::traffic_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.traffic_id)
  return traffic_id_.GetNoArena();
}
void CloudPolicyLog::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.traffic_id)
}
#if LANG_CXX11
void CloudPolicyLog::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.traffic_id)
}
#endif
void CloudPolicyLog::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.traffic_id)
}
void CloudPolicyLog::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.traffic_id)
}
::std::string* CloudPolicyLog::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_traffic_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.traffic_id)
}

// uint64 matched_device_id = 130;
void CloudPolicyLog::clear_matched_device_id() {
  matched_device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::matched_device_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.matched_device_id)
  return matched_device_id_;
}
void CloudPolicyLog::set_matched_device_id(::google::protobuf::uint64 value) {
  
  matched_device_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.matched_device_id)
}

// string matched_device_name = 140;
void CloudPolicyLog::clear_matched_device_name() {
  matched_device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::matched_device_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.matched_device_name)
  return matched_device_name_.GetNoArena();
}
void CloudPolicyLog::set_matched_device_name(const ::std::string& value) {
  
  matched_device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.matched_device_name)
}
#if LANG_CXX11
void CloudPolicyLog::set_matched_device_name(::std::string&& value) {
  
  matched_device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.matched_device_name)
}
#endif
void CloudPolicyLog::set_matched_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matched_device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.matched_device_name)
}
void CloudPolicyLog::set_matched_device_name(const char* value, size_t size) {
  
  matched_device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.matched_device_name)
}
::std::string* CloudPolicyLog::mutable_matched_device_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.matched_device_name)
  return matched_device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_matched_device_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.matched_device_name)
  
  return matched_device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_matched_device_name(::std::string* matched_device_name) {
  if (matched_device_name != NULL) {
    
  } else {
    
  }
  matched_device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matched_device_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.matched_device_name)
}

// uint64 matched_map_id = 150;
void CloudPolicyLog::clear_matched_map_id() {
  matched_map_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::matched_map_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.matched_map_id)
  return matched_map_id_;
}
void CloudPolicyLog::set_matched_map_id(::google::protobuf::uint64 value) {
  
  matched_map_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.matched_map_id)
}

// string matched_map_name = 160;
void CloudPolicyLog::clear_matched_map_name() {
  matched_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::matched_map_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.matched_map_name)
  return matched_map_name_.GetNoArena();
}
void CloudPolicyLog::set_matched_map_name(const ::std::string& value) {
  
  matched_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.matched_map_name)
}
#if LANG_CXX11
void CloudPolicyLog::set_matched_map_name(::std::string&& value) {
  
  matched_map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.matched_map_name)
}
#endif
void CloudPolicyLog::set_matched_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matched_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.matched_map_name)
}
void CloudPolicyLog::set_matched_map_name(const char* value, size_t size) {
  
  matched_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.matched_map_name)
}
::std::string* CloudPolicyLog::mutable_matched_map_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.matched_map_name)
  return matched_map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_matched_map_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.matched_map_name)
  
  return matched_map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_matched_map_name(::std::string* matched_map_name) {
  if (matched_map_name != NULL) {
    
  } else {
    
  }
  matched_map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matched_map_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.matched_map_name)
}

// uint64 matched_net_id = 170;
void CloudPolicyLog::clear_matched_net_id() {
  matched_net_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::matched_net_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.matched_net_id)
  return matched_net_id_;
}
void CloudPolicyLog::set_matched_net_id(::google::protobuf::uint64 value) {
  
  matched_net_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.matched_net_id)
}

// string matched_net_name = 180;
void CloudPolicyLog::clear_matched_net_name() {
  matched_net_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::matched_net_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.matched_net_name)
  return matched_net_name_.GetNoArena();
}
void CloudPolicyLog::set_matched_net_name(const ::std::string& value) {
  
  matched_net_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.matched_net_name)
}
#if LANG_CXX11
void CloudPolicyLog::set_matched_net_name(::std::string&& value) {
  
  matched_net_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.matched_net_name)
}
#endif
void CloudPolicyLog::set_matched_net_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matched_net_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.matched_net_name)
}
void CloudPolicyLog::set_matched_net_name(const char* value, size_t size) {
  
  matched_net_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.matched_net_name)
}
::std::string* CloudPolicyLog::mutable_matched_net_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.matched_net_name)
  return matched_net_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_matched_net_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.matched_net_name)
  
  return matched_net_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_matched_net_name(::std::string* matched_net_name) {
  if (matched_net_name != NULL) {
    
  } else {
    
  }
  matched_net_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matched_net_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.matched_net_name)
}

// uint64 frequency_id = 182;
void CloudPolicyLog::clear_frequency_id() {
  frequency_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::frequency_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.frequency_id)
  return frequency_id_;
}
void CloudPolicyLog::set_frequency_id(::google::protobuf::uint64 value) {
  
  frequency_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.frequency_id)
}

// string frequency_name = 183;
void CloudPolicyLog::clear_frequency_name() {
  frequency_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::frequency_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.frequency_name)
  return frequency_name_.GetNoArena();
}
void CloudPolicyLog::set_frequency_name(const ::std::string& value) {
  
  frequency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.frequency_name)
}
#if LANG_CXX11
void CloudPolicyLog::set_frequency_name(::std::string&& value) {
  
  frequency_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.frequency_name)
}
#endif
void CloudPolicyLog::set_frequency_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frequency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.frequency_name)
}
void CloudPolicyLog::set_frequency_name(const char* value, size_t size) {
  
  frequency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.frequency_name)
}
::std::string* CloudPolicyLog::mutable_frequency_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.frequency_name)
  return frequency_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_frequency_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.frequency_name)
  
  return frequency_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_frequency_name(::std::string* frequency_name) {
  if (frequency_name != NULL) {
    
  } else {
    
  }
  frequency_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frequency_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.frequency_name)
}

// uint32 threshold = 185;
void CloudPolicyLog::clear_threshold() {
  threshold_ = 0u;
}
::google::protobuf::uint32 CloudPolicyLog::threshold() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.threshold)
  return threshold_;
}
void CloudPolicyLog::set_threshold(::google::protobuf::uint32 value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.threshold)
}

// uint32 period = 187;
void CloudPolicyLog::clear_period() {
  period_ = 0u;
}
::google::protobuf::uint32 CloudPolicyLog::period() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.period)
  return period_;
}
void CloudPolicyLog::set_period(::google::protobuf::uint32 value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.period)
}

// uint32 period_unit = 189;
void CloudPolicyLog::clear_period_unit() {
  period_unit_ = 0u;
}
::google::protobuf::uint32 CloudPolicyLog::period_unit() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.period_unit)
  return period_unit_;
}
void CloudPolicyLog::set_period_unit(::google::protobuf::uint32 value) {
  
  period_unit_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.period_unit)
}

// string policy = 190;
void CloudPolicyLog::clear_policy() {
  policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::policy() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.policy)
  return policy_.GetNoArena();
}
void CloudPolicyLog::set_policy(const ::std::string& value) {
  
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.policy)
}
#if LANG_CXX11
void CloudPolicyLog::set_policy(::std::string&& value) {
  
  policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.policy)
}
#endif
void CloudPolicyLog::set_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.policy)
}
void CloudPolicyLog::set_policy(const char* value, size_t size) {
  
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.policy)
}
::std::string* CloudPolicyLog::mutable_policy() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.policy)
  return policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_policy() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.policy)
  
  return policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_policy(::std::string* policy) {
  if (policy != NULL) {
    
  } else {
    
  }
  policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.policy)
}

// string trigger_time = 200;
void CloudPolicyLog::clear_trigger_time() {
  trigger_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::trigger_time() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.trigger_time)
  return trigger_time_.GetNoArena();
}
void CloudPolicyLog::set_trigger_time(const ::std::string& value) {
  
  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.trigger_time)
}
#if LANG_CXX11
void CloudPolicyLog::set_trigger_time(::std::string&& value) {
  
  trigger_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.trigger_time)
}
#endif
void CloudPolicyLog::set_trigger_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.trigger_time)
}
void CloudPolicyLog::set_trigger_time(const char* value, size_t size) {
  
  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.trigger_time)
}
::std::string* CloudPolicyLog::mutable_trigger_time() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.trigger_time)
  return trigger_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_trigger_time() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.trigger_time)
  
  return trigger_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_trigger_time(::std::string* trigger_time) {
  if (trigger_time != NULL) {
    
  } else {
    
  }
  trigger_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_time);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.trigger_time)
}

// uint32 action_taken = 210;
void CloudPolicyLog::clear_action_taken() {
  action_taken_ = 0u;
}
::google::protobuf::uint32 CloudPolicyLog::action_taken() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.action_taken)
  return action_taken_;
}
void CloudPolicyLog::set_action_taken(::google::protobuf::uint32 value) {
  
  action_taken_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.action_taken)
}

// string comment = 220;
void CloudPolicyLog::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::comment() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.comment)
  return comment_.GetNoArena();
}
void CloudPolicyLog::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.comment)
}
#if LANG_CXX11
void CloudPolicyLog::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.comment)
}
#endif
void CloudPolicyLog::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.comment)
}
void CloudPolicyLog::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.comment)
}
::std::string* CloudPolicyLog::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_comment() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.comment)
}

// uint64 reserve_id1 = 230;
void CloudPolicyLog::clear_reserve_id1() {
  reserve_id1_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::reserve_id1() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.reserve_id1)
  return reserve_id1_;
}
void CloudPolicyLog::set_reserve_id1(::google::protobuf::uint64 value) {
  
  reserve_id1_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.reserve_id1)
}

// string reserve_content1 = 240;
void CloudPolicyLog::clear_reserve_content1() {
  reserve_content1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::reserve_content1() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.reserve_content1)
  return reserve_content1_.GetNoArena();
}
void CloudPolicyLog::set_reserve_content1(const ::std::string& value) {
  
  reserve_content1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.reserve_content1)
}
#if LANG_CXX11
void CloudPolicyLog::set_reserve_content1(::std::string&& value) {
  
  reserve_content1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.reserve_content1)
}
#endif
void CloudPolicyLog::set_reserve_content1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reserve_content1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.reserve_content1)
}
void CloudPolicyLog::set_reserve_content1(const char* value, size_t size) {
  
  reserve_content1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.reserve_content1)
}
::std::string* CloudPolicyLog::mutable_reserve_content1() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.reserve_content1)
  return reserve_content1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_reserve_content1() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.reserve_content1)
  
  return reserve_content1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_reserve_content1(::std::string* reserve_content1) {
  if (reserve_content1 != NULL) {
    
  } else {
    
  }
  reserve_content1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reserve_content1);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.reserve_content1)
}

// uint64 reserve_id2 = 250;
void CloudPolicyLog::clear_reserve_id2() {
  reserve_id2_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CloudPolicyLog::reserve_id2() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.reserve_id2)
  return reserve_id2_;
}
void CloudPolicyLog::set_reserve_id2(::google::protobuf::uint64 value) {
  
  reserve_id2_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.reserve_id2)
}

// string reserve_content2 = 260;
void CloudPolicyLog::clear_reserve_content2() {
  reserve_content2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CloudPolicyLog::reserve_content2() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.log.CloudPolicyLog.reserve_content2)
  return reserve_content2_.GetNoArena();
}
void CloudPolicyLog::set_reserve_content2(const ::std::string& value) {
  
  reserve_content2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.log.CloudPolicyLog.reserve_content2)
}
#if LANG_CXX11
void CloudPolicyLog::set_reserve_content2(::std::string&& value) {
  
  reserve_content2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.CloudPolicyLog.reserve_content2)
}
#endif
void CloudPolicyLog::set_reserve_content2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reserve_content2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.CloudPolicyLog.reserve_content2)
}
void CloudPolicyLog::set_reserve_content2(const char* value, size_t size) {
  
  reserve_content2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.CloudPolicyLog.reserve_content2)
}
::std::string* CloudPolicyLog::mutable_reserve_content2() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.CloudPolicyLog.reserve_content2)
  return reserve_content2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CloudPolicyLog::release_reserve_content2() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.log.CloudPolicyLog.reserve_content2)
  
  return reserve_content2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CloudPolicyLog::set_allocated_reserve_content2(::std::string* reserve_content2) {
  if (reserve_content2 != NULL) {
    
  } else {
    
  }
  reserve_content2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reserve_content2);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.CloudPolicyLog.reserve_content2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace cloudscreen
}  // namespace com

// @@protoc_insertion_point(global_scope)
