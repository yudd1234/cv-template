     1	// Generated by the protocol buffer compiler.  DO NOT EDIT!
     2	// source: encryptServiceLog.proto
     3	
     4	#ifndef PROTOBUF_encryptServiceLog_2eproto__INCLUDED
     5	#define PROTOBUF_encryptServiceLog_2eproto__INCLUDED
     6	
     7	#include <string>
     8	
     9	#include <google/protobuf/stubs/common.h>
    10	
    11	#if GOOGLE_PROTOBUF_VERSION < 3004000
    12	#error This file was generated by a newer version of protoc which is
    13	#error incompatible with your Protocol Buffer headers.  Please update
    14	#error your headers.
    15	#endif
    16	#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
    17	#error This file was generated by an older version of protoc which is
    18	#error incompatible with your Protocol Buffer headers.  Please
    19	#error regenerate this file with a newer version of protoc.
    20	#endif
    21	
    22	#include <google/protobuf/io/coded_stream.h>
    23	#include <google/protobuf/arena.h>
    24	#include <google/protobuf/arenastring.h>
    25	#include <google/protobuf/generated_message_table_driven.h>
    26	#include <google/protobuf/generated_message_util.h>
    27	#include <google/protobuf/metadata.h>
    28	#include <google/protobuf/message.h>
    29	#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
    30	#include <google/protobuf/extension_set.h>  // IWYU pragma: export
    31	#include <google/protobuf/unknown_field_set.h>
    32	// @@protoc_insertion_point(includes)
    33	namespace com {
    34	namespace cloudscreen {
    35	namespace log {
    36	class EncryptServiceLog;
    37	class EncryptServiceLogDefaultTypeInternal;
    38	extern EncryptServiceLogDefaultTypeInternal _EncryptServiceLog_default_instance_;
    39	}  // namespace log
    40	}  // namespace cloudscreen
    41	}  // namespace com
    42	
    43	namespace com {
    44	namespace cloudscreen {
    45	namespace log {
    46	
    47	namespace protobuf_encryptServiceLog_2eproto {
    48	// Internal implementation detail -- do not call these.
    49	struct TableStruct {
    50	  static const ::google::protobuf::internal::ParseTableField entries[];
    51	  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    52	  static const ::google::protobuf::internal::ParseTable schema[];
    53	  static const ::google::protobuf::uint32 offsets[];
    54	  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
    55	  static const ::google::protobuf::internal::SerializationTable serialization_table[];
    56	  static void InitDefaultsImpl();
    57	};
    58	void AddDescriptors();
    59	void InitDefaults();
    60	}  // namespace protobuf_encryptServiceLog_2eproto
    61	
    62	// ===================================================================
    63	
    64	class EncryptServiceLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.cloudscreen.log.EncryptServiceLog) */ {
    65	 public:
    66	  EncryptServiceLog();
    67	  virtual ~EncryptServiceLog();
    68	
    69	  EncryptServiceLog(const EncryptServiceLog& from);
    70	
    71	  inline EncryptServiceLog& operator=(const EncryptServiceLog& from) {
    72	    CopyFrom(from);
    73	    return *this;
    74	  }
    75	  #if LANG_CXX11
    76	  EncryptServiceLog(EncryptServiceLog&& from) noexcept
    77	    : EncryptServiceLog() {
    78	    *this = ::std::move(from);
    79	  }
    80	
    81	  inline EncryptServiceLog& operator=(EncryptServiceLog&& from) noexcept {
    82	    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
    83	      if (this != &from) InternalSwap(&from);
    84	    } else {
    85	      CopyFrom(from);
    86	    }
    87	    return *this;
    88	  }
    89	  #endif
    90	  static const ::google::protobuf::Descriptor* descriptor();
    91	  static const EncryptServiceLog& default_instance();
    92	
    93	  static inline const EncryptServiceLog* internal_default_instance() {
    94	    return reinterpret_cast<const EncryptServiceLog*>(
    95	               &_EncryptServiceLog_default_instance_);
    96	  }
    97	  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98	    0;
    99	
   100	  void Swap(EncryptServiceLog* other);
   101	  friend void swap(EncryptServiceLog& a, EncryptServiceLog& b) {
   102	    a.Swap(&b);
   103	  }
   104	
   105	  // implements Message ----------------------------------------------
   106	
   107	  inline EncryptServiceLog* New() const PROTOBUF_FINAL { return New(NULL); }
   108	
   109	  EncryptServiceLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
   110	  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
   111	  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
   112	  void CopyFrom(const EncryptServiceLog& from);
   113	  void MergeFrom(const EncryptServiceLog& from);
   114	  void Clear() PROTOBUF_FINAL;
   115	  bool IsInitialized() const PROTOBUF_FINAL;
   116	
   117	  size_t ByteSizeLong() const PROTOBUF_FINAL;
   118	  bool MergePartialFromCodedStream(
   119	      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
   120	  void SerializeWithCachedSizes(
   121	      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
   122	  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
   123	      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
   124	  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
   125	  private:
   126	  void SharedCtor();
   127	  void SharedDtor();
   128	  void SetCachedSize(int size) const PROTOBUF_FINAL;
   129	  void InternalSwap(EncryptServiceLog* other);
   130	  private:
   131	  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
   132	    return NULL;
   133	  }
   134	  inline void* MaybeArenaPtr() const {
   135	    return NULL;
   136	  }
   137	  public:
   138	
   139	  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;
   140	
   141	  // nested types ----------------------------------------------------
   142	
   143	  // accessors -------------------------------------------------------
   144	
   145	  // string csp_product_name = 30;
   146	  void clear_csp_product_name();
   147	  static const int kCspProductNameFieldNumber = 30;
   148	  const ::std::string& csp_product_name() const;
   149	  void set_csp_product_name(const ::std::string& value);
   150	  #if LANG_CXX11
   151	  void set_csp_product_name(::std::string&& value);
   152	  #endif
   153	  void set_csp_product_name(const char* value);
   154	  void set_csp_product_name(const char* value, size_t size);
   155	  ::std::string* mutable_csp_product_name();
   156	  ::std::string* release_csp_product_name();
   157	  void set_allocated_csp_product_name(::std::string* csp_product_name);
   158	
   159	  // string session_id = 40;
   160	  void clear_session_id();
   161	  static const int kSessionIdFieldNumber = 40;
   162	  const ::std::string& session_id() const;
   163	  void set_session_id(const ::std::string& value);
   164	  #if LANG_CXX11
   165	  void set_session_id(::std::string&& value);
   166	  #endif
   167	  void set_session_id(const char* value);
   168	  void set_session_id(const char* value, size_t size);
   169	  ::std::string* mutable_session_id();
   170	  ::std::string* release_session_id();
   171	  void set_allocated_session_id(::std::string* session_id);
   172	
   173	  // string traffic_id = 50;
   174	  void clear_traffic_id();
   175	  static const int kTrafficIdFieldNumber = 50;
   176	  const ::std::string& traffic_id() const;
   177	  void set_traffic_id(const ::std::string& value);
   178	  #if LANG_CXX11
   179	  void set_traffic_id(::std::string&& value);
   180	  #endif
   181	  void set_traffic_id(const char* value);
   182	  void set_traffic_id(const char* value, size_t size);
   183	  ::std::string* mutable_traffic_id();
   184	  ::std::string* release_traffic_id();
   185	  void set_allocated_traffic_id(::std::string* traffic_id);
   186	
   187	  // string trigger_time = 80;
   188	  void clear_trigger_time();
   189	  static const int kTriggerTimeFieldNumber = 80;
   190	  const ::std::string& trigger_time() const;
   191	  void set_trigger_time(const ::std::string& value);
   192	  #if LANG_CXX11
   193	  void set_trigger_time(::std::string&& value);
   194	  #endif
   195	  void set_trigger_time(const char* value);
   196	  void set_trigger_time(const char* value, size_t size);
   197	  ::std::string* mutable_trigger_time();
   198	  ::std::string* release_trigger_time();
   199	  void set_allocated_trigger_time(::std::string* trigger_time);
   200	
   201	  // string trigger_reason = 90;
   202	  void clear_trigger_reason();
   203	  static const int kTriggerReasonFieldNumber = 90;
   204	  const ::std::string& trigger_reason() const;
   205	  void set_trigger_reason(const ::std::string& value);
   206	  #if LANG_CXX11
   207	  void set_trigger_reason(::std::string&& value);
   208	  #endif
   209	  void set_trigger_reason(const char* value);
   210	  void set_trigger_reason(const char* value, size_t size);
   211	  ::std::string* mutable_trigger_reason();
   212	  ::std::string* release_trigger_reason();
   213	  void set_allocated_trigger_reason(::std::string* trigger_reason);
   214	
   215	  // string file_name = 110;
   216	  void clear_file_name();
   217	  static const int kFileNameFieldNumber = 110;
   218	  const ::std::string& file_name() const;
   219	  void set_file_name(const ::std::string& value);
   220	  #if LANG_CXX11
   221	  void set_file_name(::std::string&& value);
   222	  #endif
   223	  void set_file_name(const char* value);
   224	  void set_file_name(const char* value, size_t size);
   225	  ::std::string* mutable_file_name();
   226	  ::std::string* release_file_name();
   227	  void set_allocated_file_name(::std::string* file_name);
   228	
   229	  // string comment = 130;
   230	  void clear_comment();
   231	  static const int kCommentFieldNumber = 130;
   232	  const ::std::string& comment() const;
   233	  void set_comment(const ::std::string& value);
   234	  #if LANG_CXX11
   235	  void set_comment(::std::string&& value);
   236	  #endif
   237	  void set_comment(const char* value);
   238	  void set_comment(const char* value, size_t size);
   239	  ::std::string* mutable_comment();
   240	  ::std::string* release_comment();
   241	  void set_allocated_comment(::std::string* comment);
   242	
   243	  // uint64 device_activity_id = 10;
   244	  void clear_device_activity_id();
   245	  static const int kDeviceActivityIdFieldNumber = 10;
   246	  ::google::protobuf::uint64 device_activity_id() const;
   247	  void set_device_activity_id(::google::protobuf::uint64 value);
   248	
   249	  // uint64 csp_product_id = 20;
   250	  void clear_csp_product_id();
   251	  static const int kCspProductIdFieldNumber = 20;
   252	  ::google::protobuf::uint64 csp_product_id() const;
   253	  void set_csp_product_id(::google::protobuf::uint64 value);
   254	
   255	  // uint64 enterprise_id = 60;
   256	  void clear_enterprise_id();
   257	  static const int kEnterpriseIdFieldNumber = 60;
   258	  ::google::protobuf::uint64 enterprise_id() const;
   259	  void set_enterprise_id(::google::protobuf::uint64 value);
   260	
   261	  // uint64 user_id = 70;
   262	  void clear_user_id();
   263	  static const int kUserIdFieldNumber = 70;
   264	  ::google::protobuf::uint64 user_id() const;
   265	  void set_user_id(::google::protobuf::uint64 value);
   266	
   267	  // uint32 is_succeed = 100;
   268	  void clear_is_succeed();
   269	  static const int kIsSucceedFieldNumber = 100;
   270	  ::google::protobuf::uint32 is_succeed() const;
   271	  void set_is_succeed(::google::protobuf::uint32 value);
   272	
   273	  // uint32 action_type = 120;
   274	  void clear_action_type();
   275	  static const int kActionTypeFieldNumber = 120;
   276	  ::google::protobuf::uint32 action_type() const;
   277	  void set_action_type(::google::protobuf::uint32 value);
   278	
   279	  // @@protoc_insertion_point(class_scope:com.cloudscreen.log.EncryptServiceLog)
   280	 private:
   281	
   282	  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
   283	  ::google::protobuf::internal::ArenaStringPtr csp_product_name_;
   284	  ::google::protobuf::internal::ArenaStringPtr session_id_;
   285	  ::google::protobuf::internal::ArenaStringPtr traffic_id_;
   286	  ::google::protobuf::internal::ArenaStringPtr trigger_time_;
   287	  ::google::protobuf::internal::ArenaStringPtr trigger_reason_;
   288	  ::google::protobuf::internal::ArenaStringPtr file_name_;
   289	  ::google::protobuf::internal::ArenaStringPtr comment_;
   290	  ::google::protobuf::uint64 device_activity_id_;
   291	  ::google::protobuf::uint64 csp_product_id_;
   292	  ::google::protobuf::uint64 enterprise_id_;
   293	  ::google::protobuf::uint64 user_id_;
   294	  ::google::protobuf::uint32 is_succeed_;
   295	  ::google::protobuf::uint32 action_type_;
   296	  mutable int _cached_size_;
   297	  friend struct protobuf_encryptServiceLog_2eproto::TableStruct;
   298	};
   299	// ===================================================================
   300	
   301	
   302	// ===================================================================
   303	
   304	#if !PROTOBUF_INLINE_NOT_IN_HEADERS
   305	#ifdef __GNUC__
   306	  #pragma GCC diagnostic push
   307	  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
   308	#endif  // __GNUC__
   309	// EncryptServiceLog
   310	
   311	// uint64 device_activity_id = 10;
   312	inline void EncryptServiceLog::clear_device_activity_id() {
   313	  device_activity_id_ = GOOGLE_ULONGLONG(0);
   314	}
   315	inline ::google::protobuf::uint64 EncryptServiceLog::device_activity_id() const {
   316	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
   317	  return device_activity_id_;
   318	}
   319	inline void EncryptServiceLog::set_device_activity_id(::google::protobuf::uint64 value) {
   320	  
   321	  device_activity_id_ = value;
   322	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
   323	}
   324	
   325	// uint64 csp_product_id = 20;
   326	inline void EncryptServiceLog::clear_csp_product_id() {
   327	  csp_product_id_ = GOOGLE_ULONGLONG(0);
   328	}
   329	inline ::google::protobuf::uint64 EncryptServiceLog::csp_product_id() const {
   330	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
   331	  return csp_product_id_;
   332	}
   333	inline void EncryptServiceLog::set_csp_product_id(::google::protobuf::uint64 value) {
   334	  
   335	  csp_product_id_ = value;
   336	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
   337	}
   338	
   339	// string csp_product_name = 30;
   340	inline void EncryptServiceLog::clear_csp_product_name() {
   341	  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   342	}
   343	inline const ::std::string& EncryptServiceLog::csp_product_name() const {
   344	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   345	  return csp_product_name_.GetNoArena();
   346	}
   347	inline void EncryptServiceLog::set_csp_product_name(const ::std::string& value) {
   348	  
   349	  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   350	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   351	}
   352	#if LANG_CXX11
   353	inline void EncryptServiceLog::set_csp_product_name(::std::string&& value) {
   354	  
   355	  csp_product_name_.SetNoArena(
   356	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   357	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   358	}
   359	#endif
   360	inline void EncryptServiceLog::set_csp_product_name(const char* value) {
   361	  GOOGLE_DCHECK(value != NULL);
   362	  
   363	  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   364	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   365	}
   366	inline void EncryptServiceLog::set_csp_product_name(const char* value, size_t size) {
   367	  
   368	  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   369	      ::std::string(reinterpret_cast<const char*>(value), size));
   370	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   371	}
   372	inline ::std::string* EncryptServiceLog::mutable_csp_product_name() {
   373	  
   374	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   375	  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   376	}
   377	inline ::std::string* EncryptServiceLog::release_csp_product_name() {
   378	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   379	  
   380	  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   381	}
   382	inline void EncryptServiceLog::set_allocated_csp_product_name(::std::string* csp_product_name) {
   383	  if (csp_product_name != NULL) {
   384	    
   385	  } else {
   386	    
   387	  }
   388	  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
   389	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   390	}
   391	
   392	// string session_id = 40;
   393	inline void EncryptServiceLog::clear_session_id() {
   394	  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   395	}
   396	inline const ::std::string& EncryptServiceLog::session_id() const {
   397	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.session_id)
   398	  return session_id_.GetNoArena();
   399	}
   400	inline void EncryptServiceLog::set_session_id(const ::std::string& value) {
   401	  
   402	  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   403	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.session_id)
   404	}
   405	#if LANG_CXX11
   406	inline void EncryptServiceLog::set_session_id(::std::string&& value) {
   407	  
   408	  session_id_.SetNoArena(
   409	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   410	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.session_id)
   411	}
   412	#endif
   413	inline void EncryptServiceLog::set_session_id(const char* value) {
   414	  GOOGLE_DCHECK(value != NULL);
   415	  
   416	  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   417	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.session_id)
   418	}
   419	inline void EncryptServiceLog::set_session_id(const char* value, size_t size) {
   420	  
   421	  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   422	      ::std::string(reinterpret_cast<const char*>(value), size));
   423	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.session_id)
   424	}
   425	inline ::std::string* EncryptServiceLog::mutable_session_id() {
   426	  
   427	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.session_id)
   428	  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   429	}
   430	inline ::std::string* EncryptServiceLog::release_session_id() {
   431	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.session_id)
   432	  
   433	  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   434	}
   435	inline void EncryptServiceLog::set_allocated_session_id(::std::string* session_id) {
   436	  if (session_id != NULL) {
   437	    
   438	  } else {
   439	    
   440	  }
   441	  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
   442	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.session_id)
   443	}
   444	
   445	// string traffic_id = 50;
   446	inline void EncryptServiceLog::clear_traffic_id() {
   447	  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   448	}
   449	inline const ::std::string& EncryptServiceLog::traffic_id() const {
   450	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   451	  return traffic_id_.GetNoArena();
   452	}
   453	inline void EncryptServiceLog::set_traffic_id(const ::std::string& value) {
   454	  
   455	  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   456	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   457	}
   458	#if LANG_CXX11
   459	inline void EncryptServiceLog::set_traffic_id(::std::string&& value) {
   460	  
   461	  traffic_id_.SetNoArena(
   462	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   463	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   464	}
   465	#endif
   466	inline void EncryptServiceLog::set_traffic_id(const char* value) {
   467	  GOOGLE_DCHECK(value != NULL);
   468	  
   469	  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   470	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   471	}
   472	inline void EncryptServiceLog::set_traffic_id(const char* value, size_t size) {
   473	  
   474	  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   475	      ::std::string(reinterpret_cast<const char*>(value), size));
   476	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   477	}
   478	inline ::std::string* EncryptServiceLog::mutable_traffic_id() {
   479	  
   480	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   481	  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   482	}
   483	inline ::std::string* EncryptServiceLog::release_traffic_id() {
   484	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   485	  
   486	  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   487	}
   488	inline void EncryptServiceLog::set_allocated_traffic_id(::std::string* traffic_id) {
   489	  if (traffic_id != NULL) {
   490	    
   491	  } else {
   492	    
   493	  }
   494	  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
   495	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   496	}
   497	
   498	// uint64 enterprise_id = 60;
   499	inline void EncryptServiceLog::clear_enterprise_id() {
   500	  enterprise_id_ = GOOGLE_ULONGLONG(0);
   501	}
   502	inline ::google::protobuf::uint64 EncryptServiceLog::enterprise_id() const {
   503	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
   504	  return enterprise_id_;
   505	}
   506	inline void EncryptServiceLog::set_enterprise_id(::google::protobuf::uint64 value) {
   507	  
   508	  enterprise_id_ = value;
   509	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
   510	}
   511	
   512	// uint64 user_id = 70;
   513	inline void EncryptServiceLog::clear_user_id() {
   514	  user_id_ = GOOGLE_ULONGLONG(0);
   515	}
   516	inline ::google::protobuf::uint64 EncryptServiceLog::user_id() const {
   517	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.user_id)
   518	  return user_id_;
   519	}
   520	inline void EncryptServiceLog::set_user_id(::google::protobuf::uint64 value) {
   521	  
   522	  user_id_ = value;
   523	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.user_id)
   524	}
   525	
   526	// string trigger_time = 80;
   527	inline void EncryptServiceLog::clear_trigger_time() {
   528	  trigger_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   529	}
   530	inline const ::std::string& EncryptServiceLog::trigger_time() const {
   531	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   532	  return trigger_time_.GetNoArena();
   533	}
   534	inline void EncryptServiceLog::set_trigger_time(const ::std::string& value) {
   535	  
   536	  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   537	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   538	}
   539	#if LANG_CXX11
   540	inline void EncryptServiceLog::set_trigger_time(::std::string&& value) {
   541	  
   542	  trigger_time_.SetNoArena(
   543	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   544	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   545	}
   546	#endif
   547	inline void EncryptServiceLog::set_trigger_time(const char* value) {
   548	  GOOGLE_DCHECK(value != NULL);
   549	  
   550	  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   551	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   552	}
   553	inline void EncryptServiceLog::set_trigger_time(const char* value, size_t size) {
   554	  
   555	  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   556	      ::std::string(reinterpret_cast<const char*>(value), size));
   557	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   558	}
   559	inline ::std::string* EncryptServiceLog::mutable_trigger_time() {
   560	  
   561	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   562	  return trigger_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   563	}
   564	inline ::std::string* EncryptServiceLog::release_trigger_time() {
   565	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   566	  
   567	  return trigger_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   568	}
   569	inline void EncryptServiceLog::set_allocated_trigger_time(::std::string* trigger_time) {
   570	  if (trigger_time != NULL) {
   571	    
   572	  } else {
   573	    
   574	  }
   575	  trigger_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_time);
   576	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   577	}
   578	
   579	// string trigger_reason = 90;
   580	inline void EncryptServiceLog::clear_trigger_reason() {
   581	  trigger_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   582	}
   583	inline const ::std::string& EncryptServiceLog::trigger_reason() const {
   584	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   585	  return trigger_reason_.GetNoArena();
   586	}
   587	inline void EncryptServiceLog::set_trigger_reason(const ::std::string& value) {
   588	  
   589	  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   590	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   591	}
   592	#if LANG_CXX11
   593	inline void EncryptServiceLog::set_trigger_reason(::std::string&& value) {
   594	  
   595	  trigger_reason_.SetNoArena(
   596	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   597	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   598	}
   599	#endif
   600	inline void EncryptServiceLog::set_trigger_reason(const char* value) {
   601	  GOOGLE_DCHECK(value != NULL);
   602	  
   603	  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   604	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   605	}
   606	inline void EncryptServiceLog::set_trigger_reason(const char* value, size_t size) {
   607	  
   608	  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   609	      ::std::string(reinterpret_cast<const char*>(value), size));
   610	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   611	}
   612	inline ::std::string* EncryptServiceLog::mutable_trigger_reason() {
   613	  
   614	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   615	  return trigger_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   616	}
   617	inline ::std::string* EncryptServiceLog::release_trigger_reason() {
   618	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   619	  
   620	  return trigger_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   621	}
   622	inline void EncryptServiceLog::set_allocated_trigger_reason(::std::string* trigger_reason) {
   623	  if (trigger_reason != NULL) {
   624	    
   625	  } else {
   626	    
   627	  }
   628	  trigger_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_reason);
   629	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   630	}
   631	
   632	// uint32 is_succeed = 100;
   633	inline void EncryptServiceLog::clear_is_succeed() {
   634	  is_succeed_ = 0u;
   635	}
   636	inline ::google::protobuf::uint32 EncryptServiceLog::is_succeed() const {
   637	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.is_succeed)
   638	  return is_succeed_;
   639	}
   640	inline void EncryptServiceLog::set_is_succeed(::google::protobuf::uint32 value) {
   641	  
   642	  is_succeed_ = value;
   643	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.is_succeed)
   644	}
   645	
   646	// string file_name = 110;
   647	inline void EncryptServiceLog::clear_file_name() {
   648	  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   649	}
   650	inline const ::std::string& EncryptServiceLog::file_name() const {
   651	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.file_name)
   652	  return file_name_.GetNoArena();
   653	}
   654	inline void EncryptServiceLog::set_file_name(const ::std::string& value) {
   655	  
   656	  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   657	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.file_name)
   658	}
   659	#if LANG_CXX11
   660	inline void EncryptServiceLog::set_file_name(::std::string&& value) {
   661	  
   662	  file_name_.SetNoArena(
   663	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   664	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.file_name)
   665	}
   666	#endif
   667	inline void EncryptServiceLog::set_file_name(const char* value) {
   668	  GOOGLE_DCHECK(value != NULL);
   669	  
   670	  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   671	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.file_name)
   672	}
   673	inline void EncryptServiceLog::set_file_name(const char* value, size_t size) {
   674	  
   675	  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   676	      ::std::string(reinterpret_cast<const char*>(value), size));
   677	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.file_name)
   678	}
   679	inline ::std::string* EncryptServiceLog::mutable_file_name() {
   680	  
   681	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.file_name)
   682	  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   683	}
   684	inline ::std::string* EncryptServiceLog::release_file_name() {
   685	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.file_name)
   686	  
   687	  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   688	}
   689	inline void EncryptServiceLog::set_allocated_file_name(::std::string* file_name) {
   690	  if (file_name != NULL) {
   691	    
   692	  } else {
   693	    
   694	  }
   695	  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
   696	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.file_name)
   697	}
   698	
   699	// uint32 action_type = 120;
   700	inline void EncryptServiceLog::clear_action_type() {
   701	  action_type_ = 0u;
   702	}
   703	inline ::google::protobuf::uint32 EncryptServiceLog::action_type() const {
   704	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.action_type)
   705	  return action_type_;
   706	}
   707	inline void EncryptServiceLog::set_action_type(::google::protobuf::uint32 value) {
   708	  
   709	  action_type_ = value;
   710	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.action_type)
   711	}
   712	
   713	// string comment = 130;
   714	inline void EncryptServiceLog::clear_comment() {
   715	  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   716	}
   717	inline const ::std::string& EncryptServiceLog::comment() const {
   718	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.comment)
   719	  return comment_.GetNoArena();
   720	}
   721	inline void EncryptServiceLog::set_comment(const ::std::string& value) {
   722	  
   723	  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   724	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.comment)
   725	}
   726	#if LANG_CXX11
   727	inline void EncryptServiceLog::set_comment(::std::string&& value) {
   728	  
   729	  comment_.SetNoArena(
   730	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   731	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.comment)
   732	}
   733	#endif
   734	inline void EncryptServiceLog::set_comment(const char* value) {
   735	  GOOGLE_DCHECK(value != NULL);
   736	  
   737	  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   738	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.comment)
   739	}
   740	inline void EncryptServiceLog::set_comment(const char* value, size_t size) {
   741	  
   742	  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   743	      ::std::string(reinterpret_cast<const char*>(value), size));
   744	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.comment)
   745	}
   746	inline ::std::string* EncryptServiceLog::mutable_comment() {
   747	  
   748	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.comment)
   749	  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   750	}
   751	inline ::std::string* EncryptServiceLog::release_comment() {
   752	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.comment)
   753	  
   754	  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   755	}
   756	inline void EncryptServiceLog::set_allocated_comment(::std::string* comment) {
   757	  if (comment != NULL) {
   758	    
   759	  } else {
   760	    
   761	  }
   762	  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
   763	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.comment)
   764	}
   765	
   766	#ifdef __GNUC__
   767	  #pragma GCC diagnostic pop
   768	#endif  // __GNUC__
   769	#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
   770	
   771	// @@protoc_insertion_point(namespace_scope)
   772	
   773	
   774	}  // namespace log
   775	}  // namespace cloudscreen
   776	}  // namespace com
   777	
   778	// @@protoc_insertion_point(global_scope)
   779	
   780	#endif  // PROTOBUF_encryptServiceLog_2eproto__INCLUDED
     1	// Generated by the protocol buffer compiler.  DO NOT EDIT!
     2	// source: encryptServiceLog.proto
     3	
     4	#ifndef PROTOBUF_encryptServiceLog_2eproto__INCLUDED
     5	#define PROTOBUF_encryptServiceLog_2eproto__INCLUDED
     6	
     7	#include <string>
     8	
     9	#include <google/protobuf/stubs/common.h>
    10	
    11	#if GOOGLE_PROTOBUF_VERSION < 3004000
    12	#error This file was generated by a newer version of protoc which is
    13	#error incompatible with your Protocol Buffer headers.  Please update
    14	#error your headers.
    15	#endif
    16	#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
    17	#error This file was generated by an older version of protoc which is
    18	#error incompatible with your Protocol Buffer headers.  Please
    19	#error regenerate this file with a newer version of protoc.
    20	#endif
    21	
    22	#include <google/protobuf/io/coded_stream.h>
    23	#include <google/protobuf/arena.h>
    24	#include <google/protobuf/arenastring.h>
    25	#include <google/protobuf/generated_message_table_driven.h>
    26	#include <google/protobuf/generated_message_util.h>
    27	#include <google/protobuf/metadata.h>
    28	#include <google/protobuf/message.h>
    29	#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
    30	#include <google/protobuf/extension_set.h>  // IWYU pragma: export
    31	#include <google/protobuf/unknown_field_set.h>
    32	// @@protoc_insertion_point(includes)
    33	namespace com {
    34	namespace cloudscreen {
    35	namespace log {
    36	class EncryptServiceLog;
    37	class EncryptServiceLogDefaultTypeInternal;
    38	extern EncryptServiceLogDefaultTypeInternal _EncryptServiceLog_default_instance_;
    39	}  // namespace log
    40	}  // namespace cloudscreen
    41	}  // namespace com
    42	
    43	namespace com {
    44	namespace cloudscreen {
    45	namespace log {
    46	
    47	namespace protobuf_encryptServiceLog_2eproto {
    48	// Internal implementation detail -- do not call these.
    49	struct TableStruct {
    50	  static const ::google::protobuf::internal::ParseTableField entries[];
    51	  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    52	  static const ::google::protobuf::internal::ParseTable schema[];
    53	  static const ::google::protobuf::uint32 offsets[];
    54	  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
    55	  static const ::google::protobuf::internal::SerializationTable serialization_table[];
    56	  static void InitDefaultsImpl();
    57	};
    58	void AddDescriptors();
    59	void InitDefaults();
    60	}  // namespace protobuf_encryptServiceLog_2eproto
    61	
    62	// ===================================================================
    63	
    64	class EncryptServiceLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.cloudscreen.log.EncryptServiceLog) */ {
    65	 public:
    66	  EncryptServiceLog();
    67	  virtual ~EncryptServiceLog();
    68	
    69	  EncryptServiceLog(const EncryptServiceLog& from);
    70	
    71	  inline EncryptServiceLog& operator=(const EncryptServiceLog& from) {
    72	    CopyFrom(from);
    73	    return *this;
    74	  }
    75	  #if LANG_CXX11
    76	  EncryptServiceLog(EncryptServiceLog&& from) noexcept
    77	    : EncryptServiceLog() {
    78	    *this = ::std::move(from);
    79	  }
    80	
    81	  inline EncryptServiceLog& operator=(EncryptServiceLog&& from) noexcept {
    82	    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
    83	      if (this != &from) InternalSwap(&from);
    84	    } else {
    85	      CopyFrom(from);
    86	    }
    87	    return *this;
    88	  }
    89	  #endif
    90	  static const ::google::protobuf::Descriptor* descriptor();
    91	  static const EncryptServiceLog& default_instance();
    92	
    93	  static inline const EncryptServiceLog* internal_default_instance() {
    94	    return reinterpret_cast<const EncryptServiceLog*>(
    95	               &_EncryptServiceLog_default_instance_);
    96	  }
    97	  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98	    0;
    99	
   100	  void Swap(EncryptServiceLog* other);
   101	  friend void swap(EncryptServiceLog& a, EncryptServiceLog& b) {
   102	    a.Swap(&b);
   103	  }
   104	
   105	  // implements Message ----------------------------------------------
   106	
   107	  inline EncryptServiceLog* New() const PROTOBUF_FINAL { return New(NULL); }
   108	
   109	  EncryptServiceLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
   110	  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
   111	  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
   112	  void CopyFrom(const EncryptServiceLog& from);
   113	  void MergeFrom(const EncryptServiceLog& from);
   114	  void Clear() PROTOBUF_FINAL;
   115	  bool IsInitialized() const PROTOBUF_FINAL;
   116	
   117	  size_t ByteSizeLong() const PROTOBUF_FINAL;
   118	  bool MergePartialFromCodedStream(
   119	      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
   120	  void SerializeWithCachedSizes(
   121	      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
   122	  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
   123	      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
   124	  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
   125	  private:
   126	  void SharedCtor();
   127	  void SharedDtor();
   128	  void SetCachedSize(int size) const PROTOBUF_FINAL;
   129	  void InternalSwap(EncryptServiceLog* other);
   130	  private:
   131	  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
   132	    return NULL;
   133	  }
   134	  inline void* MaybeArenaPtr() const {
   135	    return NULL;
   136	  }
   137	  public:
   138	
   139	  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;
   140	
   141	  // nested types ----------------------------------------------------
   142	
   143	  // accessors -------------------------------------------------------
   144	
   145	  // string csp_product_name = 30;
   146	  void clear_csp_product_name();
   147	  static const int kCspProductNameFieldNumber = 30;
   148	  const ::std::string& csp_product_name() const;
   149	  void set_csp_product_name(const ::std::string& value);
   150	  #if LANG_CXX11
   151	  void set_csp_product_name(::std::string&& value);
   152	  #endif
   153	  void set_csp_product_name(const char* value);
   154	  void set_csp_product_name(const char* value, size_t size);
   155	  ::std::string* mutable_csp_product_name();
   156	  ::std::string* release_csp_product_name();
   157	  void set_allocated_csp_product_name(::std::string* csp_product_name);
   158	
   159	  // string session_id = 40;
   160	  void clear_session_id();
   161	  static const int kSessionIdFieldNumber = 40;
   162	  const ::std::string& session_id() const;
   163	  void set_session_id(const ::std::string& value);
   164	  #if LANG_CXX11
   165	  void set_session_id(::std::string&& value);
   166	  #endif
   167	  void set_session_id(const char* value);
   168	  void set_session_id(const char* value, size_t size);
   169	  ::std::string* mutable_session_id();
   170	  ::std::string* release_session_id();
   171	  void set_allocated_session_id(::std::string* session_id);
   172	
   173	  // string traffic_id = 50;
   174	  void clear_traffic_id();
   175	  static const int kTrafficIdFieldNumber = 50;
   176	  const ::std::string& traffic_id() const;
   177	  void set_traffic_id(const ::std::string& value);
   178	  #if LANG_CXX11
   179	  void set_traffic_id(::std::string&& value);
   180	  #endif
   181	  void set_traffic_id(const char* value);
   182	  void set_traffic_id(const char* value, size_t size);
   183	  ::std::string* mutable_traffic_id();
   184	  ::std::string* release_traffic_id();
   185	  void set_allocated_traffic_id(::std::string* traffic_id);
   186	
   187	  // string trigger_time = 80;
   188	  void clear_trigger_time();
   189	  static const int kTriggerTimeFieldNumber = 80;
   190	  const ::std::string& trigger_time() const;
   191	  void set_trigger_time(const ::std::string& value);
   192	  #if LANG_CXX11
   193	  void set_trigger_time(::std::string&& value);
   194	  #endif
   195	  void set_trigger_time(const char* value);
   196	  void set_trigger_time(const char* value, size_t size);
   197	  ::std::string* mutable_trigger_time();
   198	  ::std::string* release_trigger_time();
   199	  void set_allocated_trigger_time(::std::string* trigger_time);
   200	
   201	  // string trigger_reason = 90;
   202	  void clear_trigger_reason();
   203	  static const int kTriggerReasonFieldNumber = 90;
   204	  const ::std::string& trigger_reason() const;
   205	  void set_trigger_reason(const ::std::string& value);
   206	  #if LANG_CXX11
   207	  void set_trigger_reason(::std::string&& value);
   208	  #endif
   209	  void set_trigger_reason(const char* value);
   210	  void set_trigger_reason(const char* value, size_t size);
   211	  ::std::string* mutable_trigger_reason();
   212	  ::std::string* release_trigger_reason();
   213	  void set_allocated_trigger_reason(::std::string* trigger_reason);
   214	
   215	  // string file_name = 110;
   216	  void clear_file_name();
   217	  static const int kFileNameFieldNumber = 110;
   218	  const ::std::string& file_name() const;
   219	  void set_file_name(const ::std::string& value);
   220	  #if LANG_CXX11
   221	  void set_file_name(::std::string&& value);
   222	  #endif
   223	  void set_file_name(const char* value);
   224	  void set_file_name(const char* value, size_t size);
   225	  ::std::string* mutable_file_name();
   226	  ::std::string* release_file_name();
   227	  void set_allocated_file_name(::std::string* file_name);
   228	
   229	  // string comment = 130;
   230	  void clear_comment();
   231	  static const int kCommentFieldNumber = 130;
   232	  const ::std::string& comment() const;
   233	  void set_comment(const ::std::string& value);
   234	  #if LANG_CXX11
   235	  void set_comment(::std::string&& value);
   236	  #endif
   237	  void set_comment(const char* value);
   238	  void set_comment(const char* value, size_t size);
   239	  ::std::string* mutable_comment();
   240	  ::std::string* release_comment();
   241	  void set_allocated_comment(::std::string* comment);
   242	
   243	  // uint64 device_activity_id = 10;
   244	  void clear_device_activity_id();
   245	  static const int kDeviceActivityIdFieldNumber = 10;
   246	  ::google::protobuf::uint64 device_activity_id() const;
   247	  void set_device_activity_id(::google::protobuf::uint64 value);
   248	
   249	  // uint64 csp_product_id = 20;
   250	  void clear_csp_product_id();
   251	  static const int kCspProductIdFieldNumber = 20;
   252	  ::google::protobuf::uint64 csp_product_id() const;
   253	  void set_csp_product_id(::google::protobuf::uint64 value);
   254	
   255	  // uint64 enterprise_id = 60;
   256	  void clear_enterprise_id();
   257	  static const int kEnterpriseIdFieldNumber = 60;
   258	  ::google::protobuf::uint64 enterprise_id() const;
   259	  void set_enterprise_id(::google::protobuf::uint64 value);
   260	
   261	  // uint64 user_id = 70;
   262	  void clear_user_id();
   263	  static const int kUserIdFieldNumber = 70;
   264	  ::google::protobuf::uint64 user_id() const;
   265	  void set_user_id(::google::protobuf::uint64 value);
   266	
   267	  // uint32 is_succeed = 100;
   268	  void clear_is_succeed();
   269	  static const int kIsSucceedFieldNumber = 100;
   270	  ::google::protobuf::uint32 is_succeed() const;
   271	  void set_is_succeed(::google::protobuf::uint32 value);
   272	
   273	  // uint32 action_type = 120;
   274	  void clear_action_type();
   275	  static const int kActionTypeFieldNumber = 120;
   276	  ::google::protobuf::uint32 action_type() const;
   277	  void set_action_type(::google::protobuf::uint32 value);
   278	
   279	  // @@protoc_insertion_point(class_scope:com.cloudscreen.log.EncryptServiceLog)
   280	 private:
   281	
   282	  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
   283	  ::google::protobuf::internal::ArenaStringPtr csp_product_name_;
   284	  ::google::protobuf::internal::ArenaStringPtr session_id_;
   285	  ::google::protobuf::internal::ArenaStringPtr traffic_id_;
   286	  ::google::protobuf::internal::ArenaStringPtr trigger_time_;
   287	  ::google::protobuf::internal::ArenaStringPtr trigger_reason_;
   288	  ::google::protobuf::internal::ArenaStringPtr file_name_;
   289	  ::google::protobuf::internal::ArenaStringPtr comment_;
   290	  ::google::protobuf::uint64 device_activity_id_;
   291	  ::google::protobuf::uint64 csp_product_id_;
   292	  ::google::protobuf::uint64 enterprise_id_;
   293	  ::google::protobuf::uint64 user_id_;
   294	  ::google::protobuf::uint32 is_succeed_;
   295	  ::google::protobuf::uint32 action_type_;
   296	  mutable int _cached_size_;
   297	  friend struct protobuf_encryptServiceLog_2eproto::TableStruct;
   298	};
   299	// ===================================================================
   300	
   301	
   302	// ===================================================================
   303	
   304	#if !PROTOBUF_INLINE_NOT_IN_HEADERS
   305	#ifdef __GNUC__
   306	  #pragma GCC diagnostic push
   307	  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
   308	#endif  // __GNUC__
   309	// EncryptServiceLog
   310	
   311	// uint64 device_activity_id = 10;
   312	inline void EncryptServiceLog::clear_device_activity_id() {
   313	  device_activity_id_ = GOOGLE_ULONGLONG(0);
   314	}
   315	inline ::google::protobuf::uint64 EncryptServiceLog::device_activity_id() const {
   316	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
   317	  return device_activity_id_;
   318	}
   319	inline void EncryptServiceLog::set_device_activity_id(::google::protobuf::uint64 value) {
   320	  
   321	  device_activity_id_ = value;
   322	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.device_activity_id)
   323	}
   324	
   325	// uint64 csp_product_id = 20;
   326	inline void EncryptServiceLog::clear_csp_product_id() {
   327	  csp_product_id_ = GOOGLE_ULONGLONG(0);
   328	}
   329	inline ::google::protobuf::uint64 EncryptServiceLog::csp_product_id() const {
   330	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
   331	  return csp_product_id_;
   332	}
   333	inline void EncryptServiceLog::set_csp_product_id(::google::protobuf::uint64 value) {
   334	  
   335	  csp_product_id_ = value;
   336	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_id)
   337	}
   338	
   339	// string csp_product_name = 30;
   340	inline void EncryptServiceLog::clear_csp_product_name() {
   341	  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   342	}
   343	inline const ::std::string& EncryptServiceLog::csp_product_name() const {
   344	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   345	  return csp_product_name_.GetNoArena();
   346	}
   347	inline void EncryptServiceLog::set_csp_product_name(const ::std::string& value) {
   348	  
   349	  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   350	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   351	}
   352	#if LANG_CXX11
   353	inline void EncryptServiceLog::set_csp_product_name(::std::string&& value) {
   354	  
   355	  csp_product_name_.SetNoArena(
   356	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   357	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   358	}
   359	#endif
   360	inline void EncryptServiceLog::set_csp_product_name(const char* value) {
   361	  GOOGLE_DCHECK(value != NULL);
   362	  
   363	  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   364	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   365	}
   366	inline void EncryptServiceLog::set_csp_product_name(const char* value, size_t size) {
   367	  
   368	  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   369	      ::std::string(reinterpret_cast<const char*>(value), size));
   370	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   371	}
   372	inline ::std::string* EncryptServiceLog::mutable_csp_product_name() {
   373	  
   374	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   375	  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   376	}
   377	inline ::std::string* EncryptServiceLog::release_csp_product_name() {
   378	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   379	  
   380	  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   381	}
   382	inline void EncryptServiceLog::set_allocated_csp_product_name(::std::string* csp_product_name) {
   383	  if (csp_product_name != NULL) {
   384	    
   385	  } else {
   386	    
   387	  }
   388	  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
   389	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.csp_product_name)
   390	}
   391	
   392	// string session_id = 40;
   393	inline void EncryptServiceLog::clear_session_id() {
   394	  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   395	}
   396	inline const ::std::string& EncryptServiceLog::session_id() const {
   397	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.session_id)
   398	  return session_id_.GetNoArena();
   399	}
   400	inline void EncryptServiceLog::set_session_id(const ::std::string& value) {
   401	  
   402	  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   403	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.session_id)
   404	}
   405	#if LANG_CXX11
   406	inline void EncryptServiceLog::set_session_id(::std::string&& value) {
   407	  
   408	  session_id_.SetNoArena(
   409	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   410	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.session_id)
   411	}
   412	#endif
   413	inline void EncryptServiceLog::set_session_id(const char* value) {
   414	  GOOGLE_DCHECK(value != NULL);
   415	  
   416	  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   417	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.session_id)
   418	}
   419	inline void EncryptServiceLog::set_session_id(const char* value, size_t size) {
   420	  
   421	  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   422	      ::std::string(reinterpret_cast<const char*>(value), size));
   423	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.session_id)
   424	}
   425	inline ::std::string* EncryptServiceLog::mutable_session_id() {
   426	  
   427	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.session_id)
   428	  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   429	}
   430	inline ::std::string* EncryptServiceLog::release_session_id() {
   431	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.session_id)
   432	  
   433	  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   434	}
   435	inline void EncryptServiceLog::set_allocated_session_id(::std::string* session_id) {
   436	  if (session_id != NULL) {
   437	    
   438	  } else {
   439	    
   440	  }
   441	  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
   442	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.session_id)
   443	}
   444	
   445	// string traffic_id = 50;
   446	inline void EncryptServiceLog::clear_traffic_id() {
   447	  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   448	}
   449	inline const ::std::string& EncryptServiceLog::traffic_id() const {
   450	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   451	  return traffic_id_.GetNoArena();
   452	}
   453	inline void EncryptServiceLog::set_traffic_id(const ::std::string& value) {
   454	  
   455	  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   456	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   457	}
   458	#if LANG_CXX11
   459	inline void EncryptServiceLog::set_traffic_id(::std::string&& value) {
   460	  
   461	  traffic_id_.SetNoArena(
   462	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   463	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   464	}
   465	#endif
   466	inline void EncryptServiceLog::set_traffic_id(const char* value) {
   467	  GOOGLE_DCHECK(value != NULL);
   468	  
   469	  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   470	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   471	}
   472	inline void EncryptServiceLog::set_traffic_id(const char* value, size_t size) {
   473	  
   474	  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   475	      ::std::string(reinterpret_cast<const char*>(value), size));
   476	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   477	}
   478	inline ::std::string* EncryptServiceLog::mutable_traffic_id() {
   479	  
   480	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   481	  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   482	}
   483	inline ::std::string* EncryptServiceLog::release_traffic_id() {
   484	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   485	  
   486	  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   487	}
   488	inline void EncryptServiceLog::set_allocated_traffic_id(::std::string* traffic_id) {
   489	  if (traffic_id != NULL) {
   490	    
   491	  } else {
   492	    
   493	  }
   494	  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
   495	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.traffic_id)
   496	}
   497	
   498	// uint64 enterprise_id = 60;
   499	inline void EncryptServiceLog::clear_enterprise_id() {
   500	  enterprise_id_ = GOOGLE_ULONGLONG(0);
   501	}
   502	inline ::google::protobuf::uint64 EncryptServiceLog::enterprise_id() const {
   503	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
   504	  return enterprise_id_;
   505	}
   506	inline void EncryptServiceLog::set_enterprise_id(::google::protobuf::uint64 value) {
   507	  
   508	  enterprise_id_ = value;
   509	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.enterprise_id)
   510	}
   511	
   512	// uint64 user_id = 70;
   513	inline void EncryptServiceLog::clear_user_id() {
   514	  user_id_ = GOOGLE_ULONGLONG(0);
   515	}
   516	inline ::google::protobuf::uint64 EncryptServiceLog::user_id() const {
   517	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.user_id)
   518	  return user_id_;
   519	}
   520	inline void EncryptServiceLog::set_user_id(::google::protobuf::uint64 value) {
   521	  
   522	  user_id_ = value;
   523	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.user_id)
   524	}
   525	
   526	// string trigger_time = 80;
   527	inline void EncryptServiceLog::clear_trigger_time() {
   528	  trigger_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   529	}
   530	inline const ::std::string& EncryptServiceLog::trigger_time() const {
   531	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   532	  return trigger_time_.GetNoArena();
   533	}
   534	inline void EncryptServiceLog::set_trigger_time(const ::std::string& value) {
   535	  
   536	  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   537	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   538	}
   539	#if LANG_CXX11
   540	inline void EncryptServiceLog::set_trigger_time(::std::string&& value) {
   541	  
   542	  trigger_time_.SetNoArena(
   543	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   544	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   545	}
   546	#endif
   547	inline void EncryptServiceLog::set_trigger_time(const char* value) {
   548	  GOOGLE_DCHECK(value != NULL);
   549	  
   550	  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   551	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   552	}
   553	inline void EncryptServiceLog::set_trigger_time(const char* value, size_t size) {
   554	  
   555	  trigger_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   556	      ::std::string(reinterpret_cast<const char*>(value), size));
   557	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   558	}
   559	inline ::std::string* EncryptServiceLog::mutable_trigger_time() {
   560	  
   561	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   562	  return trigger_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   563	}
   564	inline ::std::string* EncryptServiceLog::release_trigger_time() {
   565	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   566	  
   567	  return trigger_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   568	}
   569	inline void EncryptServiceLog::set_allocated_trigger_time(::std::string* trigger_time) {
   570	  if (trigger_time != NULL) {
   571	    
   572	  } else {
   573	    
   574	  }
   575	  trigger_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_time);
   576	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_time)
   577	}
   578	
   579	// string trigger_reason = 90;
   580	inline void EncryptServiceLog::clear_trigger_reason() {
   581	  trigger_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   582	}
   583	inline const ::std::string& EncryptServiceLog::trigger_reason() const {
   584	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   585	  return trigger_reason_.GetNoArena();
   586	}
   587	inline void EncryptServiceLog::set_trigger_reason(const ::std::string& value) {
   588	  
   589	  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   590	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   591	}
   592	#if LANG_CXX11
   593	inline void EncryptServiceLog::set_trigger_reason(::std::string&& value) {
   594	  
   595	  trigger_reason_.SetNoArena(
   596	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   597	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   598	}
   599	#endif
   600	inline void EncryptServiceLog::set_trigger_reason(const char* value) {
   601	  GOOGLE_DCHECK(value != NULL);
   602	  
   603	  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   604	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   605	}
   606	inline void EncryptServiceLog::set_trigger_reason(const char* value, size_t size) {
   607	  
   608	  trigger_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   609	      ::std::string(reinterpret_cast<const char*>(value), size));
   610	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   611	}
   612	inline ::std::string* EncryptServiceLog::mutable_trigger_reason() {
   613	  
   614	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   615	  return trigger_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   616	}
   617	inline ::std::string* EncryptServiceLog::release_trigger_reason() {
   618	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   619	  
   620	  return trigger_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   621	}
   622	inline void EncryptServiceLog::set_allocated_trigger_reason(::std::string* trigger_reason) {
   623	  if (trigger_reason != NULL) {
   624	    
   625	  } else {
   626	    
   627	  }
   628	  trigger_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trigger_reason);
   629	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.trigger_reason)
   630	}
   631	
   632	// uint32 is_succeed = 100;
   633	inline void EncryptServiceLog::clear_is_succeed() {
   634	  is_succeed_ = 0u;
   635	}
   636	inline ::google::protobuf::uint32 EncryptServiceLog::is_succeed() const {
   637	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.is_succeed)
   638	  return is_succeed_;
   639	}
   640	inline void EncryptServiceLog::set_is_succeed(::google::protobuf::uint32 value) {
   641	  
   642	  is_succeed_ = value;
   643	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.is_succeed)
   644	}
   645	
   646	// string file_name = 110;
   647	inline void EncryptServiceLog::clear_file_name() {
   648	  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   649	}
   650	inline const ::std::string& EncryptServiceLog::file_name() const {
   651	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.file_name)
   652	  return file_name_.GetNoArena();
   653	}
   654	inline void EncryptServiceLog::set_file_name(const ::std::string& value) {
   655	  
   656	  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   657	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.file_name)
   658	}
   659	#if LANG_CXX11
   660	inline void EncryptServiceLog::set_file_name(::std::string&& value) {
   661	  
   662	  file_name_.SetNoArena(
   663	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   664	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.file_name)
   665	}
   666	#endif
   667	inline void EncryptServiceLog::set_file_name(const char* value) {
   668	  GOOGLE_DCHECK(value != NULL);
   669	  
   670	  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   671	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.file_name)
   672	}
   673	inline void EncryptServiceLog::set_file_name(const char* value, size_t size) {
   674	  
   675	  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   676	      ::std::string(reinterpret_cast<const char*>(value), size));
   677	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.file_name)
   678	}
   679	inline ::std::string* EncryptServiceLog::mutable_file_name() {
   680	  
   681	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.file_name)
   682	  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   683	}
   684	inline ::std::string* EncryptServiceLog::release_file_name() {
   685	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.file_name)
   686	  
   687	  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   688	}
   689	inline void EncryptServiceLog::set_allocated_file_name(::std::string* file_name) {
   690	  if (file_name != NULL) {
   691	    
   692	  } else {
   693	    
   694	  }
   695	  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
   696	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.file_name)
   697	}
   698	
   699	// uint32 action_type = 120;
   700	inline void EncryptServiceLog::clear_action_type() {
   701	  action_type_ = 0u;
   702	}
   703	inline ::google::protobuf::uint32 EncryptServiceLog::action_type() const {
   704	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.action_type)
   705	  return action_type_;
   706	}
   707	inline void EncryptServiceLog::set_action_type(::google::protobuf::uint32 value) {
   708	  
   709	  action_type_ = value;
   710	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.action_type)
   711	}
   712	
   713	// string comment = 130;
   714	inline void EncryptServiceLog::clear_comment() {
   715	  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   716	}
   717	inline const ::std::string& EncryptServiceLog::comment() const {
   718	  // @@protoc_insertion_point(field_get:com.cloudscreen.log.EncryptServiceLog.comment)
   719	  return comment_.GetNoArena();
   720	}
   721	inline void EncryptServiceLog::set_comment(const ::std::string& value) {
   722	  
   723	  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
   724	  // @@protoc_insertion_point(field_set:com.cloudscreen.log.EncryptServiceLog.comment)
   725	}
   726	#if LANG_CXX11
   727	inline void EncryptServiceLog::set_comment(::std::string&& value) {
   728	  
   729	  comment_.SetNoArena(
   730	    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
   731	  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.log.EncryptServiceLog.comment)
   732	}
   733	#endif
   734	inline void EncryptServiceLog::set_comment(const char* value) {
   735	  GOOGLE_DCHECK(value != NULL);
   736	  
   737	  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
   738	  // @@protoc_insertion_point(field_set_char:com.cloudscreen.log.EncryptServiceLog.comment)
   739	}
   740	inline void EncryptServiceLog::set_comment(const char* value, size_t size) {
   741	  
   742	  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
   743	      ::std::string(reinterpret_cast<const char*>(value), size));
   744	  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.log.EncryptServiceLog.comment)
   745	}
   746	inline ::std::string* EncryptServiceLog::mutable_comment() {
   747	  
   748	  // @@protoc_insertion_point(field_mutable:com.cloudscreen.log.EncryptServiceLog.comment)
   749	  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   750	}
   751	inline ::std::string* EncryptServiceLog::release_comment() {
   752	  // @@protoc_insertion_point(field_release:com.cloudscreen.log.EncryptServiceLog.comment)
   753	  
   754	  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
   755	}
   756	inline void EncryptServiceLog::set_allocated_comment(::std::string* comment) {
   757	  if (comment != NULL) {
   758	    
   759	  } else {
   760	    
   761	  }
   762	  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
   763	  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.log.EncryptServiceLog.comment)
   764	}
   765	
   766	#ifdef __GNUC__
   767	  #pragma GCC diagnostic pop
   768	#endif  // __GNUC__
   769	#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
   770	
   771	// @@protoc_insertion_point(namespace_scope)
   772	
   773	
   774	}  // namespace log
   775	}  // namespace cloudscreen
   776	}  // namespace com
   777	
   778	// @@protoc_insertion_point(global_scope)
   779	
   780	#endif  // PROTOBUF_encryptServiceLog_2eproto__INCLUDED
