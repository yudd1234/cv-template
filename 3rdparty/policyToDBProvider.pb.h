// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policyToDBProvider.proto

#ifndef PROTOBUF_policyToDBProvider_2eproto__INCLUDED
#define PROTOBUF_policyToDBProvider_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace policymsgpolicytodbprovider {
class MsgFromPolicyToDBProvider;
class MsgFromPolicyToDBProviderDefaultTypeInternal;
extern MsgFromPolicyToDBProviderDefaultTypeInternal _MsgFromPolicyToDBProvider_default_instance_;
}  // namespace policymsgpolicytodbprovider

namespace policymsgpolicytodbprovider {

namespace protobuf_policyToDBProvider_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_policyToDBProvider_2eproto

// ===================================================================

class MsgFromPolicyToDBProvider : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider) */ {
 public:
  MsgFromPolicyToDBProvider();
  virtual ~MsgFromPolicyToDBProvider();

  MsgFromPolicyToDBProvider(const MsgFromPolicyToDBProvider& from);

  inline MsgFromPolicyToDBProvider& operator=(const MsgFromPolicyToDBProvider& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgFromPolicyToDBProvider(MsgFromPolicyToDBProvider&& from) noexcept
    : MsgFromPolicyToDBProvider() {
    *this = ::std::move(from);
  }

  inline MsgFromPolicyToDBProvider& operator=(MsgFromPolicyToDBProvider&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFromPolicyToDBProvider& default_instance();

  static inline const MsgFromPolicyToDBProvider* internal_default_instance() {
    return reinterpret_cast<const MsgFromPolicyToDBProvider*>(
               &_MsgFromPolicyToDBProvider_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MsgFromPolicyToDBProvider* other);
  friend void swap(MsgFromPolicyToDBProvider& a, MsgFromPolicyToDBProvider& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgFromPolicyToDBProvider* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgFromPolicyToDBProvider* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgFromPolicyToDBProvider& from);
  void MergeFrom(const MsgFromPolicyToDBProvider& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgFromPolicyToDBProvider* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 map_id = 60;
  int map_id_size() const;
  void clear_map_id();
  static const int kMapIdFieldNumber = 60;
  ::google::protobuf::uint64 map_id(int index) const;
  void set_map_id(int index, ::google::protobuf::uint64 value);
  void add_map_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      map_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_map_id();

  // repeated uint64 device_group_id = 61;
  int device_group_id_size() const;
  void clear_device_group_id();
  static const int kDeviceGroupIdFieldNumber = 61;
  ::google::protobuf::uint64 device_group_id(int index) const;
  void set_device_group_id(int index, ::google::protobuf::uint64 value);
  void add_device_group_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      device_group_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_device_group_id();

  // string session_id = 80;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 80;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string traffic_id = 90;
  void clear_traffic_id();
  static const int kTrafficIdFieldNumber = 90;
  const ::std::string& traffic_id() const;
  void set_traffic_id(const ::std::string& value);
  #if LANG_CXX11
  void set_traffic_id(::std::string&& value);
  #endif
  void set_traffic_id(const char* value);
  void set_traffic_id(const char* value, size_t size);
  ::std::string* mutable_traffic_id();
  ::std::string* release_traffic_id();
  void set_allocated_traffic_id(::std::string* traffic_id);

  // string block_tip = 120;
  void clear_block_tip();
  static const int kBlockTipFieldNumber = 120;
  const ::std::string& block_tip() const;
  void set_block_tip(const ::std::string& value);
  #if LANG_CXX11
  void set_block_tip(::std::string&& value);
  #endif
  void set_block_tip(const char* value);
  void set_block_tip(const char* value, size_t size);
  ::std::string* mutable_block_tip();
  ::std::string* release_block_tip();
  void set_allocated_block_tip(::std::string* block_tip);

  // uint64 user_id = 10;
  void clear_user_id();
  static const int kUserIdFieldNumber = 10;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // uint32 msg_id = 70;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 70;
  ::google::protobuf::uint32 msg_id() const;
  void set_msg_id(::google::protobuf::uint32 value);

  // uint64 device_id = 20;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 20;
  ::google::protobuf::uint64 device_id() const;
  void set_device_id(::google::protobuf::uint64 value);

  // uint64 product_id = 30;
  void clear_product_id();
  static const int kProductIdFieldNumber = 30;
  ::google::protobuf::uint64 product_id() const;
  void set_product_id(::google::protobuf::uint64 value);

  // uint64 enc_product_id = 31;
  void clear_enc_product_id();
  static const int kEncProductIdFieldNumber = 31;
  ::google::protobuf::uint64 enc_product_id() const;
  void set_enc_product_id(::google::protobuf::uint64 value);

  // uint64 event_id = 40;
  void clear_event_id();
  static const int kEventIdFieldNumber = 40;
  ::google::protobuf::uint64 event_id() const;
  void set_event_id(::google::protobuf::uint64 value);

  // uint64 network_id = 50;
  void clear_network_id();
  static const int kNetworkIdFieldNumber = 50;
  ::google::protobuf::uint64 network_id() const;
  void set_network_id(::google::protobuf::uint64 value);

  // uint64 device_activity_id = 100;
  void clear_device_activity_id();
  static const int kDeviceActivityIdFieldNumber = 100;
  ::google::protobuf::uint64 device_activity_id() const;
  void set_device_activity_id(::google::protobuf::uint64 value);

  // uint64 enterprise_id = 110;
  void clear_enterprise_id();
  static const int kEnterpriseIdFieldNumber = 110;
  ::google::protobuf::uint64 enterprise_id() const;
  void set_enterprise_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > map_id_;
  mutable int _map_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > device_group_id_;
  mutable int _device_group_id_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr traffic_id_;
  ::google::protobuf::internal::ArenaStringPtr block_tip_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint64 device_id_;
  ::google::protobuf::uint64 product_id_;
  ::google::protobuf::uint64 enc_product_id_;
  ::google::protobuf::uint64 event_id_;
  ::google::protobuf::uint64 network_id_;
  ::google::protobuf::uint64 device_activity_id_;
  ::google::protobuf::uint64 enterprise_id_;
  mutable int _cached_size_;
  friend struct protobuf_policyToDBProvider_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgFromPolicyToDBProvider

// uint64 user_id = 10;
inline void MsgFromPolicyToDBProvider::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::user_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.user_id)
  return user_id_;
}
inline void MsgFromPolicyToDBProvider::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.user_id)
}

// uint64 device_id = 20;
inline void MsgFromPolicyToDBProvider::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::device_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_id)
  return device_id_;
}
inline void MsgFromPolicyToDBProvider::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_id)
}

// uint64 product_id = 30;
inline void MsgFromPolicyToDBProvider::clear_product_id() {
  product_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::product_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.product_id)
  return product_id_;
}
inline void MsgFromPolicyToDBProvider::set_product_id(::google::protobuf::uint64 value) {
  
  product_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.product_id)
}

// uint64 enc_product_id = 31;
inline void MsgFromPolicyToDBProvider::clear_enc_product_id() {
  enc_product_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::enc_product_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.enc_product_id)
  return enc_product_id_;
}
inline void MsgFromPolicyToDBProvider::set_enc_product_id(::google::protobuf::uint64 value) {
  
  enc_product_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.enc_product_id)
}

// uint64 event_id = 40;
inline void MsgFromPolicyToDBProvider::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::event_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.event_id)
  return event_id_;
}
inline void MsgFromPolicyToDBProvider::set_event_id(::google::protobuf::uint64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.event_id)
}

// uint64 network_id = 50;
inline void MsgFromPolicyToDBProvider::clear_network_id() {
  network_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::network_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.network_id)
  return network_id_;
}
inline void MsgFromPolicyToDBProvider::set_network_id(::google::protobuf::uint64 value) {
  
  network_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.network_id)
}

// repeated uint64 map_id = 60;
inline int MsgFromPolicyToDBProvider::map_id_size() const {
  return map_id_.size();
}
inline void MsgFromPolicyToDBProvider::clear_map_id() {
  map_id_.Clear();
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::map_id(int index) const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.map_id)
  return map_id_.Get(index);
}
inline void MsgFromPolicyToDBProvider::set_map_id(int index, ::google::protobuf::uint64 value) {
  map_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.map_id)
}
inline void MsgFromPolicyToDBProvider::add_map_id(::google::protobuf::uint64 value) {
  map_id_.Add(value);
  // @@protoc_insertion_point(field_add:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.map_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MsgFromPolicyToDBProvider::map_id() const {
  // @@protoc_insertion_point(field_list:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.map_id)
  return map_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MsgFromPolicyToDBProvider::mutable_map_id() {
  // @@protoc_insertion_point(field_mutable_list:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.map_id)
  return &map_id_;
}

// repeated uint64 device_group_id = 61;
inline int MsgFromPolicyToDBProvider::device_group_id_size() const {
  return device_group_id_.size();
}
inline void MsgFromPolicyToDBProvider::clear_device_group_id() {
  device_group_id_.Clear();
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::device_group_id(int index) const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_group_id)
  return device_group_id_.Get(index);
}
inline void MsgFromPolicyToDBProvider::set_device_group_id(int index, ::google::protobuf::uint64 value) {
  device_group_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_group_id)
}
inline void MsgFromPolicyToDBProvider::add_device_group_id(::google::protobuf::uint64 value) {
  device_group_id_.Add(value);
  // @@protoc_insertion_point(field_add:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_group_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MsgFromPolicyToDBProvider::device_group_id() const {
  // @@protoc_insertion_point(field_list:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_group_id)
  return device_group_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MsgFromPolicyToDBProvider::mutable_device_group_id() {
  // @@protoc_insertion_point(field_mutable_list:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_group_id)
  return &device_group_id_;
}

// uint32 msg_id = 70;
inline void MsgFromPolicyToDBProvider::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::google::protobuf::uint32 MsgFromPolicyToDBProvider::msg_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.msg_id)
  return msg_id_;
}
inline void MsgFromPolicyToDBProvider::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.msg_id)
}

// string session_id = 80;
inline void MsgFromPolicyToDBProvider::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgFromPolicyToDBProvider::session_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
  return session_id_.GetNoArena();
}
inline void MsgFromPolicyToDBProvider::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}
#if LANG_CXX11
inline void MsgFromPolicyToDBProvider::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}
#endif
inline void MsgFromPolicyToDBProvider::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}
inline void MsgFromPolicyToDBProvider::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}
inline ::std::string* MsgFromPolicyToDBProvider::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgFromPolicyToDBProvider::release_session_id() {
  // @@protoc_insertion_point(field_release:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgFromPolicyToDBProvider::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.session_id)
}

// string traffic_id = 90;
inline void MsgFromPolicyToDBProvider::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgFromPolicyToDBProvider::traffic_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
  return traffic_id_.GetNoArena();
}
inline void MsgFromPolicyToDBProvider::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}
#if LANG_CXX11
inline void MsgFromPolicyToDBProvider::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}
#endif
inline void MsgFromPolicyToDBProvider::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}
inline void MsgFromPolicyToDBProvider::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}
inline ::std::string* MsgFromPolicyToDBProvider::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgFromPolicyToDBProvider::release_traffic_id() {
  // @@protoc_insertion_point(field_release:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgFromPolicyToDBProvider::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.traffic_id)
}

// uint64 device_activity_id = 100;
inline void MsgFromPolicyToDBProvider::clear_device_activity_id() {
  device_activity_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::device_activity_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_activity_id)
  return device_activity_id_;
}
inline void MsgFromPolicyToDBProvider::set_device_activity_id(::google::protobuf::uint64 value) {
  
  device_activity_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.device_activity_id)
}

// uint64 enterprise_id = 110;
inline void MsgFromPolicyToDBProvider::clear_enterprise_id() {
  enterprise_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsgFromPolicyToDBProvider::enterprise_id() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.enterprise_id)
  return enterprise_id_;
}
inline void MsgFromPolicyToDBProvider::set_enterprise_id(::google::protobuf::uint64 value) {
  
  enterprise_id_ = value;
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.enterprise_id)
}

// string block_tip = 120;
inline void MsgFromPolicyToDBProvider::clear_block_tip() {
  block_tip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgFromPolicyToDBProvider::block_tip() const {
  // @@protoc_insertion_point(field_get:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.block_tip)
  return block_tip_.GetNoArena();
}
inline void MsgFromPolicyToDBProvider::set_block_tip(const ::std::string& value) {
  
  block_tip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.block_tip)
}
#if LANG_CXX11
inline void MsgFromPolicyToDBProvider::set_block_tip(::std::string&& value) {
  
  block_tip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.block_tip)
}
#endif
inline void MsgFromPolicyToDBProvider::set_block_tip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  block_tip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.block_tip)
}
inline void MsgFromPolicyToDBProvider::set_block_tip(const char* value, size_t size) {
  
  block_tip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.block_tip)
}
inline ::std::string* MsgFromPolicyToDBProvider::mutable_block_tip() {
  
  // @@protoc_insertion_point(field_mutable:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.block_tip)
  return block_tip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgFromPolicyToDBProvider::release_block_tip() {
  // @@protoc_insertion_point(field_release:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.block_tip)
  
  return block_tip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgFromPolicyToDBProvider::set_allocated_block_tip(::std::string* block_tip) {
  if (block_tip != NULL) {
    
  } else {
    
  }
  block_tip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_tip);
  // @@protoc_insertion_point(field_set_allocated:policymsgpolicytodbprovider.MsgFromPolicyToDBProvider.block_tip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace policymsgpolicytodbprovider

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_policyToDBProvider_2eproto__INCLUDED
