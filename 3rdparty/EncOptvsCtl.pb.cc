// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EncOptvsCtl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EncOptvsCtl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cloudscreen {
namespace efsmoudle {
class MultiPartDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultiPart>
     _instance;
} _MultiPart_default_instance_;
class CTLRequestEncOptDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CTLRequestEncOpt>
     _instance;
} _CTLRequestEncOpt_default_instance_;
class ResponseEncParaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseEncPara>
     _instance;
} _ResponseEncPara_default_instance_;

namespace protobuf_EncOptvsCtl_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPart, cs_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPart, is_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPart, enc_method_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, traffic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, enc_enterprise_pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, enc_enterprise_cipherkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, enc_enterprice_test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, enc_or_dec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, multipart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, enterprise_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTLRequestEncOpt, csp_product_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEncPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEncPara, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEncPara, activity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEncPara, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEncPara, traffic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEncPara, opt_file_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEncPara, succeed_file_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEncPara, is_succeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEncPara, http_header_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(MultiPart)},
  { 8, -1, sizeof(CTLRequestEncOpt)},
  { 26, -1, sizeof(ResponseEncPara)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiPart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CTLRequestEncOpt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseEncPara_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "EncOptvsCtl.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MultiPart_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultiPart_default_instance_);_CTLRequestEncOpt_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CTLRequestEncOpt_default_instance_);_ResponseEncPara_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseEncPara_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021EncOptvsCtl.proto\022\031com.cloudscreen.efs"
      "moudle\"@\n\tMultiPart\022\016\n\006cs_key\030\001 \001(\t\022\017\n\007i"
      "s_file\030\002 \001(\010\022\022\n\nenc_method\030\003 \001(\004\"\335\002\n\020CTL"
      "RequestEncOpt\022\016\n\006msg_id\030\001 \001(\r\022\023\n\013activit"
      "y_id\030\002 \001(\004\022\022\n\nsession_id\030\003 \001(\t\022\022\n\ntraffi"
      "c_id\030\004 \001(\t\022\032\n\022enc_enterprise_pwd\030\005 \001(\t\022 "
      "\n\030enc_enterprise_cipherkey\030\006 \001(\t\022\033\n\023enc_"
      "enterprice_test\030\007 \001(\t\022\022\n\nenc_or_dec\030\010 \001("
      "\r\0227\n\tmultipart\030\n \003(\0132$.com.cloudscreen.e"
      "fsmoudle.MultiPart\022\022\n\nproduct_id\030\013 \001(\004\022\025"
      "\n\renterprise_id\030\014 \001(\004\022\017\n\007user_id\030\r \001(\004\022\030"
      "\n\020csp_product_name\030\016 \001(\t\"\267\001\n\017ResponseEnc"
      "Para\022\016\n\006msg_id\030\001 \001(\r\022\023\n\013activity_id\030\002 \001("
      "\004\022\022\n\nsession_id\030\003 \001(\t\022\022\n\ntraffic_id\030\004 \001("
      "\t\022\024\n\014opt_file_num\030\005 \001(\r\022\030\n\020succeed_file_"
      "num\030\006 \001(\r\022\022\n\nis_succeed\030\007 \001(\r\022\023\n\013http_he"
      "ader\030\010 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 658);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EncOptvsCtl.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_EncOptvsCtl_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiPart::kCsKeyFieldNumber;
const int MultiPart::kIsFileFieldNumber;
const int MultiPart::kEncMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiPart::MultiPart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EncOptvsCtl_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cloudscreen.efsmoudle.MultiPart)
}
MultiPart::MultiPart(const MultiPart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cs_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cs_key().size() > 0) {
    cs_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cs_key_);
  }
  ::memcpy(&enc_method_, &from.enc_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_file_) -
    reinterpret_cast<char*>(&enc_method_)) + sizeof(is_file_));
  // @@protoc_insertion_point(copy_constructor:com.cloudscreen.efsmoudle.MultiPart)
}

void MultiPart::SharedCtor() {
  cs_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enc_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_file_) -
      reinterpret_cast<char*>(&enc_method_)) + sizeof(is_file_));
  _cached_size_ = 0;
}

MultiPart::~MultiPart() {
  // @@protoc_insertion_point(destructor:com.cloudscreen.efsmoudle.MultiPart)
  SharedDtor();
}

void MultiPart::SharedDtor() {
  cs_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultiPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiPart::descriptor() {
  protobuf_EncOptvsCtl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EncOptvsCtl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiPart& MultiPart::default_instance() {
  protobuf_EncOptvsCtl_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiPart* MultiPart::New(::google::protobuf::Arena* arena) const {
  MultiPart* n = new MultiPart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiPart::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cloudscreen.efsmoudle.MultiPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cs_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enc_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_file_) -
      reinterpret_cast<char*>(&enc_method_)) + sizeof(is_file_));
  _internal_metadata_.Clear();
}

bool MultiPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cloudscreen.efsmoudle.MultiPart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cs_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cs_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cs_key().data(), static_cast<int>(this->cs_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.MultiPart.cs_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 enc_method = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enc_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cloudscreen.efsmoudle.MultiPart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cloudscreen.efsmoudle.MultiPart)
  return false;
#undef DO_
}

void MultiPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cloudscreen.efsmoudle.MultiPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cs_key = 1;
  if (this->cs_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cs_key().data(), static_cast<int>(this->cs_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.MultiPart.cs_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cs_key(), output);
  }

  // bool is_file = 2;
  if (this->is_file() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_file(), output);
  }

  // uint64 enc_method = 3;
  if (this->enc_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enc_method(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cloudscreen.efsmoudle.MultiPart)
}

::google::protobuf::uint8* MultiPart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cloudscreen.efsmoudle.MultiPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cs_key = 1;
  if (this->cs_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cs_key().data(), static_cast<int>(this->cs_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.MultiPart.cs_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cs_key(), target);
  }

  // bool is_file = 2;
  if (this->is_file() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_file(), target);
  }

  // uint64 enc_method = 3;
  if (this->enc_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enc_method(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cloudscreen.efsmoudle.MultiPart)
  return target;
}

size_t MultiPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cloudscreen.efsmoudle.MultiPart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string cs_key = 1;
  if (this->cs_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cs_key());
  }

  // uint64 enc_method = 3;
  if (this->enc_method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->enc_method());
  }

  // bool is_file = 2;
  if (this->is_file() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiPart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cloudscreen.efsmoudle.MultiPart)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiPart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiPart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cloudscreen.efsmoudle.MultiPart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cloudscreen.efsmoudle.MultiPart)
    MergeFrom(*source);
  }
}

void MultiPart::MergeFrom(const MultiPart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cloudscreen.efsmoudle.MultiPart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cs_key().size() > 0) {

    cs_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cs_key_);
  }
  if (from.enc_method() != 0) {
    set_enc_method(from.enc_method());
  }
  if (from.is_file() != 0) {
    set_is_file(from.is_file());
  }
}

void MultiPart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cloudscreen.efsmoudle.MultiPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiPart::CopyFrom(const MultiPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cloudscreen.efsmoudle.MultiPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPart::IsInitialized() const {
  return true;
}

void MultiPart::Swap(MultiPart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiPart::InternalSwap(MultiPart* other) {
  using std::swap;
  cs_key_.Swap(&other->cs_key_);
  swap(enc_method_, other->enc_method_);
  swap(is_file_, other->is_file_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiPart::GetMetadata() const {
  protobuf_EncOptvsCtl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EncOptvsCtl_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiPart

// string cs_key = 1;
void MultiPart::clear_cs_key() {
  cs_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MultiPart::cs_key() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.MultiPart.cs_key)
  return cs_key_.GetNoArena();
}
void MultiPart::set_cs_key(const ::std::string& value) {
  
  cs_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}
#if LANG_CXX11
void MultiPart::set_cs_key(::std::string&& value) {
  
  cs_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}
#endif
void MultiPart::set_cs_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cs_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}
void MultiPart::set_cs_key(const char* value, size_t size) {
  
  cs_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}
::std::string* MultiPart::mutable_cs_key() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.MultiPart.cs_key)
  return cs_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MultiPart::release_cs_key() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.MultiPart.cs_key)
  
  return cs_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MultiPart::set_allocated_cs_key(::std::string* cs_key) {
  if (cs_key != NULL) {
    
  } else {
    
  }
  cs_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cs_key);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.MultiPart.cs_key)
}

// bool is_file = 2;
void MultiPart::clear_is_file() {
  is_file_ = false;
}
bool MultiPart::is_file() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.MultiPart.is_file)
  return is_file_;
}
void MultiPart::set_is_file(bool value) {
  
  is_file_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.MultiPart.is_file)
}

// uint64 enc_method = 3;
void MultiPart::clear_enc_method() {
  enc_method_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MultiPart::enc_method() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.MultiPart.enc_method)
  return enc_method_;
}
void MultiPart::set_enc_method(::google::protobuf::uint64 value) {
  
  enc_method_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.MultiPart.enc_method)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTLRequestEncOpt::kMsgIdFieldNumber;
const int CTLRequestEncOpt::kActivityIdFieldNumber;
const int CTLRequestEncOpt::kSessionIdFieldNumber;
const int CTLRequestEncOpt::kTrafficIdFieldNumber;
const int CTLRequestEncOpt::kEncEnterprisePwdFieldNumber;
const int CTLRequestEncOpt::kEncEnterpriseCipherkeyFieldNumber;
const int CTLRequestEncOpt::kEncEnterpriceTestFieldNumber;
const int CTLRequestEncOpt::kEncOrDecFieldNumber;
const int CTLRequestEncOpt::kMultipartFieldNumber;
const int CTLRequestEncOpt::kProductIdFieldNumber;
const int CTLRequestEncOpt::kEnterpriseIdFieldNumber;
const int CTLRequestEncOpt::kUserIdFieldNumber;
const int CTLRequestEncOpt::kCspProductNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTLRequestEncOpt::CTLRequestEncOpt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EncOptvsCtl_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
}
CTLRequestEncOpt::CTLRequestEncOpt(const CTLRequestEncOpt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      multipart_(from.multipart_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traffic_id().size() > 0) {
    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  enc_enterprise_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enc_enterprise_pwd().size() > 0) {
    enc_enterprise_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprise_pwd_);
  }
  enc_enterprise_cipherkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enc_enterprise_cipherkey().size() > 0) {
    enc_enterprise_cipherkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprise_cipherkey_);
  }
  enc_enterprice_test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enc_enterprice_test().size() > 0) {
    enc_enterprice_test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprice_test_);
  }
  csp_product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.csp_product_name().size() > 0) {
    csp_product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_product_name_);
  }
  ::memcpy(&activity_id_, &from.activity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&activity_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
}

void CTLRequestEncOpt::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_cipherkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprice_test_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(user_id_));
  _cached_size_ = 0;
}

CTLRequestEncOpt::~CTLRequestEncOpt() {
  // @@protoc_insertion_point(destructor:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  SharedDtor();
}

void CTLRequestEncOpt::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_cipherkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprice_test_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTLRequestEncOpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTLRequestEncOpt::descriptor() {
  protobuf_EncOptvsCtl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EncOptvsCtl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CTLRequestEncOpt& CTLRequestEncOpt::default_instance() {
  protobuf_EncOptvsCtl_2eproto::InitDefaults();
  return *internal_default_instance();
}

CTLRequestEncOpt* CTLRequestEncOpt::New(::google::protobuf::Arena* arena) const {
  CTLRequestEncOpt* n = new CTLRequestEncOpt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CTLRequestEncOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multipart_.Clear();
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprise_cipherkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enc_enterprice_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

bool CTLRequestEncOpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 activity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traffic_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enc_enterprise_pwd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enc_enterprise_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enc_enterprise_pwd().data(), static_cast<int>(this->enc_enterprise_pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enc_enterprise_cipherkey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enc_enterprise_cipherkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enc_enterprise_cipherkey().data(), static_cast<int>(this->enc_enterprise_cipherkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enc_enterprice_test = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enc_enterprice_test()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enc_enterprice_test().data(), static_cast<int>(this->enc_enterprice_test().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 enc_or_dec = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enc_or_dec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.cloudscreen.efsmoudle.MultiPart multipart = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_multipart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 product_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 enterprise_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enterprise_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string csp_product_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_csp_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  return false;
#undef DO_
}

void CTLRequestEncOpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // uint64 activity_id = 2;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->activity_id(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // string traffic_id = 4;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->traffic_id(), output);
  }

  // string enc_enterprise_pwd = 5;
  if (this->enc_enterprise_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprise_pwd().data(), static_cast<int>(this->enc_enterprise_pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->enc_enterprise_pwd(), output);
  }

  // string enc_enterprise_cipherkey = 6;
  if (this->enc_enterprise_cipherkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprise_cipherkey().data(), static_cast<int>(this->enc_enterprise_cipherkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->enc_enterprise_cipherkey(), output);
  }

  // string enc_enterprice_test = 7;
  if (this->enc_enterprice_test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprice_test().data(), static_cast<int>(this->enc_enterprice_test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->enc_enterprice_test(), output);
  }

  // uint32 enc_or_dec = 8;
  if (this->enc_or_dec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->enc_or_dec(), output);
  }

  // repeated .com.cloudscreen.efsmoudle.MultiPart multipart = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multipart_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->multipart(static_cast<int>(i)), output);
  }

  // uint64 product_id = 11;
  if (this->product_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->product_id(), output);
  }

  // uint64 enterprise_id = 12;
  if (this->enterprise_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->enterprise_id(), output);
  }

  // uint64 user_id = 13;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->user_id(), output);
  }

  // string csp_product_name = 14;
  if (this->csp_product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->csp_product_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
}

::google::protobuf::uint8* CTLRequestEncOpt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // uint64 activity_id = 2;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->activity_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // string traffic_id = 4;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->traffic_id(), target);
  }

  // string enc_enterprise_pwd = 5;
  if (this->enc_enterprise_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprise_pwd().data(), static_cast<int>(this->enc_enterprise_pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->enc_enterprise_pwd(), target);
  }

  // string enc_enterprise_cipherkey = 6;
  if (this->enc_enterprise_cipherkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprise_cipherkey().data(), static_cast<int>(this->enc_enterprise_cipherkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->enc_enterprise_cipherkey(), target);
  }

  // string enc_enterprice_test = 7;
  if (this->enc_enterprice_test().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enc_enterprice_test().data(), static_cast<int>(this->enc_enterprice_test().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->enc_enterprice_test(), target);
  }

  // uint32 enc_or_dec = 8;
  if (this->enc_or_dec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->enc_or_dec(), target);
  }

  // repeated .com.cloudscreen.efsmoudle.MultiPart multipart = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multipart_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->multipart(static_cast<int>(i)), deterministic, target);
  }

  // uint64 product_id = 11;
  if (this->product_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->product_id(), target);
  }

  // uint64 enterprise_id = 12;
  if (this->enterprise_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->enterprise_id(), target);
  }

  // uint64 user_id = 13;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->user_id(), target);
  }

  // string csp_product_name = 14;
  if (this->csp_product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->csp_product_name().data(), static_cast<int>(this->csp_product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->csp_product_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  return target;
}

size_t CTLRequestEncOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.cloudscreen.efsmoudle.MultiPart multipart = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->multipart_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multipart(static_cast<int>(i)));
    }
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string traffic_id = 4;
  if (this->traffic_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traffic_id());
  }

  // string enc_enterprise_pwd = 5;
  if (this->enc_enterprise_pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enc_enterprise_pwd());
  }

  // string enc_enterprise_cipherkey = 6;
  if (this->enc_enterprise_cipherkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enc_enterprise_cipherkey());
  }

  // string enc_enterprice_test = 7;
  if (this->enc_enterprice_test().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enc_enterprice_test());
  }

  // string csp_product_name = 14;
  if (this->csp_product_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->csp_product_name());
  }

  // uint64 activity_id = 2;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->activity_id());
  }

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // uint32 enc_or_dec = 8;
  if (this->enc_or_dec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enc_or_dec());
  }

  // uint64 product_id = 11;
  if (this->product_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->product_id());
  }

  // uint64 enterprise_id = 12;
  if (this->enterprise_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->enterprise_id());
  }

  // uint64 user_id = 13;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTLRequestEncOpt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  GOOGLE_DCHECK_NE(&from, this);
  const CTLRequestEncOpt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CTLRequestEncOpt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
    MergeFrom(*source);
  }
}

void CTLRequestEncOpt::MergeFrom(const CTLRequestEncOpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multipart_.MergeFrom(from.multipart_);
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.traffic_id().size() > 0) {

    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  if (from.enc_enterprise_pwd().size() > 0) {

    enc_enterprise_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprise_pwd_);
  }
  if (from.enc_enterprise_cipherkey().size() > 0) {

    enc_enterprise_cipherkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprise_cipherkey_);
  }
  if (from.enc_enterprice_test().size() > 0) {

    enc_enterprice_test_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enc_enterprice_test_);
  }
  if (from.csp_product_name().size() > 0) {

    csp_product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csp_product_name_);
  }
  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.enc_or_dec() != 0) {
    set_enc_or_dec(from.enc_or_dec());
  }
  if (from.product_id() != 0) {
    set_product_id(from.product_id());
  }
  if (from.enterprise_id() != 0) {
    set_enterprise_id(from.enterprise_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void CTLRequestEncOpt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTLRequestEncOpt::CopyFrom(const CTLRequestEncOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cloudscreen.efsmoudle.CTLRequestEncOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTLRequestEncOpt::IsInitialized() const {
  return true;
}

void CTLRequestEncOpt::Swap(CTLRequestEncOpt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTLRequestEncOpt::InternalSwap(CTLRequestEncOpt* other) {
  using std::swap;
  multipart_.InternalSwap(&other->multipart_);
  session_id_.Swap(&other->session_id_);
  traffic_id_.Swap(&other->traffic_id_);
  enc_enterprise_pwd_.Swap(&other->enc_enterprise_pwd_);
  enc_enterprise_cipherkey_.Swap(&other->enc_enterprise_cipherkey_);
  enc_enterprice_test_.Swap(&other->enc_enterprice_test_);
  csp_product_name_.Swap(&other->csp_product_name_);
  swap(activity_id_, other->activity_id_);
  swap(msg_id_, other->msg_id_);
  swap(enc_or_dec_, other->enc_or_dec_);
  swap(product_id_, other->product_id_);
  swap(enterprise_id_, other->enterprise_id_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CTLRequestEncOpt::GetMetadata() const {
  protobuf_EncOptvsCtl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EncOptvsCtl_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CTLRequestEncOpt

// uint32 msg_id = 1;
void CTLRequestEncOpt::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 CTLRequestEncOpt::msg_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.msg_id)
  return msg_id_;
}
void CTLRequestEncOpt::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.msg_id)
}

// uint64 activity_id = 2;
void CTLRequestEncOpt::clear_activity_id() {
  activity_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CTLRequestEncOpt::activity_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.activity_id)
  return activity_id_;
}
void CTLRequestEncOpt::set_activity_id(::google::protobuf::uint64 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.activity_id)
}

// string session_id = 3;
void CTLRequestEncOpt::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CTLRequestEncOpt::session_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
  return session_id_.GetNoArena();
}
void CTLRequestEncOpt::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}
#if LANG_CXX11
void CTLRequestEncOpt::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}
#endif
void CTLRequestEncOpt::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}
void CTLRequestEncOpt::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}
::std::string* CTLRequestEncOpt::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTLRequestEncOpt::release_session_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTLRequestEncOpt::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.session_id)
}

// string traffic_id = 4;
void CTLRequestEncOpt::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CTLRequestEncOpt::traffic_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
  return traffic_id_.GetNoArena();
}
void CTLRequestEncOpt::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}
#if LANG_CXX11
void CTLRequestEncOpt::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}
#endif
void CTLRequestEncOpt::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}
void CTLRequestEncOpt::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}
::std::string* CTLRequestEncOpt::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTLRequestEncOpt::release_traffic_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTLRequestEncOpt::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.traffic_id)
}

// string enc_enterprise_pwd = 5;
void CTLRequestEncOpt::clear_enc_enterprise_pwd() {
  enc_enterprise_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CTLRequestEncOpt::enc_enterprise_pwd() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
  return enc_enterprise_pwd_.GetNoArena();
}
void CTLRequestEncOpt::set_enc_enterprise_pwd(const ::std::string& value) {
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}
#if LANG_CXX11
void CTLRequestEncOpt::set_enc_enterprise_pwd(::std::string&& value) {
  
  enc_enterprise_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}
#endif
void CTLRequestEncOpt::set_enc_enterprise_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}
void CTLRequestEncOpt::set_enc_enterprise_pwd(const char* value, size_t size) {
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}
::std::string* CTLRequestEncOpt::mutable_enc_enterprise_pwd() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
  return enc_enterprise_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTLRequestEncOpt::release_enc_enterprise_pwd() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
  
  return enc_enterprise_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTLRequestEncOpt::set_allocated_enc_enterprise_pwd(::std::string* enc_enterprise_pwd) {
  if (enc_enterprise_pwd != NULL) {
    
  } else {
    
  }
  enc_enterprise_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprise_pwd);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_pwd)
}

// string enc_enterprise_cipherkey = 6;
void CTLRequestEncOpt::clear_enc_enterprise_cipherkey() {
  enc_enterprise_cipherkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CTLRequestEncOpt::enc_enterprise_cipherkey() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
  return enc_enterprise_cipherkey_.GetNoArena();
}
void CTLRequestEncOpt::set_enc_enterprise_cipherkey(const ::std::string& value) {
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}
#if LANG_CXX11
void CTLRequestEncOpt::set_enc_enterprise_cipherkey(::std::string&& value) {
  
  enc_enterprise_cipherkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}
#endif
void CTLRequestEncOpt::set_enc_enterprise_cipherkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}
void CTLRequestEncOpt::set_enc_enterprise_cipherkey(const char* value, size_t size) {
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}
::std::string* CTLRequestEncOpt::mutable_enc_enterprise_cipherkey() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
  return enc_enterprise_cipherkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTLRequestEncOpt::release_enc_enterprise_cipherkey() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
  
  return enc_enterprise_cipherkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTLRequestEncOpt::set_allocated_enc_enterprise_cipherkey(::std::string* enc_enterprise_cipherkey) {
  if (enc_enterprise_cipherkey != NULL) {
    
  } else {
    
  }
  enc_enterprise_cipherkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprise_cipherkey);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprise_cipherkey)
}

// string enc_enterprice_test = 7;
void CTLRequestEncOpt::clear_enc_enterprice_test() {
  enc_enterprice_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CTLRequestEncOpt::enc_enterprice_test() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
  return enc_enterprice_test_.GetNoArena();
}
void CTLRequestEncOpt::set_enc_enterprice_test(const ::std::string& value) {
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}
#if LANG_CXX11
void CTLRequestEncOpt::set_enc_enterprice_test(::std::string&& value) {
  
  enc_enterprice_test_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}
#endif
void CTLRequestEncOpt::set_enc_enterprice_test(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}
void CTLRequestEncOpt::set_enc_enterprice_test(const char* value, size_t size) {
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}
::std::string* CTLRequestEncOpt::mutable_enc_enterprice_test() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
  return enc_enterprice_test_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTLRequestEncOpt::release_enc_enterprice_test() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
  
  return enc_enterprice_test_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTLRequestEncOpt::set_allocated_enc_enterprice_test(::std::string* enc_enterprice_test) {
  if (enc_enterprice_test != NULL) {
    
  } else {
    
  }
  enc_enterprice_test_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprice_test);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_enterprice_test)
}

// uint32 enc_or_dec = 8;
void CTLRequestEncOpt::clear_enc_or_dec() {
  enc_or_dec_ = 0u;
}
::google::protobuf::uint32 CTLRequestEncOpt::enc_or_dec() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_or_dec)
  return enc_or_dec_;
}
void CTLRequestEncOpt::set_enc_or_dec(::google::protobuf::uint32 value) {
  
  enc_or_dec_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enc_or_dec)
}

// repeated .com.cloudscreen.efsmoudle.MultiPart multipart = 10;
int CTLRequestEncOpt::multipart_size() const {
  return multipart_.size();
}
void CTLRequestEncOpt::clear_multipart() {
  multipart_.Clear();
}
const ::com::cloudscreen::efsmoudle::MultiPart& CTLRequestEncOpt::multipart(int index) const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return multipart_.Get(index);
}
::com::cloudscreen::efsmoudle::MultiPart* CTLRequestEncOpt::mutable_multipart(int index) {
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return multipart_.Mutable(index);
}
::com::cloudscreen::efsmoudle::MultiPart* CTLRequestEncOpt::add_multipart() {
  // @@protoc_insertion_point(field_add:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return multipart_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::cloudscreen::efsmoudle::MultiPart >*
CTLRequestEncOpt::mutable_multipart() {
  // @@protoc_insertion_point(field_mutable_list:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return &multipart_;
}
const ::google::protobuf::RepeatedPtrField< ::com::cloudscreen::efsmoudle::MultiPart >&
CTLRequestEncOpt::multipart() const {
  // @@protoc_insertion_point(field_list:com.cloudscreen.efsmoudle.CTLRequestEncOpt.multipart)
  return multipart_;
}

// uint64 product_id = 11;
void CTLRequestEncOpt::clear_product_id() {
  product_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CTLRequestEncOpt::product_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.product_id)
  return product_id_;
}
void CTLRequestEncOpt::set_product_id(::google::protobuf::uint64 value) {
  
  product_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.product_id)
}

// uint64 enterprise_id = 12;
void CTLRequestEncOpt::clear_enterprise_id() {
  enterprise_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CTLRequestEncOpt::enterprise_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enterprise_id)
  return enterprise_id_;
}
void CTLRequestEncOpt::set_enterprise_id(::google::protobuf::uint64 value) {
  
  enterprise_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.enterprise_id)
}

// uint64 user_id = 13;
void CTLRequestEncOpt::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CTLRequestEncOpt::user_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.user_id)
  return user_id_;
}
void CTLRequestEncOpt::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.user_id)
}

// string csp_product_name = 14;
void CTLRequestEncOpt::clear_csp_product_name() {
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CTLRequestEncOpt::csp_product_name() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
  return csp_product_name_.GetNoArena();
}
void CTLRequestEncOpt::set_csp_product_name(const ::std::string& value) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}
#if LANG_CXX11
void CTLRequestEncOpt::set_csp_product_name(::std::string&& value) {
  
  csp_product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}
#endif
void CTLRequestEncOpt::set_csp_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}
void CTLRequestEncOpt::set_csp_product_name(const char* value, size_t size) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}
::std::string* CTLRequestEncOpt::mutable_csp_product_name() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CTLRequestEncOpt::release_csp_product_name() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
  
  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CTLRequestEncOpt::set_allocated_csp_product_name(::std::string* csp_product_name) {
  if (csp_product_name != NULL) {
    
  } else {
    
  }
  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.CTLRequestEncOpt.csp_product_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEncPara::kMsgIdFieldNumber;
const int ResponseEncPara::kActivityIdFieldNumber;
const int ResponseEncPara::kSessionIdFieldNumber;
const int ResponseEncPara::kTrafficIdFieldNumber;
const int ResponseEncPara::kOptFileNumFieldNumber;
const int ResponseEncPara::kSucceedFileNumFieldNumber;
const int ResponseEncPara::kIsSucceedFieldNumber;
const int ResponseEncPara::kHttpHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEncPara::ResponseEncPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EncOptvsCtl_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cloudscreen.efsmoudle.ResponseEncPara)
}
ResponseEncPara::ResponseEncPara(const ResponseEncPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.traffic_id().size() > 0) {
    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  http_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.http_header().size() > 0) {
    http_header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_header_);
  }
  ::memcpy(&activity_id_, &from.activity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&activity_id_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:com.cloudscreen.efsmoudle.ResponseEncPara)
}

void ResponseEncPara::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(is_succeed_));
  _cached_size_ = 0;
}

ResponseEncPara::~ResponseEncPara() {
  // @@protoc_insertion_point(destructor:com.cloudscreen.efsmoudle.ResponseEncPara)
  SharedDtor();
}

void ResponseEncPara::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseEncPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEncPara::descriptor() {
  protobuf_EncOptvsCtl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EncOptvsCtl_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseEncPara& ResponseEncPara::default_instance() {
  protobuf_EncOptvsCtl_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseEncPara* ResponseEncPara::New(::google::protobuf::Arena* arena) const {
  ResponseEncPara* n = new ResponseEncPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseEncPara::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cloudscreen.efsmoudle.ResponseEncPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&activity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&activity_id_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear();
}

bool ResponseEncPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cloudscreen.efsmoudle.ResponseEncPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 activity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.ResponseEncPara.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string traffic_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 opt_file_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_file_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 succeed_file_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &succeed_file_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 is_succeed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_succeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string http_header = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_header()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->http_header().data(), static_cast<int>(this->http_header().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.cloudscreen.efsmoudle.ResponseEncPara.http_header"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cloudscreen.efsmoudle.ResponseEncPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cloudscreen.efsmoudle.ResponseEncPara)
  return false;
#undef DO_
}

void ResponseEncPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cloudscreen.efsmoudle.ResponseEncPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // uint64 activity_id = 2;
  if (this->activity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->activity_id(), output);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.ResponseEncPara.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // string traffic_id = 4;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->traffic_id(), output);
  }

  // uint32 opt_file_num = 5;
  if (this->opt_file_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->opt_file_num(), output);
  }

  // uint32 succeed_file_num = 6;
  if (this->succeed_file_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->succeed_file_num(), output);
  }

  // uint32 is_succeed = 7;
  if (this->is_succeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_succeed(), output);
  }

  // string http_header = 8;
  if (this->http_header().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_header().data(), static_cast<int>(this->http_header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.ResponseEncPara.http_header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->http_header(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cloudscreen.efsmoudle.ResponseEncPara)
}

::google::protobuf::uint8* ResponseEncPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cloudscreen.efsmoudle.ResponseEncPara)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // uint64 activity_id = 2;
  if (this->activity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->activity_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.ResponseEncPara.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // string traffic_id = 4;
  if (this->traffic_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->traffic_id().data(), static_cast<int>(this->traffic_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->traffic_id(), target);
  }

  // uint32 opt_file_num = 5;
  if (this->opt_file_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->opt_file_num(), target);
  }

  // uint32 succeed_file_num = 6;
  if (this->succeed_file_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->succeed_file_num(), target);
  }

  // uint32 is_succeed = 7;
  if (this->is_succeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_succeed(), target);
  }

  // string http_header = 8;
  if (this->http_header().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_header().data(), static_cast<int>(this->http_header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.cloudscreen.efsmoudle.ResponseEncPara.http_header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->http_header(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cloudscreen.efsmoudle.ResponseEncPara)
  return target;
}

size_t ResponseEncPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cloudscreen.efsmoudle.ResponseEncPara)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string traffic_id = 4;
  if (this->traffic_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->traffic_id());
  }

  // string http_header = 8;
  if (this->http_header().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->http_header());
  }

  // uint64 activity_id = 2;
  if (this->activity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->activity_id());
  }

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // uint32 opt_file_num = 5;
  if (this->opt_file_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opt_file_num());
  }

  // uint32 succeed_file_num = 6;
  if (this->succeed_file_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->succeed_file_num());
  }

  // uint32 is_succeed = 7;
  if (this->is_succeed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_succeed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEncPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cloudscreen.efsmoudle.ResponseEncPara)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseEncPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseEncPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cloudscreen.efsmoudle.ResponseEncPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cloudscreen.efsmoudle.ResponseEncPara)
    MergeFrom(*source);
  }
}

void ResponseEncPara::MergeFrom(const ResponseEncPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cloudscreen.efsmoudle.ResponseEncPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.traffic_id().size() > 0) {

    traffic_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_id_);
  }
  if (from.http_header().size() > 0) {

    http_header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_header_);
  }
  if (from.activity_id() != 0) {
    set_activity_id(from.activity_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.opt_file_num() != 0) {
    set_opt_file_num(from.opt_file_num());
  }
  if (from.succeed_file_num() != 0) {
    set_succeed_file_num(from.succeed_file_num());
  }
  if (from.is_succeed() != 0) {
    set_is_succeed(from.is_succeed());
  }
}

void ResponseEncPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cloudscreen.efsmoudle.ResponseEncPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEncPara::CopyFrom(const ResponseEncPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cloudscreen.efsmoudle.ResponseEncPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEncPara::IsInitialized() const {
  return true;
}

void ResponseEncPara::Swap(ResponseEncPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEncPara::InternalSwap(ResponseEncPara* other) {
  using std::swap;
  session_id_.Swap(&other->session_id_);
  traffic_id_.Swap(&other->traffic_id_);
  http_header_.Swap(&other->http_header_);
  swap(activity_id_, other->activity_id_);
  swap(msg_id_, other->msg_id_);
  swap(opt_file_num_, other->opt_file_num_);
  swap(succeed_file_num_, other->succeed_file_num_);
  swap(is_succeed_, other->is_succeed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseEncPara::GetMetadata() const {
  protobuf_EncOptvsCtl_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EncOptvsCtl_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseEncPara

// uint32 msg_id = 1;
void ResponseEncPara::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 ResponseEncPara::msg_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.msg_id)
  return msg_id_;
}
void ResponseEncPara::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.msg_id)
}

// uint64 activity_id = 2;
void ResponseEncPara::clear_activity_id() {
  activity_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseEncPara::activity_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.activity_id)
  return activity_id_;
}
void ResponseEncPara::set_activity_id(::google::protobuf::uint64 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.activity_id)
}

// string session_id = 3;
void ResponseEncPara::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseEncPara::session_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
  return session_id_.GetNoArena();
}
void ResponseEncPara::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}
#if LANG_CXX11
void ResponseEncPara::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}
#endif
void ResponseEncPara::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}
void ResponseEncPara::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}
::std::string* ResponseEncPara::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseEncPara::release_session_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseEncPara::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.ResponseEncPara.session_id)
}

// string traffic_id = 4;
void ResponseEncPara::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseEncPara::traffic_id() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
  return traffic_id_.GetNoArena();
}
void ResponseEncPara::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}
#if LANG_CXX11
void ResponseEncPara::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}
#endif
void ResponseEncPara::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}
void ResponseEncPara::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}
::std::string* ResponseEncPara::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseEncPara::release_traffic_id() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseEncPara::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.ResponseEncPara.traffic_id)
}

// uint32 opt_file_num = 5;
void ResponseEncPara::clear_opt_file_num() {
  opt_file_num_ = 0u;
}
::google::protobuf::uint32 ResponseEncPara::opt_file_num() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.opt_file_num)
  return opt_file_num_;
}
void ResponseEncPara::set_opt_file_num(::google::protobuf::uint32 value) {
  
  opt_file_num_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.opt_file_num)
}

// uint32 succeed_file_num = 6;
void ResponseEncPara::clear_succeed_file_num() {
  succeed_file_num_ = 0u;
}
::google::protobuf::uint32 ResponseEncPara::succeed_file_num() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.succeed_file_num)
  return succeed_file_num_;
}
void ResponseEncPara::set_succeed_file_num(::google::protobuf::uint32 value) {
  
  succeed_file_num_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.succeed_file_num)
}

// uint32 is_succeed = 7;
void ResponseEncPara::clear_is_succeed() {
  is_succeed_ = 0u;
}
::google::protobuf::uint32 ResponseEncPara::is_succeed() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.is_succeed)
  return is_succeed_;
}
void ResponseEncPara::set_is_succeed(::google::protobuf::uint32 value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.is_succeed)
}

// string http_header = 8;
void ResponseEncPara::clear_http_header() {
  http_header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseEncPara::http_header() const {
  // @@protoc_insertion_point(field_get:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
  return http_header_.GetNoArena();
}
void ResponseEncPara::set_http_header(const ::std::string& value) {
  
  http_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}
#if LANG_CXX11
void ResponseEncPara::set_http_header(::std::string&& value) {
  
  http_header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}
#endif
void ResponseEncPara::set_http_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  http_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}
void ResponseEncPara::set_http_header(const char* value, size_t size) {
  
  http_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}
::std::string* ResponseEncPara::mutable_http_header() {
  
  // @@protoc_insertion_point(field_mutable:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
  return http_header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseEncPara::release_http_header() {
  // @@protoc_insertion_point(field_release:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
  
  return http_header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseEncPara::set_allocated_http_header(::std::string* http_header) {
  if (http_header != NULL) {
    
  } else {
    
  }
  http_header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_header);
  // @@protoc_insertion_point(field_set_allocated:com.cloudscreen.efsmoudle.ResponseEncPara.http_header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace efsmoudle
}  // namespace cloudscreen
}  // namespace com

// @@protoc_insertion_point(global_scope)
