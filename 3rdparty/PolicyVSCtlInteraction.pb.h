// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PolicyVSCtlInteraction.proto

#ifndef PROTOBUF_PolicyVSCtlInteraction_2eproto__INCLUDED
#define PROTOBUF_PolicyVSCtlInteraction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace policyvsctlinteraction {
class CtlRequstPolicy;
class CtlRequstPolicyDefaultTypeInternal;
extern CtlRequstPolicyDefaultTypeInternal _CtlRequstPolicy_default_instance_;
class PolicyResponseCtl;
class PolicyResponseCtlDefaultTypeInternal;
extern PolicyResponseCtlDefaultTypeInternal _PolicyResponseCtl_default_instance_;
}  // namespace policyvsctlinteraction

namespace policyvsctlinteraction {

namespace protobuf_PolicyVSCtlInteraction_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_PolicyVSCtlInteraction_2eproto

// ===================================================================

class CtlRequstPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:policyvsctlinteraction.CtlRequstPolicy) */ {
 public:
  CtlRequstPolicy();
  virtual ~CtlRequstPolicy();

  CtlRequstPolicy(const CtlRequstPolicy& from);

  inline CtlRequstPolicy& operator=(const CtlRequstPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CtlRequstPolicy(CtlRequstPolicy&& from) noexcept
    : CtlRequstPolicy() {
    *this = ::std::move(from);
  }

  inline CtlRequstPolicy& operator=(CtlRequstPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtlRequstPolicy& default_instance();

  static inline const CtlRequstPolicy* internal_default_instance() {
    return reinterpret_cast<const CtlRequstPolicy*>(
               &_CtlRequstPolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CtlRequstPolicy* other);
  friend void swap(CtlRequstPolicy& a, CtlRequstPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtlRequstPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  CtlRequstPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CtlRequstPolicy& from);
  void MergeFrom(const CtlRequstPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CtlRequstPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 50;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 50;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string traffic_id = 60;
  void clear_traffic_id();
  static const int kTrafficIdFieldNumber = 60;
  const ::std::string& traffic_id() const;
  void set_traffic_id(const ::std::string& value);
  #if LANG_CXX11
  void set_traffic_id(::std::string&& value);
  #endif
  void set_traffic_id(const char* value);
  void set_traffic_id(const char* value, size_t size);
  ::std::string* mutable_traffic_id();
  ::std::string* release_traffic_id();
  void set_allocated_traffic_id(::std::string* traffic_id);

  // string block_tip = 70;
  void clear_block_tip();
  static const int kBlockTipFieldNumber = 70;
  const ::std::string& block_tip() const;
  void set_block_tip(const ::std::string& value);
  #if LANG_CXX11
  void set_block_tip(::std::string&& value);
  #endif
  void set_block_tip(const char* value);
  void set_block_tip(const char* value, size_t size);
  ::std::string* mutable_block_tip();
  ::std::string* release_block_tip();
  void set_allocated_block_tip(::std::string* block_tip);

  // uint32 msg_id = 10;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 10;
  ::google::protobuf::uint32 msg_id() const;
  void set_msg_id(::google::protobuf::uint32 value);

  // uint64 activity_id = 20;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 20;
  ::google::protobuf::uint64 activity_id() const;
  void set_activity_id(::google::protobuf::uint64 value);

  // uint64 product_id = 30;
  void clear_product_id();
  static const int kProductIdFieldNumber = 30;
  ::google::protobuf::uint64 product_id() const;
  void set_product_id(::google::protobuf::uint64 value);

  // uint64 enc_product_id = 31;
  void clear_enc_product_id();
  static const int kEncProductIdFieldNumber = 31;
  ::google::protobuf::uint64 enc_product_id() const;
  void set_enc_product_id(::google::protobuf::uint64 value);

  // uint64 event_id = 40;
  void clear_event_id();
  static const int kEventIdFieldNumber = 40;
  ::google::protobuf::uint64 event_id() const;
  void set_event_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:policyvsctlinteraction.CtlRequstPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr traffic_id_;
  ::google::protobuf::internal::ArenaStringPtr block_tip_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint64 activity_id_;
  ::google::protobuf::uint64 product_id_;
  ::google::protobuf::uint64 enc_product_id_;
  ::google::protobuf::uint64 event_id_;
  mutable int _cached_size_;
  friend struct protobuf_PolicyVSCtlInteraction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PolicyResponseCtl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:policyvsctlinteraction.PolicyResponseCtl) */ {
 public:
  PolicyResponseCtl();
  virtual ~PolicyResponseCtl();

  PolicyResponseCtl(const PolicyResponseCtl& from);

  inline PolicyResponseCtl& operator=(const PolicyResponseCtl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PolicyResponseCtl(PolicyResponseCtl&& from) noexcept
    : PolicyResponseCtl() {
    *this = ::std::move(from);
  }

  inline PolicyResponseCtl& operator=(PolicyResponseCtl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PolicyResponseCtl& default_instance();

  static inline const PolicyResponseCtl* internal_default_instance() {
    return reinterpret_cast<const PolicyResponseCtl*>(
               &_PolicyResponseCtl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PolicyResponseCtl* other);
  friend void swap(PolicyResponseCtl& a, PolicyResponseCtl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PolicyResponseCtl* New() const PROTOBUF_FINAL { return New(NULL); }

  PolicyResponseCtl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PolicyResponseCtl& from);
  void MergeFrom(const PolicyResponseCtl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PolicyResponseCtl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 4;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 4;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string traffic_id = 5;
  void clear_traffic_id();
  static const int kTrafficIdFieldNumber = 5;
  const ::std::string& traffic_id() const;
  void set_traffic_id(const ::std::string& value);
  #if LANG_CXX11
  void set_traffic_id(::std::string&& value);
  #endif
  void set_traffic_id(const char* value);
  void set_traffic_id(const char* value, size_t size);
  ::std::string* mutable_traffic_id();
  ::std::string* release_traffic_id();
  void set_allocated_traffic_id(::std::string* traffic_id);

  // string enc_enterprise_pwd = 6;
  void clear_enc_enterprise_pwd();
  static const int kEncEnterprisePwdFieldNumber = 6;
  const ::std::string& enc_enterprise_pwd() const;
  void set_enc_enterprise_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_enc_enterprise_pwd(::std::string&& value);
  #endif
  void set_enc_enterprise_pwd(const char* value);
  void set_enc_enterprise_pwd(const char* value, size_t size);
  ::std::string* mutable_enc_enterprise_pwd();
  ::std::string* release_enc_enterprise_pwd();
  void set_allocated_enc_enterprise_pwd(::std::string* enc_enterprise_pwd);

  // string enc_enterprise_cipherkey = 7;
  void clear_enc_enterprise_cipherkey();
  static const int kEncEnterpriseCipherkeyFieldNumber = 7;
  const ::std::string& enc_enterprise_cipherkey() const;
  void set_enc_enterprise_cipherkey(const ::std::string& value);
  #if LANG_CXX11
  void set_enc_enterprise_cipherkey(::std::string&& value);
  #endif
  void set_enc_enterprise_cipherkey(const char* value);
  void set_enc_enterprise_cipherkey(const char* value, size_t size);
  ::std::string* mutable_enc_enterprise_cipherkey();
  ::std::string* release_enc_enterprise_cipherkey();
  void set_allocated_enc_enterprise_cipherkey(::std::string* enc_enterprise_cipherkey);

  // string enc_enterprice_test = 8;
  void clear_enc_enterprice_test();
  static const int kEncEnterpriceTestFieldNumber = 8;
  const ::std::string& enc_enterprice_test() const;
  void set_enc_enterprice_test(const ::std::string& value);
  #if LANG_CXX11
  void set_enc_enterprice_test(::std::string&& value);
  #endif
  void set_enc_enterprice_test(const char* value);
  void set_enc_enterprice_test(const char* value, size_t size);
  ::std::string* mutable_enc_enterprice_test();
  ::std::string* release_enc_enterprice_test();
  void set_allocated_enc_enterprice_test(::std::string* enc_enterprice_test);

  // string csp_product_name = 13;
  void clear_csp_product_name();
  static const int kCspProductNameFieldNumber = 13;
  const ::std::string& csp_product_name() const;
  void set_csp_product_name(const ::std::string& value);
  #if LANG_CXX11
  void set_csp_product_name(::std::string&& value);
  #endif
  void set_csp_product_name(const char* value);
  void set_csp_product_name(const char* value, size_t size);
  ::std::string* mutable_csp_product_name();
  ::std::string* release_csp_product_name();
  void set_allocated_csp_product_name(::std::string* csp_product_name);

  // uint64 activity_id = 2;
  void clear_activity_id();
  static const int kActivityIdFieldNumber = 2;
  ::google::protobuf::uint64 activity_id() const;
  void set_activity_id(::google::protobuf::uint64 value);

  // uint32 msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::uint32 msg_id() const;
  void set_msg_id(::google::protobuf::uint32 value);

  // uint32 action_taken = 3;
  void clear_action_taken();
  static const int kActionTakenFieldNumber = 3;
  ::google::protobuf::uint32 action_taken() const;
  void set_action_taken(::google::protobuf::uint32 value);

  // uint64 product_id = 10;
  void clear_product_id();
  static const int kProductIdFieldNumber = 10;
  ::google::protobuf::uint64 product_id() const;
  void set_product_id(::google::protobuf::uint64 value);

  // uint64 enterprise_id = 11;
  void clear_enterprise_id();
  static const int kEnterpriseIdFieldNumber = 11;
  ::google::protobuf::uint64 enterprise_id() const;
  void set_enterprise_id(::google::protobuf::uint64 value);

  // uint64 user_id = 12;
  void clear_user_id();
  static const int kUserIdFieldNumber = 12;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // uint32 block_result = 9;
  void clear_block_result();
  static const int kBlockResultFieldNumber = 9;
  ::google::protobuf::uint32 block_result() const;
  void set_block_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:policyvsctlinteraction.PolicyResponseCtl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr traffic_id_;
  ::google::protobuf::internal::ArenaStringPtr enc_enterprise_pwd_;
  ::google::protobuf::internal::ArenaStringPtr enc_enterprise_cipherkey_;
  ::google::protobuf::internal::ArenaStringPtr enc_enterprice_test_;
  ::google::protobuf::internal::ArenaStringPtr csp_product_name_;
  ::google::protobuf::uint64 activity_id_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint32 action_taken_;
  ::google::protobuf::uint64 product_id_;
  ::google::protobuf::uint64 enterprise_id_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 block_result_;
  mutable int _cached_size_;
  friend struct protobuf_PolicyVSCtlInteraction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CtlRequstPolicy

// uint32 msg_id = 10;
inline void CtlRequstPolicy::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::google::protobuf::uint32 CtlRequstPolicy::msg_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.msg_id)
  return msg_id_;
}
inline void CtlRequstPolicy::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.msg_id)
}

// uint64 activity_id = 20;
inline void CtlRequstPolicy::clear_activity_id() {
  activity_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CtlRequstPolicy::activity_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.activity_id)
  return activity_id_;
}
inline void CtlRequstPolicy::set_activity_id(::google::protobuf::uint64 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.activity_id)
}

// uint64 product_id = 30;
inline void CtlRequstPolicy::clear_product_id() {
  product_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CtlRequstPolicy::product_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.product_id)
  return product_id_;
}
inline void CtlRequstPolicy::set_product_id(::google::protobuf::uint64 value) {
  
  product_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.product_id)
}

// uint64 enc_product_id = 31;
inline void CtlRequstPolicy::clear_enc_product_id() {
  enc_product_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CtlRequstPolicy::enc_product_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.enc_product_id)
  return enc_product_id_;
}
inline void CtlRequstPolicy::set_enc_product_id(::google::protobuf::uint64 value) {
  
  enc_product_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.enc_product_id)
}

// uint64 event_id = 40;
inline void CtlRequstPolicy::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CtlRequstPolicy::event_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.event_id)
  return event_id_;
}
inline void CtlRequstPolicy::set_event_id(::google::protobuf::uint64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.event_id)
}

// string session_id = 50;
inline void CtlRequstPolicy::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CtlRequstPolicy::session_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.session_id)
  return session_id_.GetNoArena();
}
inline void CtlRequstPolicy::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.session_id)
}
#if LANG_CXX11
inline void CtlRequstPolicy::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.CtlRequstPolicy.session_id)
}
#endif
inline void CtlRequstPolicy::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.CtlRequstPolicy.session_id)
}
inline void CtlRequstPolicy::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.CtlRequstPolicy.session_id)
}
inline ::std::string* CtlRequstPolicy::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.CtlRequstPolicy.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtlRequstPolicy::release_session_id() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.CtlRequstPolicy.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtlRequstPolicy::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.CtlRequstPolicy.session_id)
}

// string traffic_id = 60;
inline void CtlRequstPolicy::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CtlRequstPolicy::traffic_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
  return traffic_id_.GetNoArena();
}
inline void CtlRequstPolicy::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}
#if LANG_CXX11
inline void CtlRequstPolicy::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}
#endif
inline void CtlRequstPolicy::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}
inline void CtlRequstPolicy::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}
inline ::std::string* CtlRequstPolicy::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtlRequstPolicy::release_traffic_id() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtlRequstPolicy::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.CtlRequstPolicy.traffic_id)
}

// string block_tip = 70;
inline void CtlRequstPolicy::clear_block_tip() {
  block_tip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CtlRequstPolicy::block_tip() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.CtlRequstPolicy.block_tip)
  return block_tip_.GetNoArena();
}
inline void CtlRequstPolicy::set_block_tip(const ::std::string& value) {
  
  block_tip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}
#if LANG_CXX11
inline void CtlRequstPolicy::set_block_tip(::std::string&& value) {
  
  block_tip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}
#endif
inline void CtlRequstPolicy::set_block_tip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  block_tip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}
inline void CtlRequstPolicy::set_block_tip(const char* value, size_t size) {
  
  block_tip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}
inline ::std::string* CtlRequstPolicy::mutable_block_tip() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.CtlRequstPolicy.block_tip)
  return block_tip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtlRequstPolicy::release_block_tip() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.CtlRequstPolicy.block_tip)
  
  return block_tip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtlRequstPolicy::set_allocated_block_tip(::std::string* block_tip) {
  if (block_tip != NULL) {
    
  } else {
    
  }
  block_tip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_tip);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.CtlRequstPolicy.block_tip)
}

// -------------------------------------------------------------------

// PolicyResponseCtl

// uint32 msg_id = 1;
inline void PolicyResponseCtl::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::google::protobuf::uint32 PolicyResponseCtl::msg_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.msg_id)
  return msg_id_;
}
inline void PolicyResponseCtl::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.msg_id)
}

// uint64 activity_id = 2;
inline void PolicyResponseCtl::clear_activity_id() {
  activity_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PolicyResponseCtl::activity_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.activity_id)
  return activity_id_;
}
inline void PolicyResponseCtl::set_activity_id(::google::protobuf::uint64 value) {
  
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.activity_id)
}

// uint32 action_taken = 3;
inline void PolicyResponseCtl::clear_action_taken() {
  action_taken_ = 0u;
}
inline ::google::protobuf::uint32 PolicyResponseCtl::action_taken() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.action_taken)
  return action_taken_;
}
inline void PolicyResponseCtl::set_action_taken(::google::protobuf::uint32 value) {
  
  action_taken_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.action_taken)
}

// string session_id = 4;
inline void PolicyResponseCtl::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PolicyResponseCtl::session_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.session_id)
  return session_id_.GetNoArena();
}
inline void PolicyResponseCtl::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.session_id)
}
#if LANG_CXX11
inline void PolicyResponseCtl::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.session_id)
}
#endif
inline void PolicyResponseCtl::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.session_id)
}
inline void PolicyResponseCtl::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.session_id)
}
inline ::std::string* PolicyResponseCtl::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyResponseCtl::release_session_id() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyResponseCtl::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.session_id)
}

// string traffic_id = 5;
inline void PolicyResponseCtl::clear_traffic_id() {
  traffic_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PolicyResponseCtl::traffic_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
  return traffic_id_.GetNoArena();
}
inline void PolicyResponseCtl::set_traffic_id(const ::std::string& value) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}
#if LANG_CXX11
inline void PolicyResponseCtl::set_traffic_id(::std::string&& value) {
  
  traffic_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}
#endif
inline void PolicyResponseCtl::set_traffic_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}
inline void PolicyResponseCtl::set_traffic_id(const char* value, size_t size) {
  
  traffic_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}
inline ::std::string* PolicyResponseCtl::mutable_traffic_id() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
  return traffic_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyResponseCtl::release_traffic_id() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
  
  return traffic_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyResponseCtl::set_allocated_traffic_id(::std::string* traffic_id) {
  if (traffic_id != NULL) {
    
  } else {
    
  }
  traffic_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_id);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.traffic_id)
}

// string enc_enterprise_pwd = 6;
inline void PolicyResponseCtl::clear_enc_enterprise_pwd() {
  enc_enterprise_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PolicyResponseCtl::enc_enterprise_pwd() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
  return enc_enterprise_pwd_.GetNoArena();
}
inline void PolicyResponseCtl::set_enc_enterprise_pwd(const ::std::string& value) {
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}
#if LANG_CXX11
inline void PolicyResponseCtl::set_enc_enterprise_pwd(::std::string&& value) {
  
  enc_enterprise_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}
#endif
inline void PolicyResponseCtl::set_enc_enterprise_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}
inline void PolicyResponseCtl::set_enc_enterprise_pwd(const char* value, size_t size) {
  
  enc_enterprise_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}
inline ::std::string* PolicyResponseCtl::mutable_enc_enterprise_pwd() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
  return enc_enterprise_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyResponseCtl::release_enc_enterprise_pwd() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
  
  return enc_enterprise_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyResponseCtl::set_allocated_enc_enterprise_pwd(::std::string* enc_enterprise_pwd) {
  if (enc_enterprise_pwd != NULL) {
    
  } else {
    
  }
  enc_enterprise_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprise_pwd);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_pwd)
}

// string enc_enterprise_cipherkey = 7;
inline void PolicyResponseCtl::clear_enc_enterprise_cipherkey() {
  enc_enterprise_cipherkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PolicyResponseCtl::enc_enterprise_cipherkey() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
  return enc_enterprise_cipherkey_.GetNoArena();
}
inline void PolicyResponseCtl::set_enc_enterprise_cipherkey(const ::std::string& value) {
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}
#if LANG_CXX11
inline void PolicyResponseCtl::set_enc_enterprise_cipherkey(::std::string&& value) {
  
  enc_enterprise_cipherkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}
#endif
inline void PolicyResponseCtl::set_enc_enterprise_cipherkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}
inline void PolicyResponseCtl::set_enc_enterprise_cipherkey(const char* value, size_t size) {
  
  enc_enterprise_cipherkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}
inline ::std::string* PolicyResponseCtl::mutable_enc_enterprise_cipherkey() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
  return enc_enterprise_cipherkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyResponseCtl::release_enc_enterprise_cipherkey() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
  
  return enc_enterprise_cipherkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyResponseCtl::set_allocated_enc_enterprise_cipherkey(::std::string* enc_enterprise_cipherkey) {
  if (enc_enterprise_cipherkey != NULL) {
    
  } else {
    
  }
  enc_enterprise_cipherkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprise_cipherkey);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.enc_enterprise_cipherkey)
}

// string enc_enterprice_test = 8;
inline void PolicyResponseCtl::clear_enc_enterprice_test() {
  enc_enterprice_test_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PolicyResponseCtl::enc_enterprice_test() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
  return enc_enterprice_test_.GetNoArena();
}
inline void PolicyResponseCtl::set_enc_enterprice_test(const ::std::string& value) {
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}
#if LANG_CXX11
inline void PolicyResponseCtl::set_enc_enterprice_test(::std::string&& value) {
  
  enc_enterprice_test_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}
#endif
inline void PolicyResponseCtl::set_enc_enterprice_test(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}
inline void PolicyResponseCtl::set_enc_enterprice_test(const char* value, size_t size) {
  
  enc_enterprice_test_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}
inline ::std::string* PolicyResponseCtl::mutable_enc_enterprice_test() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
  return enc_enterprice_test_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyResponseCtl::release_enc_enterprice_test() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
  
  return enc_enterprice_test_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyResponseCtl::set_allocated_enc_enterprice_test(::std::string* enc_enterprice_test) {
  if (enc_enterprice_test != NULL) {
    
  } else {
    
  }
  enc_enterprice_test_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_enterprice_test);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.enc_enterprice_test)
}

// uint32 block_result = 9;
inline void PolicyResponseCtl::clear_block_result() {
  block_result_ = 0u;
}
inline ::google::protobuf::uint32 PolicyResponseCtl::block_result() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.block_result)
  return block_result_;
}
inline void PolicyResponseCtl::set_block_result(::google::protobuf::uint32 value) {
  
  block_result_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.block_result)
}

// uint64 product_id = 10;
inline void PolicyResponseCtl::clear_product_id() {
  product_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PolicyResponseCtl::product_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.product_id)
  return product_id_;
}
inline void PolicyResponseCtl::set_product_id(::google::protobuf::uint64 value) {
  
  product_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.product_id)
}

// uint64 enterprise_id = 11;
inline void PolicyResponseCtl::clear_enterprise_id() {
  enterprise_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PolicyResponseCtl::enterprise_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.enterprise_id)
  return enterprise_id_;
}
inline void PolicyResponseCtl::set_enterprise_id(::google::protobuf::uint64 value) {
  
  enterprise_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.enterprise_id)
}

// uint64 user_id = 12;
inline void PolicyResponseCtl::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PolicyResponseCtl::user_id() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.user_id)
  return user_id_;
}
inline void PolicyResponseCtl::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.user_id)
}

// string csp_product_name = 13;
inline void PolicyResponseCtl::clear_csp_product_name() {
  csp_product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PolicyResponseCtl::csp_product_name() const {
  // @@protoc_insertion_point(field_get:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
  return csp_product_name_.GetNoArena();
}
inline void PolicyResponseCtl::set_csp_product_name(const ::std::string& value) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}
#if LANG_CXX11
inline void PolicyResponseCtl::set_csp_product_name(::std::string&& value) {
  
  csp_product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}
#endif
inline void PolicyResponseCtl::set_csp_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}
inline void PolicyResponseCtl::set_csp_product_name(const char* value, size_t size) {
  
  csp_product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}
inline ::std::string* PolicyResponseCtl::mutable_csp_product_name() {
  
  // @@protoc_insertion_point(field_mutable:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
  return csp_product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyResponseCtl::release_csp_product_name() {
  // @@protoc_insertion_point(field_release:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
  
  return csp_product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyResponseCtl::set_allocated_csp_product_name(::std::string* csp_product_name) {
  if (csp_product_name != NULL) {
    
  } else {
    
  }
  csp_product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csp_product_name);
  // @@protoc_insertion_point(field_set_allocated:policyvsctlinteraction.PolicyResponseCtl.csp_product_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace policyvsctlinteraction

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PolicyVSCtlInteraction_2eproto__INCLUDED
